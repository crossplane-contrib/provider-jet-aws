/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

// +kubebuilder:object:generate=true
// +groupName=load.aws.tf.crossplane.io
// +versionName=v1alpha1

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1alpha1 "github.com/crossplane-contrib/provider-tf-aws/apis/load/v1alpha1"
)

type LoadBalancerListenerPolicyObservation struct {
}

type LoadBalancerListenerPolicyParameters struct {
	LoadBalancerName string `json:"loadBalancerName" tf:"load_balancer_name"`

	LoadBalancerPort int64 `json:"loadBalancerPort" tf:"load_balancer_port"`

	PolicyNames []string `json:"policyNames,omitempty" tf:"policy_names"`
}

// LoadBalancerListenerPolicySpec defines the desired state of LoadBalancerListenerPolicy
type LoadBalancerListenerPolicySpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       LoadBalancerListenerPolicyParameters `json:"forProvider"`
}

// LoadBalancerListenerPolicyStatus defines the observed state of LoadBalancerListenerPolicy.
type LoadBalancerListenerPolicyStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          LoadBalancerListenerPolicyObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// LoadBalancerListenerPolicy is the Schema for the LoadBalancerListenerPolicys API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type LoadBalancerListenerPolicy struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              LoadBalancerListenerPolicySpec   `json:"spec"`
	Status            LoadBalancerListenerPolicyStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// LoadBalancerListenerPolicyList contains a list of LoadBalancerListenerPolicys
type LoadBalancerListenerPolicyList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []LoadBalancerListenerPolicy `json:"items"`
}

// Repository type metadata.
var (
	LoadBalancerListenerPolicyKind             = "LoadBalancerListenerPolicy"
	LoadBalancerListenerPolicyGroupKind        = schema.GroupKind{Group: v1alpha1.Group, Kind: LoadBalancerListenerPolicyKind}.String()
	LoadBalancerListenerPolicyKindAPIVersion   = LoadBalancerListenerPolicyKind + "." + v1alpha1.GroupVersion.String()
	LoadBalancerListenerPolicyGroupVersionKind = v1alpha1.GroupVersion.WithKind(LoadBalancerListenerPolicyKind)
)

func init() {
	v1alpha1.SchemeBuilder.Register(&LoadBalancerListenerPolicy{}, &LoadBalancerListenerPolicyList{})
}
