/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type BalancerPolicyObservation struct {
}

type BalancerPolicyParameters struct {

	// +kubebuilder:validation:Required
	LoadBalancerName *string `json:"loadBalancerName" tf:"load_balancer_name,omitempty"`

	// +kubebuilder:validation:Optional
	PolicyAttribute []PolicyAttributeParameters `json:"policyAttribute,omitempty" tf:"policy_attribute,omitempty"`

	// +kubebuilder:validation:Required
	PolicyName *string `json:"policyName" tf:"policy_name,omitempty"`

	// +kubebuilder:validation:Required
	PolicyTypeName *string `json:"policyTypeName" tf:"policy_type_name,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +terrajet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`
}

type PolicyAttributeObservation struct {
}

type PolicyAttributeParameters struct {

	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

// BalancerPolicySpec defines the desired state of BalancerPolicy
type BalancerPolicySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     BalancerPolicyParameters `json:"forProvider"`
}

// BalancerPolicyStatus defines the observed state of BalancerPolicy.
type BalancerPolicyStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        BalancerPolicyObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// BalancerPolicy is the Schema for the BalancerPolicys API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tfaws}
type BalancerPolicy struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              BalancerPolicySpec   `json:"spec"`
	Status            BalancerPolicyStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// BalancerPolicyList contains a list of BalancerPolicys
type BalancerPolicyList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []BalancerPolicy `json:"items"`
}

// Repository type metadata.
var (
	BalancerPolicyKind             = "BalancerPolicy"
	BalancerPolicyGroupKind        = schema.GroupKind{Group: Group, Kind: BalancerPolicyKind}.String()
	BalancerPolicyKindAPIVersion   = BalancerPolicyKind + "." + GroupVersion.String()
	BalancerPolicyGroupVersionKind = GroupVersion.WithKind(BalancerPolicyKind)
)

func init() {
	SchemeBuilder.Register(&BalancerPolicy{}, &BalancerPolicyList{})
}
