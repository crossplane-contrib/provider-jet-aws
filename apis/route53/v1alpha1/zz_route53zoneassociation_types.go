/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type Route53ZoneAssociationObservation struct {
	OwningAccount string `json:"owningAccount" tf:"owning_account"`
}

type Route53ZoneAssociationParameters struct {
	VPCID string `json:"vpcID" tf:"vpc_id"`

	VPCRegion *string `json:"vpcRegion,omitempty" tf:"vpc_region"`

	ZoneID string `json:"zoneID" tf:"zone_id"`
}

// Route53ZoneAssociationSpec defines the desired state of Route53ZoneAssociation
type Route53ZoneAssociationSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       Route53ZoneAssociationParameters `json:"forProvider"`
}

// Route53ZoneAssociationStatus defines the observed state of Route53ZoneAssociation.
type Route53ZoneAssociationStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          Route53ZoneAssociationObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Route53ZoneAssociation is the Schema for the Route53ZoneAssociations API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tfaws}
type Route53ZoneAssociation struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              Route53ZoneAssociationSpec   `json:"spec"`
	Status            Route53ZoneAssociationStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// Route53ZoneAssociationList contains a list of Route53ZoneAssociations
type Route53ZoneAssociationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Route53ZoneAssociation `json:"items"`
}

// Repository type metadata.
var (
	Route53ZoneAssociationKind             = "Route53ZoneAssociation"
	Route53ZoneAssociationGroupKind        = schema.GroupKind{Group: Group, Kind: Route53ZoneAssociationKind}.String()
	Route53ZoneAssociationKindAPIVersion   = Route53ZoneAssociationKind + "." + GroupVersion.String()
	Route53ZoneAssociationGroupVersionKind = GroupVersion.WithKind(Route53ZoneAssociationKind)
)

func init() {
	SchemeBuilder.Register(&Route53ZoneAssociation{}, &Route53ZoneAssociationList{})
}
