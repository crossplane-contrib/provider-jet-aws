/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

// +kubebuilder:object:generate=true
// +groupName=route53.aws.tf.crossplane.io
// +versionName=v1alpha1

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1alpha1 "github.com/crossplane-contrib/provider-tf-aws/apis/route53/v1alpha1"
)

type Route53ResolverFirewallRuleGroupObservation struct {
	Arn string `json:"arn" tf:"arn"`

	Id string `json:"id" tf:"id"`

	OwnerId string `json:"ownerId" tf:"owner_id"`

	ShareStatus string `json:"shareStatus" tf:"share_status"`
}

type Route53ResolverFirewallRuleGroupParameters struct {
	Name string `json:"name" tf:"name"`

	Tags map[string]string `json:"tags,omitempty" tf:"tags"`

	TagsAll map[string]string `json:"tagsAll,omitempty" tf:"tags_all"`
}

// Route53ResolverFirewallRuleGroupSpec defines the desired state of Route53ResolverFirewallRuleGroup
type Route53ResolverFirewallRuleGroupSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       Route53ResolverFirewallRuleGroupParameters `json:"forProvider"`
}

// Route53ResolverFirewallRuleGroupStatus defines the observed state of Route53ResolverFirewallRuleGroup.
type Route53ResolverFirewallRuleGroupStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          Route53ResolverFirewallRuleGroupObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Route53ResolverFirewallRuleGroup is the Schema for the Route53ResolverFirewallRuleGroups API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type Route53ResolverFirewallRuleGroup struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              Route53ResolverFirewallRuleGroupSpec   `json:"spec"`
	Status            Route53ResolverFirewallRuleGroupStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// Route53ResolverFirewallRuleGroupList contains a list of Route53ResolverFirewallRuleGroups
type Route53ResolverFirewallRuleGroupList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Route53ResolverFirewallRuleGroup `json:"items"`
}

// Repository type metadata.
var (
	Route53ResolverFirewallRuleGroupKind             = "Route53ResolverFirewallRuleGroup"
	Route53ResolverFirewallRuleGroupGroupKind        = schema.GroupKind{Group: v1alpha1.Group, Kind: Route53ResolverFirewallRuleGroupKind}.String()
	Route53ResolverFirewallRuleGroupKindAPIVersion   = Route53ResolverFirewallRuleGroupKind + "." + v1alpha1.GroupVersion.String()
	Route53ResolverFirewallRuleGroupGroupVersionKind = v1alpha1.GroupVersion.WithKind(Route53ResolverFirewallRuleGroupKind)
)

func init() {
	v1alpha1.SchemeBuilder.Register(&Route53ResolverFirewallRuleGroup{}, &Route53ResolverFirewallRuleGroupList{})
}
