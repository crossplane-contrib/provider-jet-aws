/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

// +kubebuilder:object:generate=true
// +groupName=route53.aws.tf.crossplane.io
// +versionName=v1alpha1

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1alpha1 "github.com/crossplane-contrib/provider-tf-aws/apis/route53/v1alpha1"
)

type AliasObservation struct {
}

type AliasParameters struct {
	EvaluateTargetHealth bool `json:"evaluateTargetHealth" tf:"evaluate_target_health"`

	Name string `json:"name" tf:"name"`

	ZoneId string `json:"zoneId" tf:"zone_id"`
}

type FailoverRoutingPolicyObservation struct {
}

type FailoverRoutingPolicyParameters struct {
	Type string `json:"type" tf:"type"`
}

type GeolocationRoutingPolicyObservation struct {
}

type GeolocationRoutingPolicyParameters struct {
	Continent *string `json:"continent,omitempty" tf:"continent"`

	Country *string `json:"country,omitempty" tf:"country"`

	Subdivision *string `json:"subdivision,omitempty" tf:"subdivision"`
}

type LatencyRoutingPolicyObservation struct {
}

type LatencyRoutingPolicyParameters struct {
	Region string `json:"region" tf:"region"`
}

type Route53RecordObservation struct {
	Fqdn string `json:"fqdn" tf:"fqdn"`
}

type Route53RecordParameters struct {
	Alias []AliasParameters `json:"alias,omitempty" tf:"alias"`

	AllowOverwrite *bool `json:"allowOverwrite,omitempty" tf:"allow_overwrite"`

	FailoverRoutingPolicy []FailoverRoutingPolicyParameters `json:"failoverRoutingPolicy,omitempty" tf:"failover_routing_policy"`

	GeolocationRoutingPolicy []GeolocationRoutingPolicyParameters `json:"geolocationRoutingPolicy,omitempty" tf:"geolocation_routing_policy"`

	HealthCheckId *string `json:"healthCheckId,omitempty" tf:"health_check_id"`

	LatencyRoutingPolicy []LatencyRoutingPolicyParameters `json:"latencyRoutingPolicy,omitempty" tf:"latency_routing_policy"`

	MultivalueAnswerRoutingPolicy *bool `json:"multivalueAnswerRoutingPolicy,omitempty" tf:"multivalue_answer_routing_policy"`

	Name string `json:"name" tf:"name"`

	Records []string `json:"records,omitempty" tf:"records"`

	SetIdentifier *string `json:"setIdentifier,omitempty" tf:"set_identifier"`

	Ttl *int64 `json:"ttl,omitempty" tf:"ttl"`

	Type string `json:"type" tf:"type"`

	WeightedRoutingPolicy []WeightedRoutingPolicyParameters `json:"weightedRoutingPolicy,omitempty" tf:"weighted_routing_policy"`

	ZoneId string `json:"zoneId" tf:"zone_id"`
}

type WeightedRoutingPolicyObservation struct {
}

type WeightedRoutingPolicyParameters struct {
	Weight int64 `json:"weight" tf:"weight"`
}

// Route53RecordSpec defines the desired state of Route53Record
type Route53RecordSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       Route53RecordParameters `json:"forProvider"`
}

// Route53RecordStatus defines the observed state of Route53Record.
type Route53RecordStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          Route53RecordObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Route53Record is the Schema for the Route53Records API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type Route53Record struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              Route53RecordSpec   `json:"spec"`
	Status            Route53RecordStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// Route53RecordList contains a list of Route53Records
type Route53RecordList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Route53Record `json:"items"`
}

// Repository type metadata.
var (
	Route53RecordKind             = "Route53Record"
	Route53RecordGroupKind        = schema.GroupKind{Group: v1alpha1.Group, Kind: Route53RecordKind}.String()
	Route53RecordKindAPIVersion   = Route53RecordKind + "." + v1alpha1.GroupVersion.String()
	Route53RecordGroupVersionKind = v1alpha1.GroupVersion.WithKind(Route53RecordKind)
)

func init() {
	v1alpha1.SchemeBuilder.Register(&Route53Record{}, &Route53RecordList{})
}
