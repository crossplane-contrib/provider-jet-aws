/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type Route53ResolverFirewallRuleObservation struct {
}

type Route53ResolverFirewallRuleParameters struct {
	Action string `json:"action" tf:"action"`

	BlockOverrideDNSType *string `json:"blockOverrideDNSType,omitempty" tf:"block_override_dns_type"`

	BlockOverrideDomain *string `json:"blockOverrideDomain,omitempty" tf:"block_override_domain"`

	BlockOverrideTTL *int64 `json:"blockOverrideTTL,omitempty" tf:"block_override_ttl"`

	BlockResponse *string `json:"blockResponse,omitempty" tf:"block_response"`

	FirewallDomainListID string `json:"firewallDomainListID" tf:"firewall_domain_list_id"`

	FirewallRuleGroupID string `json:"firewallRuleGroupID" tf:"firewall_rule_group_id"`

	Name string `json:"name" tf:"name"`

	Priority int64 `json:"priority" tf:"priority"`
}

// Route53ResolverFirewallRuleSpec defines the desired state of Route53ResolverFirewallRule
type Route53ResolverFirewallRuleSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       Route53ResolverFirewallRuleParameters `json:"forProvider"`
}

// Route53ResolverFirewallRuleStatus defines the observed state of Route53ResolverFirewallRule.
type Route53ResolverFirewallRuleStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          Route53ResolverFirewallRuleObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Route53ResolverFirewallRule is the Schema for the Route53ResolverFirewallRules API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tfaws}
type Route53ResolverFirewallRule struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              Route53ResolverFirewallRuleSpec   `json:"spec"`
	Status            Route53ResolverFirewallRuleStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// Route53ResolverFirewallRuleList contains a list of Route53ResolverFirewallRules
type Route53ResolverFirewallRuleList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Route53ResolverFirewallRule `json:"items"`
}

// Repository type metadata.
var (
	Route53ResolverFirewallRuleKind             = "Route53ResolverFirewallRule"
	Route53ResolverFirewallRuleGroupKind        = schema.GroupKind{Group: Group, Kind: Route53ResolverFirewallRuleKind}.String()
	Route53ResolverFirewallRuleKindAPIVersion   = Route53ResolverFirewallRuleKind + "." + GroupVersion.String()
	Route53ResolverFirewallRuleGroupVersionKind = GroupVersion.WithKind(Route53ResolverFirewallRuleKind)
)

func init() {
	SchemeBuilder.Register(&Route53ResolverFirewallRule{}, &Route53ResolverFirewallRuleList{})
}
