/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

// +kubebuilder:object:generate=true
// +groupName=route53.aws.tf.crossplane.io
// +versionName=v1alpha1

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1alpha1 "github.com/crossplane-contrib/provider-tf-aws/apis/route53/v1alpha1"
)

type Route53ResolverFirewallRuleGroupAssociationObservation struct {
	Arn string `json:"arn" tf:"arn"`
}

type Route53ResolverFirewallRuleGroupAssociationParameters struct {
	FirewallRuleGroupId string `json:"firewallRuleGroupId" tf:"firewall_rule_group_id"`

	MutationProtection *string `json:"mutationProtection,omitempty" tf:"mutation_protection"`

	Name string `json:"name" tf:"name"`

	Priority int64 `json:"priority" tf:"priority"`

	Tags map[string]string `json:"tags,omitempty" tf:"tags"`

	TagsAll map[string]string `json:"tagsAll,omitempty" tf:"tags_all"`

	VpcId string `json:"vpcId" tf:"vpc_id"`
}

// Route53ResolverFirewallRuleGroupAssociationSpec defines the desired state of Route53ResolverFirewallRuleGroupAssociation
type Route53ResolverFirewallRuleGroupAssociationSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       Route53ResolverFirewallRuleGroupAssociationParameters `json:"forProvider"`
}

// Route53ResolverFirewallRuleGroupAssociationStatus defines the observed state of Route53ResolverFirewallRuleGroupAssociation.
type Route53ResolverFirewallRuleGroupAssociationStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          Route53ResolverFirewallRuleGroupAssociationObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Route53ResolverFirewallRuleGroupAssociation is the Schema for the Route53ResolverFirewallRuleGroupAssociations API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type Route53ResolverFirewallRuleGroupAssociation struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              Route53ResolverFirewallRuleGroupAssociationSpec   `json:"spec"`
	Status            Route53ResolverFirewallRuleGroupAssociationStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// Route53ResolverFirewallRuleGroupAssociationList contains a list of Route53ResolverFirewallRuleGroupAssociations
type Route53ResolverFirewallRuleGroupAssociationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Route53ResolverFirewallRuleGroupAssociation `json:"items"`
}

// Repository type metadata.
var (
	Route53ResolverFirewallRuleGroupAssociationKind             = "Route53ResolverFirewallRuleGroupAssociation"
	Route53ResolverFirewallRuleGroupAssociationGroupKind        = schema.GroupKind{Group: v1alpha1.Group, Kind: Route53ResolverFirewallRuleGroupAssociationKind}.String()
	Route53ResolverFirewallRuleGroupAssociationKindAPIVersion   = Route53ResolverFirewallRuleGroupAssociationKind + "." + v1alpha1.GroupVersion.String()
	Route53ResolverFirewallRuleGroupAssociationGroupVersionKind = v1alpha1.GroupVersion.WithKind(Route53ResolverFirewallRuleGroupAssociationKind)
)

func init() {
	v1alpha1.SchemeBuilder.Register(&Route53ResolverFirewallRuleGroupAssociation{}, &Route53ResolverFirewallRuleGroupAssociationList{})
}
