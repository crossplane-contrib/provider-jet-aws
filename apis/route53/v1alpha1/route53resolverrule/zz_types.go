/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

// +kubebuilder:object:generate=true
// +groupName=route53.aws.tf.crossplane.io
// +versionName=v1alpha1

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1alpha1 "github.com/crossplane-contrib/provider-tf-aws/apis/route53/v1alpha1"
)

type Route53ResolverRuleObservation struct {
	Arn string `json:"arn" tf:"arn"`

	OwnerId string `json:"ownerId" tf:"owner_id"`

	ShareStatus string `json:"shareStatus" tf:"share_status"`
}

type Route53ResolverRuleParameters struct {
	DomainName string `json:"domainName" tf:"domain_name"`

	Name *string `json:"name,omitempty" tf:"name"`

	ResolverEndpointId *string `json:"resolverEndpointId,omitempty" tf:"resolver_endpoint_id"`

	RuleType string `json:"ruleType" tf:"rule_type"`

	Tags map[string]string `json:"tags,omitempty" tf:"tags"`

	TagsAll map[string]string `json:"tagsAll,omitempty" tf:"tags_all"`

	TargetIp []TargetIpParameters `json:"targetIp,omitempty" tf:"target_ip"`
}

type TargetIpObservation struct {
}

type TargetIpParameters struct {
	Ip string `json:"ip" tf:"ip"`

	Port *int64 `json:"port,omitempty" tf:"port"`
}

// Route53ResolverRuleSpec defines the desired state of Route53ResolverRule
type Route53ResolverRuleSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       Route53ResolverRuleParameters `json:"forProvider"`
}

// Route53ResolverRuleStatus defines the observed state of Route53ResolverRule.
type Route53ResolverRuleStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          Route53ResolverRuleObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Route53ResolverRule is the Schema for the Route53ResolverRules API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type Route53ResolverRule struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              Route53ResolverRuleSpec   `json:"spec"`
	Status            Route53ResolverRuleStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// Route53ResolverRuleList contains a list of Route53ResolverRules
type Route53ResolverRuleList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Route53ResolverRule `json:"items"`
}

// Repository type metadata.
var (
	Route53ResolverRuleKind             = "Route53ResolverRule"
	Route53ResolverRuleGroupKind        = schema.GroupKind{Group: v1alpha1.Group, Kind: Route53ResolverRuleKind}.String()
	Route53ResolverRuleKindAPIVersion   = Route53ResolverRuleKind + "." + v1alpha1.GroupVersion.String()
	Route53ResolverRuleGroupVersionKind = v1alpha1.GroupVersion.WithKind(Route53ResolverRuleKind)
)

func init() {
	v1alpha1.SchemeBuilder.Register(&Route53ResolverRule{}, &Route53ResolverRuleList{})
}
