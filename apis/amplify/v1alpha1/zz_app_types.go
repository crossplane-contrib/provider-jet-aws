/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AppObservation struct {
	Arn *string `json:"arn,omitempty" tf:"arn,omitempty"`

	DefaultDomain *string `json:"defaultDomain,omitempty" tf:"default_domain,omitempty"`

	ProductionBranch []ProductionBranchObservation `json:"productionBranch,omitempty" tf:"production_branch,omitempty"`

	TagsAll map[string]*string `json:"tagsAll,omitempty" tf:"tags_all,omitempty"`
}

type AppParameters struct {

	// +kubebuilder:validation:Optional
	AccessTokenSecretRef v1.SecretKeySelector `json:"accessTokenSecretRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	AutoBranchCreationConfig []AutoBranchCreationConfigParameters `json:"autoBranchCreationConfig,omitempty" tf:"auto_branch_creation_config,omitempty"`

	// +kubebuilder:validation:Optional
	AutoBranchCreationPatterns []*string `json:"autoBranchCreationPatterns,omitempty" tf:"auto_branch_creation_patterns,omitempty"`

	// +kubebuilder:validation:Optional
	BasicAuthCredentialsSecretRef v1.SecretKeySelector `json:"basicAuthCredentialsSecretRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	BuildSpec *string `json:"buildSpec,omitempty" tf:"build_spec,omitempty"`

	// +kubebuilder:validation:Optional
	CustomRule []CustomRuleParameters `json:"customRule,omitempty" tf:"custom_rule,omitempty"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Optional
	EnableAutoBranchCreation *bool `json:"enableAutoBranchCreation,omitempty" tf:"enable_auto_branch_creation,omitempty"`

	// +kubebuilder:validation:Optional
	EnableBasicAuth *bool `json:"enableBasicAuth,omitempty" tf:"enable_basic_auth,omitempty"`

	// +kubebuilder:validation:Optional
	EnableBranchAutoBuild *bool `json:"enableBranchAutoBuild,omitempty" tf:"enable_branch_auto_build,omitempty"`

	// +kubebuilder:validation:Optional
	EnableBranchAutoDeletion *bool `json:"enableBranchAutoDeletion,omitempty" tf:"enable_branch_auto_deletion,omitempty"`

	// +kubebuilder:validation:Optional
	EnvironmentVariables map[string]*string `json:"environmentVariables,omitempty" tf:"environment_variables,omitempty"`

	// +kubebuilder:validation:Optional
	IamServiceRoleArn *string `json:"iamServiceRoleArn,omitempty" tf:"iam_service_role_arn,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	OauthTokenSecretRef v1.SecretKeySelector `json:"oauthTokenSecretRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	Platform *string `json:"platform,omitempty" tf:"platform,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +terrajet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`

	// +kubebuilder:validation:Optional
	Repository *string `json:"repository,omitempty" tf:"repository,omitempty"`

	// +kubebuilder:validation:Optional
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

type AutoBranchCreationConfigObservation struct {
}

type AutoBranchCreationConfigParameters struct {

	// +kubebuilder:validation:Optional
	BasicAuthCredentialsSecretRef v1.SecretKeySelector `json:"basicAuthCredentialsSecretRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	BuildSpec *string `json:"buildSpec,omitempty" tf:"build_spec,omitempty"`

	// +kubebuilder:validation:Optional
	EnableAutoBuild *bool `json:"enableAutoBuild,omitempty" tf:"enable_auto_build,omitempty"`

	// +kubebuilder:validation:Optional
	EnableBasicAuth *bool `json:"enableBasicAuth,omitempty" tf:"enable_basic_auth,omitempty"`

	// +kubebuilder:validation:Optional
	EnablePerformanceMode *bool `json:"enablePerformanceMode,omitempty" tf:"enable_performance_mode,omitempty"`

	// +kubebuilder:validation:Optional
	EnablePullRequestPreview *bool `json:"enablePullRequestPreview,omitempty" tf:"enable_pull_request_preview,omitempty"`

	// +kubebuilder:validation:Optional
	EnvironmentVariables map[string]*string `json:"environmentVariables,omitempty" tf:"environment_variables,omitempty"`

	// +kubebuilder:validation:Optional
	Framework *string `json:"framework,omitempty" tf:"framework,omitempty"`

	// +kubebuilder:validation:Optional
	PullRequestEnvironmentName *string `json:"pullRequestEnvironmentName,omitempty" tf:"pull_request_environment_name,omitempty"`

	// +kubebuilder:validation:Optional
	Stage *string `json:"stage,omitempty" tf:"stage,omitempty"`
}

type CustomRuleObservation struct {
}

type CustomRuleParameters struct {

	// +kubebuilder:validation:Optional
	Condition *string `json:"condition,omitempty" tf:"condition,omitempty"`

	// +kubebuilder:validation:Required
	Source *string `json:"source" tf:"source,omitempty"`

	// +kubebuilder:validation:Optional
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// +kubebuilder:validation:Required
	Target *string `json:"target" tf:"target,omitempty"`
}

type ProductionBranchObservation struct {
	BranchName *string `json:"branchName,omitempty" tf:"branch_name,omitempty"`

	LastDeployTime *string `json:"lastDeployTime,omitempty" tf:"last_deploy_time,omitempty"`

	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	ThumbnailURL *string `json:"thumbnailUrl,omitempty" tf:"thumbnail_url,omitempty"`
}

type ProductionBranchParameters struct {
}

// AppSpec defines the desired state of App
type AppSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     AppParameters `json:"forProvider"`
}

// AppStatus defines the observed state of App.
type AppStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        AppObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// App is the Schema for the Apps API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tfaws}
type App struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              AppSpec   `json:"spec"`
	Status            AppStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// AppList contains a list of Apps
type AppList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []App `json:"items"`
}

// Repository type metadata.
var (
	AppKind             = "App"
	AppGroupKind        = schema.GroupKind{Group: Group, Kind: AppKind}.String()
	AppKindAPIVersion   = AppKind + "." + GroupVersion.String()
	AppGroupVersionKind = GroupVersion.WithKind(AppKind)
)

func init() {
	SchemeBuilder.Register(&App{}, &AppList{})
}
