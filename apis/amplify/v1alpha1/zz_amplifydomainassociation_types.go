/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type AmplifyDomainAssociationObservation struct {
	ARN string `json:"arn" tf:"arn"`

	CertificateVerificationDNSRecord string `json:"certificateVerificationDNSRecord" tf:"certificate_verification_dns_record"`
}

type AmplifyDomainAssociationParameters struct {
	AppID string `json:"appID" tf:"app_id"`

	DomainName string `json:"domainName" tf:"domain_name"`

	SubDomain []SubDomainParameters `json:"subDomain" tf:"sub_domain"`

	WaitForVerification *bool `json:"waitForVerification,omitempty" tf:"wait_for_verification"`
}

type SubDomainObservation struct {
	DNSRecord string `json:"dnsRecord" tf:"dns_record"`

	Verified bool `json:"verified" tf:"verified"`
}

type SubDomainParameters struct {
	BranchName string `json:"branchName" tf:"branch_name"`

	Prefix string `json:"prefix" tf:"prefix"`
}

// AmplifyDomainAssociationSpec defines the desired state of AmplifyDomainAssociation
type AmplifyDomainAssociationSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       AmplifyDomainAssociationParameters `json:"forProvider"`
}

// AmplifyDomainAssociationStatus defines the observed state of AmplifyDomainAssociation.
type AmplifyDomainAssociationStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          AmplifyDomainAssociationObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// AmplifyDomainAssociation is the Schema for the AmplifyDomainAssociations API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tfaws}
type AmplifyDomainAssociation struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              AmplifyDomainAssociationSpec   `json:"spec"`
	Status            AmplifyDomainAssociationStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// AmplifyDomainAssociationList contains a list of AmplifyDomainAssociations
type AmplifyDomainAssociationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []AmplifyDomainAssociation `json:"items"`
}

// Repository type metadata.
var (
	AmplifyDomainAssociationKind             = "AmplifyDomainAssociation"
	AmplifyDomainAssociationGroupKind        = schema.GroupKind{Group: Group, Kind: AmplifyDomainAssociationKind}.String()
	AmplifyDomainAssociationKindAPIVersion   = AmplifyDomainAssociationKind + "." + GroupVersion.String()
	AmplifyDomainAssociationGroupVersionKind = GroupVersion.WithKind(AmplifyDomainAssociationKind)
)

func init() {
	SchemeBuilder.Register(&AmplifyDomainAssociation{}, &AmplifyDomainAssociationList{})
}
