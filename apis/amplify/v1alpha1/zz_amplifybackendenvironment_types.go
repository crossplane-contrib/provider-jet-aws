/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type AmplifyBackendEnvironmentObservation struct {
	ARN string `json:"arn" tf:"arn"`
}

type AmplifyBackendEnvironmentParameters struct {
	AppID string `json:"appID" tf:"app_id"`

	DeploymentArtifacts *string `json:"deploymentArtifacts,omitempty" tf:"deployment_artifacts"`

	EnvironmentName string `json:"environmentName" tf:"environment_name"`

	StackName *string `json:"stackName,omitempty" tf:"stack_name"`
}

// AmplifyBackendEnvironmentSpec defines the desired state of AmplifyBackendEnvironment
type AmplifyBackendEnvironmentSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       AmplifyBackendEnvironmentParameters `json:"forProvider"`
}

// AmplifyBackendEnvironmentStatus defines the observed state of AmplifyBackendEnvironment.
type AmplifyBackendEnvironmentStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          AmplifyBackendEnvironmentObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// AmplifyBackendEnvironment is the Schema for the AmplifyBackendEnvironments API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tfaws}
type AmplifyBackendEnvironment struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              AmplifyBackendEnvironmentSpec   `json:"spec"`
	Status            AmplifyBackendEnvironmentStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// AmplifyBackendEnvironmentList contains a list of AmplifyBackendEnvironments
type AmplifyBackendEnvironmentList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []AmplifyBackendEnvironment `json:"items"`
}

// Repository type metadata.
var (
	AmplifyBackendEnvironmentKind             = "AmplifyBackendEnvironment"
	AmplifyBackendEnvironmentGroupKind        = schema.GroupKind{Group: Group, Kind: AmplifyBackendEnvironmentKind}.String()
	AmplifyBackendEnvironmentKindAPIVersion   = AmplifyBackendEnvironmentKind + "." + GroupVersion.String()
	AmplifyBackendEnvironmentGroupVersionKind = GroupVersion.WithKind(AmplifyBackendEnvironmentKind)
)

func init() {
	SchemeBuilder.Register(&AmplifyBackendEnvironment{}, &AmplifyBackendEnvironmentList{})
}
