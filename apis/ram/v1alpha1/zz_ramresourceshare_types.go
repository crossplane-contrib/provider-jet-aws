/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type RamResourceShareObservation struct {
	ARN string `json:"arn" tf:"arn"`
}

type RamResourceShareParameters struct {
	AllowExternalPrincipals *bool `json:"allowExternalPrincipals,omitempty" tf:"allow_external_principals"`

	Name string `json:"name" tf:"name"`

	Tags map[string]string `json:"tags,omitempty" tf:"tags"`

	TagsAll map[string]string `json:"tagsAll,omitempty" tf:"tags_all"`
}

// RamResourceShareSpec defines the desired state of RamResourceShare
type RamResourceShareSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       RamResourceShareParameters `json:"forProvider"`
}

// RamResourceShareStatus defines the observed state of RamResourceShare.
type RamResourceShareStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          RamResourceShareObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// RamResourceShare is the Schema for the RamResourceShares API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tfaws}
type RamResourceShare struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              RamResourceShareSpec   `json:"spec"`
	Status            RamResourceShareStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// RamResourceShareList contains a list of RamResourceShares
type RamResourceShareList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []RamResourceShare `json:"items"`
}

// Repository type metadata.
var (
	RamResourceShareKind             = "RamResourceShare"
	RamResourceShareGroupKind        = schema.GroupKind{Group: Group, Kind: RamResourceShareKind}.String()
	RamResourceShareKindAPIVersion   = RamResourceShareKind + "." + GroupVersion.String()
	RamResourceShareGroupVersionKind = GroupVersion.WithKind(RamResourceShareKind)
)

func init() {
	SchemeBuilder.Register(&RamResourceShare{}, &RamResourceShareList{})
}
