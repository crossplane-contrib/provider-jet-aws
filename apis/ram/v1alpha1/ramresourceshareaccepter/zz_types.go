/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

// +kubebuilder:object:generate=true
// +groupName=ram.aws.tf.crossplane.io
// +versionName=v1alpha1

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1alpha1 "github.com/crossplane-contrib/provider-tf-aws/apis/ram/v1alpha1"
)

type RamResourceShareAccepterObservation struct {
	InvitationArn string `json:"invitationArn" tf:"invitation_arn"`

	ReceiverAccountId string `json:"receiverAccountId" tf:"receiver_account_id"`

	Resources []string `json:"resources" tf:"resources"`

	SenderAccountId string `json:"senderAccountId" tf:"sender_account_id"`

	ShareId string `json:"shareId" tf:"share_id"`

	ShareName string `json:"shareName" tf:"share_name"`

	Status string `json:"status" tf:"status"`
}

type RamResourceShareAccepterParameters struct {
	ShareArn string `json:"shareArn" tf:"share_arn"`
}

// RamResourceShareAccepterSpec defines the desired state of RamResourceShareAccepter
type RamResourceShareAccepterSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       RamResourceShareAccepterParameters `json:"forProvider"`
}

// RamResourceShareAccepterStatus defines the observed state of RamResourceShareAccepter.
type RamResourceShareAccepterStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          RamResourceShareAccepterObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// RamResourceShareAccepter is the Schema for the RamResourceShareAccepters API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type RamResourceShareAccepter struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              RamResourceShareAccepterSpec   `json:"spec"`
	Status            RamResourceShareAccepterStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// RamResourceShareAccepterList contains a list of RamResourceShareAccepters
type RamResourceShareAccepterList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []RamResourceShareAccepter `json:"items"`
}

// Repository type metadata.
var (
	RamResourceShareAccepterKind             = "RamResourceShareAccepter"
	RamResourceShareAccepterGroupKind        = schema.GroupKind{Group: v1alpha1.Group, Kind: RamResourceShareAccepterKind}.String()
	RamResourceShareAccepterKindAPIVersion   = RamResourceShareAccepterKind + "." + v1alpha1.GroupVersion.String()
	RamResourceShareAccepterGroupVersionKind = v1alpha1.GroupVersion.WithKind(RamResourceShareAccepterKind)
)

func init() {
	v1alpha1.SchemeBuilder.Register(&RamResourceShareAccepter{}, &RamResourceShareAccepterList{})
}
