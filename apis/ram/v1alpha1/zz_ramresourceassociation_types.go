/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type RamResourceAssociationObservation struct {
}

type RamResourceAssociationParameters struct {
	ResourceARN string `json:"resourceARN" tf:"resource_arn"`

	ResourceShareARN string `json:"resourceShareARN" tf:"resource_share_arn"`
}

// RamResourceAssociationSpec defines the desired state of RamResourceAssociation
type RamResourceAssociationSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       RamResourceAssociationParameters `json:"forProvider"`
}

// RamResourceAssociationStatus defines the observed state of RamResourceAssociation.
type RamResourceAssociationStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          RamResourceAssociationObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// RamResourceAssociation is the Schema for the RamResourceAssociations API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tfaws}
type RamResourceAssociation struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              RamResourceAssociationSpec   `json:"spec"`
	Status            RamResourceAssociationStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// RamResourceAssociationList contains a list of RamResourceAssociations
type RamResourceAssociationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []RamResourceAssociation `json:"items"`
}

// Repository type metadata.
var (
	RamResourceAssociationKind             = "RamResourceAssociation"
	RamResourceAssociationGroupKind        = schema.GroupKind{Group: Group, Kind: RamResourceAssociationKind}.String()
	RamResourceAssociationKindAPIVersion   = RamResourceAssociationKind + "." + GroupVersion.String()
	RamResourceAssociationGroupVersionKind = GroupVersion.WithKind(RamResourceAssociationKind)
)

func init() {
	SchemeBuilder.Register(&RamResourceAssociation{}, &RamResourceAssociationList{})
}
