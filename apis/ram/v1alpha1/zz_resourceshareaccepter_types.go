/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ResourceShareAccepterObservation struct {
	InvitationArn *string `json:"invitationArn,omitempty" tf:"invitation_arn,omitempty"`

	ReceiverAccountID *string `json:"receiverAccountId,omitempty" tf:"receiver_account_id,omitempty"`

	Resources []*string `json:"resources,omitempty" tf:"resources,omitempty"`

	SenderAccountID *string `json:"senderAccountId,omitempty" tf:"sender_account_id,omitempty"`

	ShareID *string `json:"shareId,omitempty" tf:"share_id,omitempty"`

	ShareName *string `json:"shareName,omitempty" tf:"share_name,omitempty"`

	Status *string `json:"status,omitempty" tf:"status,omitempty"`
}

type ResourceShareAccepterParameters struct {

	// Region is the region you'd like your resource to be created in.
	// +terrajet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`

	// +kubebuilder:validation:Required
	ShareArn *string `json:"shareArn" tf:"share_arn,omitempty"`
}

// ResourceShareAccepterSpec defines the desired state of ResourceShareAccepter
type ResourceShareAccepterSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ResourceShareAccepterParameters `json:"forProvider"`
}

// ResourceShareAccepterStatus defines the observed state of ResourceShareAccepter.
type ResourceShareAccepterStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ResourceShareAccepterObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ResourceShareAccepter is the Schema for the ResourceShareAccepters API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tfaws}
type ResourceShareAccepter struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ResourceShareAccepterSpec   `json:"spec"`
	Status            ResourceShareAccepterStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ResourceShareAccepterList contains a list of ResourceShareAccepters
type ResourceShareAccepterList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ResourceShareAccepter `json:"items"`
}

// Repository type metadata.
var (
	ResourceShareAccepterKind             = "ResourceShareAccepter"
	ResourceShareAccepterGroupKind        = schema.GroupKind{Group: Group, Kind: ResourceShareAccepterKind}.String()
	ResourceShareAccepterKindAPIVersion   = ResourceShareAccepterKind + "." + GroupVersion.String()
	ResourceShareAccepterGroupVersionKind = GroupVersion.WithKind(ResourceShareAccepterKind)
)

func init() {
	SchemeBuilder.Register(&ResourceShareAccepter{}, &ResourceShareAccepterList{})
}
