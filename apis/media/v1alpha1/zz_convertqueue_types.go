/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ConvertQueueObservation struct {
	Arn *string `json:"arn,omitempty" tf:"arn,omitempty"`

	TagsAll map[string]*string `json:"tagsAll,omitempty" tf:"tags_all,omitempty"`
}

type ConvertQueueParameters struct {

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	PricingPlan *string `json:"pricingPlan,omitempty" tf:"pricing_plan,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +terrajet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`

	// +kubebuilder:validation:Optional
	ReservationPlanSettings []ReservationPlanSettingsParameters `json:"reservationPlanSettings,omitempty" tf:"reservation_plan_settings,omitempty"`

	// +kubebuilder:validation:Optional
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// +kubebuilder:validation:Optional
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

type ReservationPlanSettingsObservation struct {
}

type ReservationPlanSettingsParameters struct {

	// +kubebuilder:validation:Required
	Commitment *string `json:"commitment" tf:"commitment,omitempty"`

	// +kubebuilder:validation:Required
	RenewalType *string `json:"renewalType" tf:"renewal_type,omitempty"`

	// +kubebuilder:validation:Required
	ReservedSlots *int64 `json:"reservedSlots" tf:"reserved_slots,omitempty"`
}

// ConvertQueueSpec defines the desired state of ConvertQueue
type ConvertQueueSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ConvertQueueParameters `json:"forProvider"`
}

// ConvertQueueStatus defines the observed state of ConvertQueue.
type ConvertQueueStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ConvertQueueObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ConvertQueue is the Schema for the ConvertQueues API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tfaws}
type ConvertQueue struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ConvertQueueSpec   `json:"spec"`
	Status            ConvertQueueStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ConvertQueueList contains a list of ConvertQueues
type ConvertQueueList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ConvertQueue `json:"items"`
}

// Repository type metadata.
var (
	ConvertQueueKind             = "ConvertQueue"
	ConvertQueueGroupKind        = schema.GroupKind{Group: Group, Kind: ConvertQueueKind}.String()
	ConvertQueueKindAPIVersion   = ConvertQueueKind + "." + GroupVersion.String()
	ConvertQueueGroupVersionKind = GroupVersion.WithKind(ConvertQueueKind)
)

func init() {
	SchemeBuilder.Register(&ConvertQueue{}, &ConvertQueueList{})
}
