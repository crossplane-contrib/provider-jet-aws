/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type StoreContainerPolicyObservation struct {
}

type StoreContainerPolicyParameters struct {

	// +kubebuilder:validation:Required
	ContainerName *string `json:"containerName" tf:"container_name,omitempty"`

	// +kubebuilder:validation:Required
	Policy *string `json:"policy" tf:"policy,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +terrajet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`
}

// StoreContainerPolicySpec defines the desired state of StoreContainerPolicy
type StoreContainerPolicySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     StoreContainerPolicyParameters `json:"forProvider"`
}

// StoreContainerPolicyStatus defines the observed state of StoreContainerPolicy.
type StoreContainerPolicyStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        StoreContainerPolicyObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// StoreContainerPolicy is the Schema for the StoreContainerPolicys API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tfaws}
type StoreContainerPolicy struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              StoreContainerPolicySpec   `json:"spec"`
	Status            StoreContainerPolicyStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// StoreContainerPolicyList contains a list of StoreContainerPolicys
type StoreContainerPolicyList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []StoreContainerPolicy `json:"items"`
}

// Repository type metadata.
var (
	StoreContainerPolicyKind             = "StoreContainerPolicy"
	StoreContainerPolicyGroupKind        = schema.GroupKind{Group: Group, Kind: StoreContainerPolicyKind}.String()
	StoreContainerPolicyKindAPIVersion   = StoreContainerPolicyKind + "." + GroupVersion.String()
	StoreContainerPolicyGroupVersionKind = GroupVersion.WithKind(StoreContainerPolicyKind)
)

func init() {
	SchemeBuilder.Register(&StoreContainerPolicy{}, &StoreContainerPolicyList{})
}
