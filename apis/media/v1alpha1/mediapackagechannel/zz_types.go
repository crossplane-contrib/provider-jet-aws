/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

// +kubebuilder:object:generate=true
// +groupName=media.aws.tf.crossplane.io
// +versionName=v1alpha1

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1alpha1 "github.com/crossplane-contrib/provider-tf-aws/apis/media/v1alpha1"
)

type HlsIngestObservation struct {
	IngestEndpoints []IngestEndpointsObservation `json:"ingestEndpoints" tf:"ingest_endpoints"`
}

type HlsIngestParameters struct {
}

type IngestEndpointsObservation struct {
	Password string `json:"password" tf:"password"`

	Url string `json:"url" tf:"url"`

	Username string `json:"username" tf:"username"`
}

type IngestEndpointsParameters struct {
}

type MediaPackageChannelObservation struct {
	Arn string `json:"arn" tf:"arn"`

	HlsIngest []HlsIngestObservation `json:"hlsIngest" tf:"hls_ingest"`
}

type MediaPackageChannelParameters struct {
	ChannelId string `json:"channelId" tf:"channel_id"`

	Description *string `json:"description,omitempty" tf:"description"`

	Tags map[string]string `json:"tags,omitempty" tf:"tags"`

	TagsAll map[string]string `json:"tagsAll,omitempty" tf:"tags_all"`
}

// MediaPackageChannelSpec defines the desired state of MediaPackageChannel
type MediaPackageChannelSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       MediaPackageChannelParameters `json:"forProvider"`
}

// MediaPackageChannelStatus defines the observed state of MediaPackageChannel.
type MediaPackageChannelStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          MediaPackageChannelObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// MediaPackageChannel is the Schema for the MediaPackageChannels API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type MediaPackageChannel struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              MediaPackageChannelSpec   `json:"spec"`
	Status            MediaPackageChannelStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// MediaPackageChannelList contains a list of MediaPackageChannels
type MediaPackageChannelList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []MediaPackageChannel `json:"items"`
}

// Repository type metadata.
var (
	MediaPackageChannelKind             = "MediaPackageChannel"
	MediaPackageChannelGroupKind        = schema.GroupKind{Group: v1alpha1.Group, Kind: MediaPackageChannelKind}.String()
	MediaPackageChannelKindAPIVersion   = MediaPackageChannelKind + "." + v1alpha1.GroupVersion.String()
	MediaPackageChannelGroupVersionKind = v1alpha1.GroupVersion.WithKind(MediaPackageChannelKind)
)

func init() {
	v1alpha1.SchemeBuilder.Register(&MediaPackageChannel{}, &MediaPackageChannelList{})
}
