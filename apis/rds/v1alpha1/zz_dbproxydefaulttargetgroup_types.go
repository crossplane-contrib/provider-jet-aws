/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ConnectionPoolConfigObservation struct {
}

type ConnectionPoolConfigParameters struct {

	// +kubebuilder:validation:Optional
	ConnectionBorrowTimeout *int64 `json:"connectionBorrowTimeout,omitempty" tf:"connection_borrow_timeout,omitempty"`

	// +kubebuilder:validation:Optional
	InitQuery *string `json:"initQuery,omitempty" tf:"init_query,omitempty"`

	// +kubebuilder:validation:Optional
	MaxConnectionsPercent *int64 `json:"maxConnectionsPercent,omitempty" tf:"max_connections_percent,omitempty"`

	// +kubebuilder:validation:Optional
	MaxIdleConnectionsPercent *int64 `json:"maxIdleConnectionsPercent,omitempty" tf:"max_idle_connections_percent,omitempty"`

	// +kubebuilder:validation:Optional
	SessionPinningFilters []*string `json:"sessionPinningFilters,omitempty" tf:"session_pinning_filters,omitempty"`
}

type DbProxyDefaultTargetGroupObservation struct {
	Arn *string `json:"arn,omitempty" tf:"arn,omitempty"`

	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type DbProxyDefaultTargetGroupParameters struct {

	// +kubebuilder:validation:Optional
	ConnectionPoolConfig []ConnectionPoolConfigParameters `json:"connectionPoolConfig,omitempty" tf:"connection_pool_config,omitempty"`

	// +kubebuilder:validation:Required
	DBProxyName *string `json:"dbProxyName" tf:"db_proxy_name,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +terrajet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`
}

// DbProxyDefaultTargetGroupSpec defines the desired state of DbProxyDefaultTargetGroup
type DbProxyDefaultTargetGroupSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     DbProxyDefaultTargetGroupParameters `json:"forProvider"`
}

// DbProxyDefaultTargetGroupStatus defines the observed state of DbProxyDefaultTargetGroup.
type DbProxyDefaultTargetGroupStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        DbProxyDefaultTargetGroupObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// DbProxyDefaultTargetGroup is the Schema for the DbProxyDefaultTargetGroups API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tfaws}
type DbProxyDefaultTargetGroup struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DbProxyDefaultTargetGroupSpec   `json:"spec"`
	Status            DbProxyDefaultTargetGroupStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DbProxyDefaultTargetGroupList contains a list of DbProxyDefaultTargetGroups
type DbProxyDefaultTargetGroupList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DbProxyDefaultTargetGroup `json:"items"`
}

// Repository type metadata.
var (
	DbProxyDefaultTargetGroupKind             = "DbProxyDefaultTargetGroup"
	DbProxyDefaultTargetGroupGroupKind        = schema.GroupKind{Group: Group, Kind: DbProxyDefaultTargetGroupKind}.String()
	DbProxyDefaultTargetGroupKindAPIVersion   = DbProxyDefaultTargetGroupKind + "." + GroupVersion.String()
	DbProxyDefaultTargetGroupGroupVersionKind = GroupVersion.WithKind(DbProxyDefaultTargetGroupKind)
)

func init() {
	SchemeBuilder.Register(&DbProxyDefaultTargetGroup{}, &DbProxyDefaultTargetGroupList{})
}
