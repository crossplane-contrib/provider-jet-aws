/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type DbSnapshotObservation struct {
	AllocatedStorage *int64 `json:"allocatedStorage,omitempty" tf:"allocated_storage,omitempty"`

	AvailabilityZone *string `json:"availabilityZone,omitempty" tf:"availability_zone,omitempty"`

	DBSnapshotArn *string `json:"dbSnapshotArn,omitempty" tf:"db_snapshot_arn,omitempty"`

	Encrypted *bool `json:"encrypted,omitempty" tf:"encrypted,omitempty"`

	Engine *string `json:"engine,omitempty" tf:"engine,omitempty"`

	EngineVersion *string `json:"engineVersion,omitempty" tf:"engine_version,omitempty"`

	Iops *int64 `json:"iops,omitempty" tf:"iops,omitempty"`

	KmsKeyID *string `json:"kmsKeyId,omitempty" tf:"kms_key_id,omitempty"`

	LicenseModel *string `json:"licenseModel,omitempty" tf:"license_model,omitempty"`

	OptionGroupName *string `json:"optionGroupName,omitempty" tf:"option_group_name,omitempty"`

	Port *int64 `json:"port,omitempty" tf:"port,omitempty"`

	SnapshotType *string `json:"snapshotType,omitempty" tf:"snapshot_type,omitempty"`

	SourceDBSnapshotIdentifier *string `json:"sourceDbSnapshotIdentifier,omitempty" tf:"source_db_snapshot_identifier,omitempty"`

	SourceRegion *string `json:"sourceRegion,omitempty" tf:"source_region,omitempty"`

	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	StorageType *string `json:"storageType,omitempty" tf:"storage_type,omitempty"`

	TagsAll map[string]*string `json:"tagsAll,omitempty" tf:"tags_all,omitempty"`

	VpcID *string `json:"vpcId,omitempty" tf:"vpc_id,omitempty"`
}

type DbSnapshotParameters struct {

	// +kubebuilder:validation:Required
	DBInstanceIdentifier *string `json:"dbInstanceIdentifier" tf:"db_instance_identifier,omitempty"`

	// +kubebuilder:validation:Required
	DBSnapshotIdentifier *string `json:"dbSnapshotIdentifier" tf:"db_snapshot_identifier,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +terrajet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`

	// +kubebuilder:validation:Optional
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

// DbSnapshotSpec defines the desired state of DbSnapshot
type DbSnapshotSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     DbSnapshotParameters `json:"forProvider"`
}

// DbSnapshotStatus defines the observed state of DbSnapshot.
type DbSnapshotStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        DbSnapshotObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// DbSnapshot is the Schema for the DbSnapshots API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tfaws}
type DbSnapshot struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DbSnapshotSpec   `json:"spec"`
	Status            DbSnapshotStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DbSnapshotList contains a list of DbSnapshots
type DbSnapshotList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DbSnapshot `json:"items"`
}

// Repository type metadata.
var (
	DbSnapshotKind             = "DbSnapshot"
	DbSnapshotGroupKind        = schema.GroupKind{Group: Group, Kind: DbSnapshotKind}.String()
	DbSnapshotKindAPIVersion   = DbSnapshotKind + "." + GroupVersion.String()
	DbSnapshotGroupVersionKind = GroupVersion.WithKind(DbSnapshotKind)
)

func init() {
	SchemeBuilder.Register(&DbSnapshot{}, &DbSnapshotList{})
}
