/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type DbClusterSnapshotObservation struct {
	AllocatedStorage *int64 `json:"allocatedStorage,omitempty" tf:"allocated_storage,omitempty"`

	AvailabilityZones []*string `json:"availabilityZones,omitempty" tf:"availability_zones,omitempty"`

	DBClusterSnapshotArn *string `json:"dbClusterSnapshotArn,omitempty" tf:"db_cluster_snapshot_arn,omitempty"`

	Engine *string `json:"engine,omitempty" tf:"engine,omitempty"`

	EngineVersion *string `json:"engineVersion,omitempty" tf:"engine_version,omitempty"`

	KmsKeyID *string `json:"kmsKeyId,omitempty" tf:"kms_key_id,omitempty"`

	LicenseModel *string `json:"licenseModel,omitempty" tf:"license_model,omitempty"`

	Port *int64 `json:"port,omitempty" tf:"port,omitempty"`

	SnapshotType *string `json:"snapshotType,omitempty" tf:"snapshot_type,omitempty"`

	SourceDBClusterSnapshotArn *string `json:"sourceDbClusterSnapshotArn,omitempty" tf:"source_db_cluster_snapshot_arn,omitempty"`

	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	StorageEncrypted *bool `json:"storageEncrypted,omitempty" tf:"storage_encrypted,omitempty"`

	TagsAll map[string]*string `json:"tagsAll,omitempty" tf:"tags_all,omitempty"`

	VpcID *string `json:"vpcId,omitempty" tf:"vpc_id,omitempty"`
}

type DbClusterSnapshotParameters struct {

	// +kubebuilder:validation:Required
	DBClusterIdentifier *string `json:"dbClusterIdentifier" tf:"db_cluster_identifier,omitempty"`

	// +kubebuilder:validation:Required
	DBClusterSnapshotIdentifier *string `json:"dbClusterSnapshotIdentifier" tf:"db_cluster_snapshot_identifier,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +terrajet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`

	// +kubebuilder:validation:Optional
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

// DbClusterSnapshotSpec defines the desired state of DbClusterSnapshot
type DbClusterSnapshotSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     DbClusterSnapshotParameters `json:"forProvider"`
}

// DbClusterSnapshotStatus defines the observed state of DbClusterSnapshot.
type DbClusterSnapshotStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        DbClusterSnapshotObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// DbClusterSnapshot is the Schema for the DbClusterSnapshots API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tfaws}
type DbClusterSnapshot struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DbClusterSnapshotSpec   `json:"spec"`
	Status            DbClusterSnapshotStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DbClusterSnapshotList contains a list of DbClusterSnapshots
type DbClusterSnapshotList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DbClusterSnapshot `json:"items"`
}

// Repository type metadata.
var (
	DbClusterSnapshotKind             = "DbClusterSnapshot"
	DbClusterSnapshotGroupKind        = schema.GroupKind{Group: Group, Kind: DbClusterSnapshotKind}.String()
	DbClusterSnapshotKindAPIVersion   = DbClusterSnapshotKind + "." + GroupVersion.String()
	DbClusterSnapshotGroupVersionKind = GroupVersion.WithKind(DbClusterSnapshotKind)
)

func init() {
	SchemeBuilder.Register(&DbClusterSnapshot{}, &DbClusterSnapshotList{})
}
