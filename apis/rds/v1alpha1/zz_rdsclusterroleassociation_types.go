/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type RdsClusterRoleAssociationObservation struct {
}

type RdsClusterRoleAssociationParameters struct {
	DBClusterIdentifier string `json:"dbClusterIdentifier" tf:"db_cluster_identifier"`

	FeatureName string `json:"featureName" tf:"feature_name"`

	RoleARN string `json:"roleARN" tf:"role_arn"`
}

// RdsClusterRoleAssociationSpec defines the desired state of RdsClusterRoleAssociation
type RdsClusterRoleAssociationSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       RdsClusterRoleAssociationParameters `json:"forProvider"`
}

// RdsClusterRoleAssociationStatus defines the observed state of RdsClusterRoleAssociation.
type RdsClusterRoleAssociationStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          RdsClusterRoleAssociationObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// RdsClusterRoleAssociation is the Schema for the RdsClusterRoleAssociations API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tfaws}
type RdsClusterRoleAssociation struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              RdsClusterRoleAssociationSpec   `json:"spec"`
	Status            RdsClusterRoleAssociationStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// RdsClusterRoleAssociationList contains a list of RdsClusterRoleAssociations
type RdsClusterRoleAssociationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []RdsClusterRoleAssociation `json:"items"`
}

// Repository type metadata.
var (
	RdsClusterRoleAssociationKind             = "RdsClusterRoleAssociation"
	RdsClusterRoleAssociationGroupKind        = schema.GroupKind{Group: Group, Kind: RdsClusterRoleAssociationKind}.String()
	RdsClusterRoleAssociationKindAPIVersion   = RdsClusterRoleAssociationKind + "." + GroupVersion.String()
	RdsClusterRoleAssociationGroupVersionKind = GroupVersion.WithKind(RdsClusterRoleAssociationKind)
)

func init() {
	SchemeBuilder.Register(&RdsClusterRoleAssociation{}, &RdsClusterRoleAssociationList{})
}
