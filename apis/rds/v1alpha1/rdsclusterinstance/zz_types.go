/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

// +kubebuilder:object:generate=true
// +groupName=rds.aws.tf.crossplane.io
// +versionName=v1alpha1

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1alpha1 "github.com/crossplane-contrib/provider-tf-aws/apis/rds/v1alpha1"
)

type RdsClusterInstanceObservation struct {
	Arn string `json:"arn" tf:"arn"`

	DbiResourceId string `json:"dbiResourceId" tf:"dbi_resource_id"`

	Endpoint string `json:"endpoint" tf:"endpoint"`

	EngineVersionActual string `json:"engineVersionActual" tf:"engine_version_actual"`

	KmsKeyId string `json:"kmsKeyId" tf:"kms_key_id"`

	Port int64 `json:"port" tf:"port"`

	StorageEncrypted bool `json:"storageEncrypted" tf:"storage_encrypted"`

	Writer bool `json:"writer" tf:"writer"`
}

type RdsClusterInstanceParameters struct {
	ApplyImmediately *bool `json:"applyImmediately,omitempty" tf:"apply_immediately"`

	AutoMinorVersionUpgrade *bool `json:"autoMinorVersionUpgrade,omitempty" tf:"auto_minor_version_upgrade"`

	AvailabilityZone *string `json:"availabilityZone,omitempty" tf:"availability_zone"`

	CaCertIdentifier *string `json:"caCertIdentifier,omitempty" tf:"ca_cert_identifier"`

	ClusterIdentifier string `json:"clusterIdentifier" tf:"cluster_identifier"`

	CopyTagsToSnapshot *bool `json:"copyTagsToSnapshot,omitempty" tf:"copy_tags_to_snapshot"`

	DbParameterGroupName *string `json:"dbParameterGroupName,omitempty" tf:"db_parameter_group_name"`

	DbSubnetGroupName *string `json:"dbSubnetGroupName,omitempty" tf:"db_subnet_group_name"`

	Engine *string `json:"engine,omitempty" tf:"engine"`

	EngineVersion *string `json:"engineVersion,omitempty" tf:"engine_version"`

	Identifier *string `json:"identifier,omitempty" tf:"identifier"`

	IdentifierPrefix *string `json:"identifierPrefix,omitempty" tf:"identifier_prefix"`

	InstanceClass string `json:"instanceClass" tf:"instance_class"`

	MonitoringInterval *int64 `json:"monitoringInterval,omitempty" tf:"monitoring_interval"`

	MonitoringRoleArn *string `json:"monitoringRoleArn,omitempty" tf:"monitoring_role_arn"`

	PerformanceInsightsEnabled *bool `json:"performanceInsightsEnabled,omitempty" tf:"performance_insights_enabled"`

	PerformanceInsightsKmsKeyId *string `json:"performanceInsightsKmsKeyId,omitempty" tf:"performance_insights_kms_key_id"`

	PreferredBackupWindow *string `json:"preferredBackupWindow,omitempty" tf:"preferred_backup_window"`

	PreferredMaintenanceWindow *string `json:"preferredMaintenanceWindow,omitempty" tf:"preferred_maintenance_window"`

	PromotionTier *int64 `json:"promotionTier,omitempty" tf:"promotion_tier"`

	PubliclyAccessible *bool `json:"publiclyAccessible,omitempty" tf:"publicly_accessible"`

	Tags map[string]string `json:"tags,omitempty" tf:"tags"`

	TagsAll map[string]string `json:"tagsAll,omitempty" tf:"tags_all"`
}

// RdsClusterInstanceSpec defines the desired state of RdsClusterInstance
type RdsClusterInstanceSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       RdsClusterInstanceParameters `json:"forProvider"`
}

// RdsClusterInstanceStatus defines the observed state of RdsClusterInstance.
type RdsClusterInstanceStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          RdsClusterInstanceObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// RdsClusterInstance is the Schema for the RdsClusterInstances API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type RdsClusterInstance struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              RdsClusterInstanceSpec   `json:"spec"`
	Status            RdsClusterInstanceStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// RdsClusterInstanceList contains a list of RdsClusterInstances
type RdsClusterInstanceList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []RdsClusterInstance `json:"items"`
}

// Repository type metadata.
var (
	RdsClusterInstanceKind             = "RdsClusterInstance"
	RdsClusterInstanceGroupKind        = schema.GroupKind{Group: v1alpha1.Group, Kind: RdsClusterInstanceKind}.String()
	RdsClusterInstanceKindAPIVersion   = RdsClusterInstanceKind + "." + v1alpha1.GroupVersion.String()
	RdsClusterInstanceGroupVersionKind = v1alpha1.GroupVersion.WithKind(RdsClusterInstanceKind)
)

func init() {
	v1alpha1.SchemeBuilder.Register(&RdsClusterInstance{}, &RdsClusterInstanceList{})
}
