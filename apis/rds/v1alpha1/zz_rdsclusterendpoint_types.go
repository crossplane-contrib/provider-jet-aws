/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type RdsClusterEndpointObservation struct {
	ARN string `json:"arn" tf:"arn"`

	Endpoint string `json:"endpoint" tf:"endpoint"`
}

type RdsClusterEndpointParameters struct {
	ClusterEndpointIdentifier string `json:"clusterEndpointIdentifier" tf:"cluster_endpoint_identifier"`

	ClusterIdentifier string `json:"clusterIdentifier" tf:"cluster_identifier"`

	CustomEndpointType string `json:"customEndpointType" tf:"custom_endpoint_type"`

	ExcludedMembers []string `json:"excludedMembers,omitempty" tf:"excluded_members"`

	StaticMembers []string `json:"staticMembers,omitempty" tf:"static_members"`

	Tags map[string]string `json:"tags,omitempty" tf:"tags"`

	TagsAll map[string]string `json:"tagsAll,omitempty" tf:"tags_all"`
}

// RdsClusterEndpointSpec defines the desired state of RdsClusterEndpoint
type RdsClusterEndpointSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       RdsClusterEndpointParameters `json:"forProvider"`
}

// RdsClusterEndpointStatus defines the observed state of RdsClusterEndpoint.
type RdsClusterEndpointStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          RdsClusterEndpointObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// RdsClusterEndpoint is the Schema for the RdsClusterEndpoints API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tfaws}
type RdsClusterEndpoint struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              RdsClusterEndpointSpec   `json:"spec"`
	Status            RdsClusterEndpointStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// RdsClusterEndpointList contains a list of RdsClusterEndpoints
type RdsClusterEndpointList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []RdsClusterEndpoint `json:"items"`
}

// Repository type metadata.
var (
	RdsClusterEndpointKind             = "RdsClusterEndpoint"
	RdsClusterEndpointGroupKind        = schema.GroupKind{Group: Group, Kind: RdsClusterEndpointKind}.String()
	RdsClusterEndpointKindAPIVersion   = RdsClusterEndpointKind + "." + GroupVersion.String()
	RdsClusterEndpointGroupVersionKind = GroupVersion.WithKind(RdsClusterEndpointKind)
)

func init() {
	SchemeBuilder.Register(&RdsClusterEndpoint{}, &RdsClusterEndpointList{})
}
