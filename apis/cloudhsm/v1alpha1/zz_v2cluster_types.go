/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ClusterCertificatesObservation struct {
	AwsHardwareCertificate *string `json:"awsHardwareCertificate,omitempty" tf:"aws_hardware_certificate,omitempty"`

	ClusterCertificate *string `json:"clusterCertificate,omitempty" tf:"cluster_certificate,omitempty"`

	ClusterCsr *string `json:"clusterCsr,omitempty" tf:"cluster_csr,omitempty"`

	HsmCertificate *string `json:"hsmCertificate,omitempty" tf:"hsm_certificate,omitempty"`

	ManufacturerHardwareCertificate *string `json:"manufacturerHardwareCertificate,omitempty" tf:"manufacturer_hardware_certificate,omitempty"`
}

type ClusterCertificatesParameters struct {
}

type V2ClusterObservation struct {
	ClusterCertificates []ClusterCertificatesObservation `json:"clusterCertificates,omitempty" tf:"cluster_certificates,omitempty"`

	ClusterID *string `json:"clusterId,omitempty" tf:"cluster_id,omitempty"`

	ClusterState *string `json:"clusterState,omitempty" tf:"cluster_state,omitempty"`

	SecurityGroupID *string `json:"securityGroupId,omitempty" tf:"security_group_id,omitempty"`

	TagsAll map[string]*string `json:"tagsAll,omitempty" tf:"tags_all,omitempty"`

	VpcID *string `json:"vpcId,omitempty" tf:"vpc_id,omitempty"`
}

type V2ClusterParameters struct {

	// +kubebuilder:validation:Required
	HsmType *string `json:"hsmType" tf:"hsm_type,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +terrajet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`

	// +kubebuilder:validation:Optional
	SourceBackupIdentifier *string `json:"sourceBackupIdentifier,omitempty" tf:"source_backup_identifier,omitempty"`

	// +kubebuilder:validation:Required
	SubnetIds []*string `json:"subnetIds" tf:"subnet_ids,omitempty"`

	// +kubebuilder:validation:Optional
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

// V2ClusterSpec defines the desired state of V2Cluster
type V2ClusterSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     V2ClusterParameters `json:"forProvider"`
}

// V2ClusterStatus defines the observed state of V2Cluster.
type V2ClusterStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        V2ClusterObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// V2Cluster is the Schema for the V2Clusters API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tfaws}
type V2Cluster struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              V2ClusterSpec   `json:"spec"`
	Status            V2ClusterStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// V2ClusterList contains a list of V2Clusters
type V2ClusterList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []V2Cluster `json:"items"`
}

// Repository type metadata.
var (
	V2ClusterKind             = "V2Cluster"
	V2ClusterGroupKind        = schema.GroupKind{Group: Group, Kind: V2ClusterKind}.String()
	V2ClusterKindAPIVersion   = V2ClusterKind + "." + GroupVersion.String()
	V2ClusterGroupVersionKind = GroupVersion.WithKind(V2ClusterKind)
)

func init() {
	SchemeBuilder.Register(&V2Cluster{}, &V2ClusterList{})
}
