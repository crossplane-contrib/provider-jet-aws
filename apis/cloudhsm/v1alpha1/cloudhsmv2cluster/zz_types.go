/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

// +kubebuilder:object:generate=true
// +groupName=cloudhsm.aws.tf.crossplane.io
// +versionName=v1alpha1

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1alpha1 "github.com/crossplane-contrib/provider-tf-aws/apis/cloudhsm/v1alpha1"
)

type CloudhsmV2ClusterObservation struct {
	ClusterCertificates []ClusterCertificatesObservation `json:"clusterCertificates" tf:"cluster_certificates"`

	ClusterId string `json:"clusterId" tf:"cluster_id"`

	ClusterState string `json:"clusterState" tf:"cluster_state"`

	SecurityGroupId string `json:"securityGroupId" tf:"security_group_id"`

	VpcId string `json:"vpcId" tf:"vpc_id"`
}

type CloudhsmV2ClusterParameters struct {
	HsmType string `json:"hsmType" tf:"hsm_type"`

	SourceBackupIdentifier *string `json:"sourceBackupIdentifier,omitempty" tf:"source_backup_identifier"`

	SubnetIds []string `json:"subnetIds" tf:"subnet_ids"`

	Tags map[string]string `json:"tags,omitempty" tf:"tags"`

	TagsAll map[string]string `json:"tagsAll,omitempty" tf:"tags_all"`
}

type ClusterCertificatesObservation struct {
	AwsHardwareCertificate string `json:"awsHardwareCertificate" tf:"aws_hardware_certificate"`

	ClusterCertificate string `json:"clusterCertificate" tf:"cluster_certificate"`

	ClusterCsr string `json:"clusterCsr" tf:"cluster_csr"`

	HsmCertificate string `json:"hsmCertificate" tf:"hsm_certificate"`

	ManufacturerHardwareCertificate string `json:"manufacturerHardwareCertificate" tf:"manufacturer_hardware_certificate"`
}

type ClusterCertificatesParameters struct {
}

// CloudhsmV2ClusterSpec defines the desired state of CloudhsmV2Cluster
type CloudhsmV2ClusterSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       CloudhsmV2ClusterParameters `json:"forProvider"`
}

// CloudhsmV2ClusterStatus defines the observed state of CloudhsmV2Cluster.
type CloudhsmV2ClusterStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          CloudhsmV2ClusterObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// CloudhsmV2Cluster is the Schema for the CloudhsmV2Clusters API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type CloudhsmV2Cluster struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              CloudhsmV2ClusterSpec   `json:"spec"`
	Status            CloudhsmV2ClusterStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// CloudhsmV2ClusterList contains a list of CloudhsmV2Clusters
type CloudhsmV2ClusterList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []CloudhsmV2Cluster `json:"items"`
}

// Repository type metadata.
var (
	CloudhsmV2ClusterKind             = "CloudhsmV2Cluster"
	CloudhsmV2ClusterGroupKind        = schema.GroupKind{Group: v1alpha1.Group, Kind: CloudhsmV2ClusterKind}.String()
	CloudhsmV2ClusterKindAPIVersion   = CloudhsmV2ClusterKind + "." + v1alpha1.GroupVersion.String()
	CloudhsmV2ClusterGroupVersionKind = v1alpha1.GroupVersion.WithKind(CloudhsmV2ClusterKind)
)

func init() {
	v1alpha1.SchemeBuilder.Register(&CloudhsmV2Cluster{}, &CloudhsmV2ClusterList{})
}
