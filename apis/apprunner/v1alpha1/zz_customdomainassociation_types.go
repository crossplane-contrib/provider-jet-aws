/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type CertificateValidationRecordsObservation struct {
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type CertificateValidationRecordsParameters struct {
}

type CustomDomainAssociationObservation struct {
	CertificateValidationRecords []CertificateValidationRecordsObservation `json:"certificateValidationRecords,omitempty" tf:"certificate_validation_records,omitempty"`

	DNSTarget *string `json:"dnsTarget,omitempty" tf:"dns_target,omitempty"`

	Status *string `json:"status,omitempty" tf:"status,omitempty"`
}

type CustomDomainAssociationParameters struct {

	// +kubebuilder:validation:Required
	DomainName *string `json:"domainName" tf:"domain_name,omitempty"`

	// +kubebuilder:validation:Optional
	EnableWwwSubdomain *bool `json:"enableWwwSubdomain,omitempty" tf:"enable_www_subdomain,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +terrajet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`

	// +kubebuilder:validation:Required
	ServiceArn *string `json:"serviceArn" tf:"service_arn,omitempty"`
}

// CustomDomainAssociationSpec defines the desired state of CustomDomainAssociation
type CustomDomainAssociationSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     CustomDomainAssociationParameters `json:"forProvider"`
}

// CustomDomainAssociationStatus defines the observed state of CustomDomainAssociation.
type CustomDomainAssociationStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        CustomDomainAssociationObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// CustomDomainAssociation is the Schema for the CustomDomainAssociations API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tfaws}
type CustomDomainAssociation struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              CustomDomainAssociationSpec   `json:"spec"`
	Status            CustomDomainAssociationStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// CustomDomainAssociationList contains a list of CustomDomainAssociations
type CustomDomainAssociationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []CustomDomainAssociation `json:"items"`
}

// Repository type metadata.
var (
	CustomDomainAssociationKind             = "CustomDomainAssociation"
	CustomDomainAssociationGroupKind        = schema.GroupKind{Group: Group, Kind: CustomDomainAssociationKind}.String()
	CustomDomainAssociationKindAPIVersion   = CustomDomainAssociationKind + "." + GroupVersion.String()
	CustomDomainAssociationGroupVersionKind = GroupVersion.WithKind(CustomDomainAssociationKind)
)

func init() {
	SchemeBuilder.Register(&CustomDomainAssociation{}, &CustomDomainAssociationList{})
}
