/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

// +kubebuilder:object:generate=true
// +groupName=cloudformation.aws.tf.crossplane.io
// +versionName=v1alpha1

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1alpha1 "github.com/crossplane-contrib/provider-tf-aws/apis/cloudformation/v1alpha1"
)

type CloudformationTypeObservation struct {
	Arn string `json:"arn" tf:"arn"`

	DefaultVersionId string `json:"defaultVersionId" tf:"default_version_id"`

	DeprecatedStatus string `json:"deprecatedStatus" tf:"deprecated_status"`

	Description string `json:"description" tf:"description"`

	DocumentationUrl string `json:"documentationUrl" tf:"documentation_url"`

	IsDefaultVersion bool `json:"isDefaultVersion" tf:"is_default_version"`

	ProvisioningType string `json:"provisioningType" tf:"provisioning_type"`

	Schema string `json:"schema" tf:"schema"`

	SourceUrl string `json:"sourceUrl" tf:"source_url"`

	TypeArn string `json:"typeArn" tf:"type_arn"`

	VersionId string `json:"versionId" tf:"version_id"`

	Visibility string `json:"visibility" tf:"visibility"`
}

type CloudformationTypeParameters struct {
	ExecutionRoleArn *string `json:"executionRoleArn,omitempty" tf:"execution_role_arn"`

	LoggingConfig []LoggingConfigParameters `json:"loggingConfig,omitempty" tf:"logging_config"`

	SchemaHandlerPackage string `json:"schemaHandlerPackage" tf:"schema_handler_package"`

	Type *string `json:"type,omitempty" tf:"type"`

	TypeName string `json:"typeName" tf:"type_name"`
}

type LoggingConfigObservation struct {
}

type LoggingConfigParameters struct {
	LogGroupName string `json:"logGroupName" tf:"log_group_name"`

	LogRoleArn string `json:"logRoleArn" tf:"log_role_arn"`
}

// CloudformationTypeSpec defines the desired state of CloudformationType
type CloudformationTypeSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       CloudformationTypeParameters `json:"forProvider"`
}

// CloudformationTypeStatus defines the observed state of CloudformationType.
type CloudformationTypeStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          CloudformationTypeObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// CloudformationType is the Schema for the CloudformationTypes API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type CloudformationType struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              CloudformationTypeSpec   `json:"spec"`
	Status            CloudformationTypeStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// CloudformationTypeList contains a list of CloudformationTypes
type CloudformationTypeList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []CloudformationType `json:"items"`
}

// Repository type metadata.
var (
	CloudformationTypeKind             = "CloudformationType"
	CloudformationTypeGroupKind        = schema.GroupKind{Group: v1alpha1.Group, Kind: CloudformationTypeKind}.String()
	CloudformationTypeKindAPIVersion   = CloudformationTypeKind + "." + v1alpha1.GroupVersion.String()
	CloudformationTypeGroupVersionKind = v1alpha1.GroupVersion.WithKind(CloudformationTypeKind)
)

func init() {
	v1alpha1.SchemeBuilder.Register(&CloudformationType{}, &CloudformationTypeList{})
}
