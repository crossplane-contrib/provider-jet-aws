/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type StackSetInstanceObservation struct {
	StackID *string `json:"stackId,omitempty" tf:"stack_id,omitempty"`
}

type StackSetInstanceParameters struct {

	// +kubebuilder:validation:Optional
	AccountID *string `json:"accountId,omitempty" tf:"account_id,omitempty"`

	// +kubebuilder:validation:Optional
	ParameterOverrides map[string]*string `json:"parameterOverrides,omitempty" tf:"parameter_overrides,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +terrajet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`

	// +kubebuilder:validation:Optional
	RetainStack *bool `json:"retainStack,omitempty" tf:"retain_stack,omitempty"`

	// +kubebuilder:validation:Required
	StackSetName *string `json:"stackSetName" tf:"stack_set_name,omitempty"`
}

// StackSetInstanceSpec defines the desired state of StackSetInstance
type StackSetInstanceSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     StackSetInstanceParameters `json:"forProvider"`
}

// StackSetInstanceStatus defines the observed state of StackSetInstance.
type StackSetInstanceStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        StackSetInstanceObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// StackSetInstance is the Schema for the StackSetInstances API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tfaws}
type StackSetInstance struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              StackSetInstanceSpec   `json:"spec"`
	Status            StackSetInstanceStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// StackSetInstanceList contains a list of StackSetInstances
type StackSetInstanceList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []StackSetInstance `json:"items"`
}

// Repository type metadata.
var (
	StackSetInstanceKind             = "StackSetInstance"
	StackSetInstanceGroupKind        = schema.GroupKind{Group: Group, Kind: StackSetInstanceKind}.String()
	StackSetInstanceKindAPIVersion   = StackSetInstanceKind + "." + GroupVersion.String()
	StackSetInstanceGroupVersionKind = GroupVersion.WithKind(StackSetInstanceKind)
)

func init() {
	SchemeBuilder.Register(&StackSetInstance{}, &StackSetInstanceList{})
}
