/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

// +kubebuilder:object:generate=true
// +groupName=cloudformation.aws.tf.crossplane.io
// +versionName=v1alpha1

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1alpha1 "github.com/crossplane-contrib/provider-tf-aws/apis/cloudformation/v1alpha1"
)

type AutoDeploymentObservation struct {
}

type AutoDeploymentParameters struct {
	Enabled *bool `json:"enabled,omitempty" tf:"enabled"`

	RetainStacksOnAccountRemoval *bool `json:"retainStacksOnAccountRemoval,omitempty" tf:"retain_stacks_on_account_removal"`
}

type CloudformationStackSetObservation struct {
	Arn string `json:"arn" tf:"arn"`

	StackSetId string `json:"stackSetId" tf:"stack_set_id"`
}

type CloudformationStackSetParameters struct {
	AdministrationRoleArn *string `json:"administrationRoleArn,omitempty" tf:"administration_role_arn"`

	AutoDeployment []AutoDeploymentParameters `json:"autoDeployment,omitempty" tf:"auto_deployment"`

	Capabilities []string `json:"capabilities,omitempty" tf:"capabilities"`

	Description *string `json:"description,omitempty" tf:"description"`

	ExecutionRoleName *string `json:"executionRoleName,omitempty" tf:"execution_role_name"`

	Name string `json:"name" tf:"name"`

	Parameters map[string]string `json:"parameters,omitempty" tf:"parameters"`

	PermissionModel *string `json:"permissionModel,omitempty" tf:"permission_model"`

	Tags map[string]string `json:"tags,omitempty" tf:"tags"`

	TagsAll map[string]string `json:"tagsAll,omitempty" tf:"tags_all"`

	TemplateBody *string `json:"templateBody,omitempty" tf:"template_body"`

	TemplateUrl *string `json:"templateUrl,omitempty" tf:"template_url"`
}

// CloudformationStackSetSpec defines the desired state of CloudformationStackSet
type CloudformationStackSetSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       CloudformationStackSetParameters `json:"forProvider"`
}

// CloudformationStackSetStatus defines the observed state of CloudformationStackSet.
type CloudformationStackSetStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          CloudformationStackSetObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// CloudformationStackSet is the Schema for the CloudformationStackSets API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type CloudformationStackSet struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              CloudformationStackSetSpec   `json:"spec"`
	Status            CloudformationStackSetStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// CloudformationStackSetList contains a list of CloudformationStackSets
type CloudformationStackSetList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []CloudformationStackSet `json:"items"`
}

// Repository type metadata.
var (
	CloudformationStackSetKind             = "CloudformationStackSet"
	CloudformationStackSetGroupKind        = schema.GroupKind{Group: v1alpha1.Group, Kind: CloudformationStackSetKind}.String()
	CloudformationStackSetKindAPIVersion   = CloudformationStackSetKind + "." + v1alpha1.GroupVersion.String()
	CloudformationStackSetGroupVersionKind = v1alpha1.GroupVersion.WithKind(CloudformationStackSetKind)
)

func init() {
	v1alpha1.SchemeBuilder.Register(&CloudformationStackSet{}, &CloudformationStackSetList{})
}
