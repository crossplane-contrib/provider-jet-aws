/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

// +kubebuilder:object:generate=true
// +groupName=macie2.aws.tf.crossplane.io
// +versionName=v1alpha1

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1alpha1 "github.com/crossplane-contrib/provider-tf-aws/apis/macie2/v1alpha1"
)

type Macie2MemberObservation struct {
	AdministratorAccountId string `json:"administratorAccountId" tf:"administrator_account_id"`

	Arn string `json:"arn" tf:"arn"`

	InvitedAt string `json:"invitedAt" tf:"invited_at"`

	MasterAccountId string `json:"masterAccountId" tf:"master_account_id"`

	RelationshipStatus string `json:"relationshipStatus" tf:"relationship_status"`

	UpdatedAt string `json:"updatedAt" tf:"updated_at"`
}

type Macie2MemberParameters struct {
	AccountId string `json:"accountId" tf:"account_id"`

	Email string `json:"email" tf:"email"`

	InvitationDisableEmailNotification *string `json:"invitationDisableEmailNotification,omitempty" tf:"invitation_disable_email_notification"`

	InvitationMessage *string `json:"invitationMessage,omitempty" tf:"invitation_message"`

	Invite *bool `json:"invite,omitempty" tf:"invite"`

	Status *string `json:"status,omitempty" tf:"status"`

	Tags map[string]string `json:"tags,omitempty" tf:"tags"`

	TagsAll map[string]string `json:"tagsAll,omitempty" tf:"tags_all"`
}

// Macie2MemberSpec defines the desired state of Macie2Member
type Macie2MemberSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       Macie2MemberParameters `json:"forProvider"`
}

// Macie2MemberStatus defines the observed state of Macie2Member.
type Macie2MemberStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          Macie2MemberObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Macie2Member is the Schema for the Macie2Members API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type Macie2Member struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              Macie2MemberSpec   `json:"spec"`
	Status            Macie2MemberStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// Macie2MemberList contains a list of Macie2Members
type Macie2MemberList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Macie2Member `json:"items"`
}

// Repository type metadata.
var (
	Macie2MemberKind             = "Macie2Member"
	Macie2MemberGroupKind        = schema.GroupKind{Group: v1alpha1.Group, Kind: Macie2MemberKind}.String()
	Macie2MemberKindAPIVersion   = Macie2MemberKind + "." + v1alpha1.GroupVersion.String()
	Macie2MemberGroupVersionKind = v1alpha1.GroupVersion.WithKind(Macie2MemberKind)
)

func init() {
	v1alpha1.SchemeBuilder.Register(&Macie2Member{}, &Macie2MemberList{})
}
