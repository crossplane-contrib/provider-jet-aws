/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type InvitationAccepterObservation struct {
	InvitationID *string `json:"invitationId,omitempty" tf:"invitation_id,omitempty"`
}

type InvitationAccepterParameters struct {

	// +kubebuilder:validation:Required
	AdministratorAccountID *string `json:"administratorAccountId" tf:"administrator_account_id,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +terrajet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`
}

// InvitationAccepterSpec defines the desired state of InvitationAccepter
type InvitationAccepterSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     InvitationAccepterParameters `json:"forProvider"`
}

// InvitationAccepterStatus defines the observed state of InvitationAccepter.
type InvitationAccepterStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        InvitationAccepterObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// InvitationAccepter is the Schema for the InvitationAccepters API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tfaws}
type InvitationAccepter struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              InvitationAccepterSpec   `json:"spec"`
	Status            InvitationAccepterStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// InvitationAccepterList contains a list of InvitationAccepters
type InvitationAccepterList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []InvitationAccepter `json:"items"`
}

// Repository type metadata.
var (
	InvitationAccepterKind             = "InvitationAccepter"
	InvitationAccepterGroupKind        = schema.GroupKind{Group: Group, Kind: InvitationAccepterKind}.String()
	InvitationAccepterKindAPIVersion   = InvitationAccepterKind + "." + GroupVersion.String()
	InvitationAccepterGroupVersionKind = GroupVersion.WithKind(InvitationAccepterKind)
)

func init() {
	SchemeBuilder.Register(&InvitationAccepter{}, &InvitationAccepterList{})
}
