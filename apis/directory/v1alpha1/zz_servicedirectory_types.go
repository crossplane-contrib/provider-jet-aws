/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ConnectSettingsObservation struct {
	AvailabilityZones []*string `json:"availabilityZones,omitempty" tf:"availability_zones,omitempty"`

	ConnectIps []*string `json:"connectIps,omitempty" tf:"connect_ips,omitempty"`
}

type ConnectSettingsParameters struct {

	// +kubebuilder:validation:Required
	CustomerDNSIps []*string `json:"customerDnsIps" tf:"customer_dns_ips,omitempty"`

	// +kubebuilder:validation:Required
	CustomerUsername *string `json:"customerUsername" tf:"customer_username,omitempty"`

	// +kubebuilder:validation:Required
	SubnetIds []*string `json:"subnetIds" tf:"subnet_ids,omitempty"`

	// +kubebuilder:validation:Required
	VpcID *string `json:"vpcId" tf:"vpc_id,omitempty"`
}

type ServiceDirectoryObservation struct {
	AccessURL *string `json:"accessUrl,omitempty" tf:"access_url,omitempty"`

	DNSIPAddresses []*string `json:"dnsIpAddresses,omitempty" tf:"dns_ip_addresses,omitempty"`

	SecurityGroupID *string `json:"securityGroupId,omitempty" tf:"security_group_id,omitempty"`

	TagsAll map[string]*string `json:"tagsAll,omitempty" tf:"tags_all,omitempty"`
}

type ServiceDirectoryParameters struct {

	// +kubebuilder:validation:Optional
	Alias *string `json:"alias,omitempty" tf:"alias,omitempty"`

	// +kubebuilder:validation:Optional
	ConnectSettings []ConnectSettingsParameters `json:"connectSettings,omitempty" tf:"connect_settings,omitempty"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Optional
	Edition *string `json:"edition,omitempty" tf:"edition,omitempty"`

	// +kubebuilder:validation:Optional
	EnableSso *bool `json:"enableSso,omitempty" tf:"enable_sso,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Required
	PasswordSecretRef v1.SecretKeySelector `json:"passwordSecretRef" tf:"-"`

	// Region is the region you'd like your resource to be created in.
	// +terrajet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`

	// +kubebuilder:validation:Optional
	ShortName *string `json:"shortName,omitempty" tf:"short_name,omitempty"`

	// +kubebuilder:validation:Optional
	Size *string `json:"size,omitempty" tf:"size,omitempty"`

	// +kubebuilder:validation:Optional
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// +kubebuilder:validation:Optional
	VpcSettings []VpcSettingsParameters `json:"vpcSettings,omitempty" tf:"vpc_settings,omitempty"`
}

type VpcSettingsObservation struct {
	AvailabilityZones []*string `json:"availabilityZones,omitempty" tf:"availability_zones,omitempty"`
}

type VpcSettingsParameters struct {

	// +kubebuilder:validation:Required
	SubnetIds []*string `json:"subnetIds" tf:"subnet_ids,omitempty"`

	// +kubebuilder:validation:Required
	VpcID *string `json:"vpcId" tf:"vpc_id,omitempty"`
}

// ServiceDirectorySpec defines the desired state of ServiceDirectory
type ServiceDirectorySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ServiceDirectoryParameters `json:"forProvider"`
}

// ServiceDirectoryStatus defines the observed state of ServiceDirectory.
type ServiceDirectoryStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ServiceDirectoryObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ServiceDirectory is the Schema for the ServiceDirectorys API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tfaws}
type ServiceDirectory struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ServiceDirectorySpec   `json:"spec"`
	Status            ServiceDirectoryStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ServiceDirectoryList contains a list of ServiceDirectorys
type ServiceDirectoryList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ServiceDirectory `json:"items"`
}

// Repository type metadata.
var (
	ServiceDirectoryKind             = "ServiceDirectory"
	ServiceDirectoryGroupKind        = schema.GroupKind{Group: Group, Kind: ServiceDirectoryKind}.String()
	ServiceDirectoryKindAPIVersion   = ServiceDirectoryKind + "." + GroupVersion.String()
	ServiceDirectoryGroupVersionKind = GroupVersion.WithKind(ServiceDirectoryKind)
)

func init() {
	SchemeBuilder.Register(&ServiceDirectory{}, &ServiceDirectoryList{})
}
