/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

// +kubebuilder:object:generate=true
// +groupName=directory.aws.tf.crossplane.io
// +versionName=v1alpha1

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1alpha1 "github.com/crossplane-contrib/provider-tf-aws/apis/directory/v1alpha1"
)

type ConnectSettingsObservation struct {
	AvailabilityZones []string `json:"availabilityZones" tf:"availability_zones"`

	ConnectIps []string `json:"connectIps" tf:"connect_ips"`
}

type ConnectSettingsParameters struct {
	CustomerDnsIps []string `json:"customerDnsIps" tf:"customer_dns_ips"`

	CustomerUsername string `json:"customerUsername" tf:"customer_username"`

	SubnetIds []string `json:"subnetIds" tf:"subnet_ids"`

	VpcId string `json:"vpcId" tf:"vpc_id"`
}

type DirectoryServiceDirectoryObservation struct {
	AccessUrl string `json:"accessUrl" tf:"access_url"`

	DnsIpAddresses []string `json:"dnsIpAddresses" tf:"dns_ip_addresses"`

	SecurityGroupId string `json:"securityGroupId" tf:"security_group_id"`
}

type DirectoryServiceDirectoryParameters struct {
	Alias *string `json:"alias,omitempty" tf:"alias"`

	ConnectSettings []ConnectSettingsParameters `json:"connectSettings,omitempty" tf:"connect_settings"`

	Description *string `json:"description,omitempty" tf:"description"`

	Edition *string `json:"edition,omitempty" tf:"edition"`

	EnableSso *bool `json:"enableSso,omitempty" tf:"enable_sso"`

	Name string `json:"name" tf:"name"`

	Password string `json:"password" tf:"password"`

	ShortName *string `json:"shortName,omitempty" tf:"short_name"`

	Size *string `json:"size,omitempty" tf:"size"`

	Tags map[string]string `json:"tags,omitempty" tf:"tags"`

	TagsAll map[string]string `json:"tagsAll,omitempty" tf:"tags_all"`

	Type *string `json:"type,omitempty" tf:"type"`

	VpcSettings []VpcSettingsParameters `json:"vpcSettings,omitempty" tf:"vpc_settings"`
}

type VpcSettingsObservation struct {
	AvailabilityZones []string `json:"availabilityZones" tf:"availability_zones"`
}

type VpcSettingsParameters struct {
	SubnetIds []string `json:"subnetIds" tf:"subnet_ids"`

	VpcId string `json:"vpcId" tf:"vpc_id"`
}

// DirectoryServiceDirectorySpec defines the desired state of DirectoryServiceDirectory
type DirectoryServiceDirectorySpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       DirectoryServiceDirectoryParameters `json:"forProvider"`
}

// DirectoryServiceDirectoryStatus defines the observed state of DirectoryServiceDirectory.
type DirectoryServiceDirectoryStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          DirectoryServiceDirectoryObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// DirectoryServiceDirectory is the Schema for the DirectoryServiceDirectorys API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type DirectoryServiceDirectory struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DirectoryServiceDirectorySpec   `json:"spec"`
	Status            DirectoryServiceDirectoryStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DirectoryServiceDirectoryList contains a list of DirectoryServiceDirectorys
type DirectoryServiceDirectoryList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DirectoryServiceDirectory `json:"items"`
}

// Repository type metadata.
var (
	DirectoryServiceDirectoryKind             = "DirectoryServiceDirectory"
	DirectoryServiceDirectoryGroupKind        = schema.GroupKind{Group: v1alpha1.Group, Kind: DirectoryServiceDirectoryKind}.String()
	DirectoryServiceDirectoryKindAPIVersion   = DirectoryServiceDirectoryKind + "." + v1alpha1.GroupVersion.String()
	DirectoryServiceDirectoryGroupVersionKind = v1alpha1.GroupVersion.WithKind(DirectoryServiceDirectoryKind)
)

func init() {
	v1alpha1.SchemeBuilder.Register(&DirectoryServiceDirectory{}, &DirectoryServiceDirectoryList{})
}
