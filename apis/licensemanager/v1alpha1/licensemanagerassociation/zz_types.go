/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

// +kubebuilder:object:generate=true
// +groupName=licensemanager.aws.tf.crossplane.io
// +versionName=v1alpha1

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1alpha1 "github.com/crossplane-contrib/provider-tf-aws/apis/licensemanager/v1alpha1"
)

type LicensemanagerAssociationObservation struct {
}

type LicensemanagerAssociationParameters struct {
	LicenseConfigurationArn string `json:"licenseConfigurationArn" tf:"license_configuration_arn"`

	ResourceArn string `json:"resourceArn" tf:"resource_arn"`
}

// LicensemanagerAssociationSpec defines the desired state of LicensemanagerAssociation
type LicensemanagerAssociationSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       LicensemanagerAssociationParameters `json:"forProvider"`
}

// LicensemanagerAssociationStatus defines the observed state of LicensemanagerAssociation.
type LicensemanagerAssociationStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          LicensemanagerAssociationObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// LicensemanagerAssociation is the Schema for the LicensemanagerAssociations API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type LicensemanagerAssociation struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              LicensemanagerAssociationSpec   `json:"spec"`
	Status            LicensemanagerAssociationStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// LicensemanagerAssociationList contains a list of LicensemanagerAssociations
type LicensemanagerAssociationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []LicensemanagerAssociation `json:"items"`
}

// Repository type metadata.
var (
	LicensemanagerAssociationKind             = "LicensemanagerAssociation"
	LicensemanagerAssociationGroupKind        = schema.GroupKind{Group: v1alpha1.Group, Kind: LicensemanagerAssociationKind}.String()
	LicensemanagerAssociationKindAPIVersion   = LicensemanagerAssociationKind + "." + v1alpha1.GroupVersion.String()
	LicensemanagerAssociationGroupVersionKind = v1alpha1.GroupVersion.WithKind(LicensemanagerAssociationKind)
)

func init() {
	v1alpha1.SchemeBuilder.Register(&LicensemanagerAssociation{}, &LicensemanagerAssociationList{})
}
