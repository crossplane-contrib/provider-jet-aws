/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

// +kubebuilder:object:generate=true
// +groupName=licensemanager.aws.tf.crossplane.io
// +versionName=v1alpha1

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1alpha1 "github.com/crossplane-contrib/provider-tf-aws/apis/licensemanager/v1alpha1"
)

type LicensemanagerLicenseConfigurationObservation struct {
	Arn string `json:"arn" tf:"arn"`

	OwnerAccountId string `json:"ownerAccountId" tf:"owner_account_id"`
}

type LicensemanagerLicenseConfigurationParameters struct {
	Description *string `json:"description,omitempty" tf:"description"`

	LicenseCount *int64 `json:"licenseCount,omitempty" tf:"license_count"`

	LicenseCountHardLimit *bool `json:"licenseCountHardLimit,omitempty" tf:"license_count_hard_limit"`

	LicenseCountingType string `json:"licenseCountingType" tf:"license_counting_type"`

	LicenseRules []string `json:"licenseRules,omitempty" tf:"license_rules"`

	Name string `json:"name" tf:"name"`

	Tags map[string]string `json:"tags,omitempty" tf:"tags"`

	TagsAll map[string]string `json:"tagsAll,omitempty" tf:"tags_all"`
}

// LicensemanagerLicenseConfigurationSpec defines the desired state of LicensemanagerLicenseConfiguration
type LicensemanagerLicenseConfigurationSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       LicensemanagerLicenseConfigurationParameters `json:"forProvider"`
}

// LicensemanagerLicenseConfigurationStatus defines the observed state of LicensemanagerLicenseConfiguration.
type LicensemanagerLicenseConfigurationStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          LicensemanagerLicenseConfigurationObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// LicensemanagerLicenseConfiguration is the Schema for the LicensemanagerLicenseConfigurations API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type LicensemanagerLicenseConfiguration struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              LicensemanagerLicenseConfigurationSpec   `json:"spec"`
	Status            LicensemanagerLicenseConfigurationStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// LicensemanagerLicenseConfigurationList contains a list of LicensemanagerLicenseConfigurations
type LicensemanagerLicenseConfigurationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []LicensemanagerLicenseConfiguration `json:"items"`
}

// Repository type metadata.
var (
	LicensemanagerLicenseConfigurationKind             = "LicensemanagerLicenseConfiguration"
	LicensemanagerLicenseConfigurationGroupKind        = schema.GroupKind{Group: v1alpha1.Group, Kind: LicensemanagerLicenseConfigurationKind}.String()
	LicensemanagerLicenseConfigurationKindAPIVersion   = LicensemanagerLicenseConfigurationKind + "." + v1alpha1.GroupVersion.String()
	LicensemanagerLicenseConfigurationGroupVersionKind = v1alpha1.GroupVersion.WithKind(LicensemanagerLicenseConfigurationKind)
)

func init() {
	v1alpha1.SchemeBuilder.Register(&LicensemanagerLicenseConfiguration{}, &LicensemanagerLicenseConfigurationList{})
}
