/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type CodecommitRepositoryObservation struct {
	ARN string `json:"arn" tf:"arn"`

	CloneURLHTTP string `json:"cloneURLHTTP" tf:"clone_url_http"`

	CloneURLSSH string `json:"cloneURLSSH" tf:"clone_url_ssh"`

	RepositoryID string `json:"repositoryID" tf:"repository_id"`
}

type CodecommitRepositoryParameters struct {
	DefaultBranch *string `json:"defaultBranch,omitempty" tf:"default_branch"`

	Description *string `json:"description,omitempty" tf:"description"`

	RepositoryName string `json:"repositoryName" tf:"repository_name"`

	Tags map[string]string `json:"tags,omitempty" tf:"tags"`

	TagsAll map[string]string `json:"tagsAll,omitempty" tf:"tags_all"`
}

// CodecommitRepositorySpec defines the desired state of CodecommitRepository
type CodecommitRepositorySpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       CodecommitRepositoryParameters `json:"forProvider"`
}

// CodecommitRepositoryStatus defines the observed state of CodecommitRepository.
type CodecommitRepositoryStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          CodecommitRepositoryObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// CodecommitRepository is the Schema for the CodecommitRepositorys API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tfaws}
type CodecommitRepository struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              CodecommitRepositorySpec   `json:"spec"`
	Status            CodecommitRepositoryStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// CodecommitRepositoryList contains a list of CodecommitRepositorys
type CodecommitRepositoryList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []CodecommitRepository `json:"items"`
}

// Repository type metadata.
var (
	CodecommitRepositoryKind             = "CodecommitRepository"
	CodecommitRepositoryGroupKind        = schema.GroupKind{Group: Group, Kind: CodecommitRepositoryKind}.String()
	CodecommitRepositoryKindAPIVersion   = CodecommitRepositoryKind + "." + GroupVersion.String()
	CodecommitRepositoryGroupVersionKind = GroupVersion.WithKind(CodecommitRepositoryKind)
)

func init() {
	SchemeBuilder.Register(&CodecommitRepository{}, &CodecommitRepositoryList{})
}
