/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type VoiceConnectorObservation struct {
	OutboundHostName *string `json:"outboundHostName,omitempty" tf:"outbound_host_name,omitempty"`
}

type VoiceConnectorParameters struct {

	// +kubebuilder:validation:Optional
	AwsRegion *string `json:"awsRegion,omitempty" tf:"aws_region,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +terrajet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`

	// +kubebuilder:validation:Required
	RequireEncryption *bool `json:"requireEncryption" tf:"require_encryption,omitempty"`
}

// VoiceConnectorSpec defines the desired state of VoiceConnector
type VoiceConnectorSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     VoiceConnectorParameters `json:"forProvider"`
}

// VoiceConnectorStatus defines the observed state of VoiceConnector.
type VoiceConnectorStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        VoiceConnectorObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// VoiceConnector is the Schema for the VoiceConnectors API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tfaws}
type VoiceConnector struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              VoiceConnectorSpec   `json:"spec"`
	Status            VoiceConnectorStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// VoiceConnectorList contains a list of VoiceConnectors
type VoiceConnectorList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []VoiceConnector `json:"items"`
}

// Repository type metadata.
var (
	VoiceConnectorKind             = "VoiceConnector"
	VoiceConnectorGroupKind        = schema.GroupKind{Group: Group, Kind: VoiceConnectorKind}.String()
	VoiceConnectorKindAPIVersion   = VoiceConnectorKind + "." + GroupVersion.String()
	VoiceConnectorGroupVersionKind = GroupVersion.WithKind(VoiceConnectorKind)
)

func init() {
	SchemeBuilder.Register(&VoiceConnector{}, &VoiceConnectorList{})
}
