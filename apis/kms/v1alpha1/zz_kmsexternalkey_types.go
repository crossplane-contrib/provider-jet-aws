/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type KmsExternalKeyObservation struct {
	ARN string `json:"arn" tf:"arn"`

	ExpirationModel string `json:"expirationModel" tf:"expiration_model"`

	KeyState string `json:"keyState" tf:"key_state"`

	KeyUsage string `json:"keyUsage" tf:"key_usage"`
}

type KmsExternalKeyParameters struct {
	BypassPolicyLockoutSafetyCheck *bool `json:"bypassPolicyLockoutSafetyCheck,omitempty" tf:"bypass_policy_lockout_safety_check"`

	DeletionWindowInDays *int64 `json:"deletionWindowInDays,omitempty" tf:"deletion_window_in_days"`

	Description *string `json:"description,omitempty" tf:"description"`

	Enabled *bool `json:"enabled,omitempty" tf:"enabled"`

	KeyMaterialBase64 *string `json:"keyMaterialBase64,omitempty" tf:"key_material_base64"`

	Policy *string `json:"policy,omitempty" tf:"policy"`

	Tags map[string]string `json:"tags,omitempty" tf:"tags"`

	TagsAll map[string]string `json:"tagsAll,omitempty" tf:"tags_all"`

	ValidTo *string `json:"validTo,omitempty" tf:"valid_to"`
}

// KmsExternalKeySpec defines the desired state of KmsExternalKey
type KmsExternalKeySpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       KmsExternalKeyParameters `json:"forProvider"`
}

// KmsExternalKeyStatus defines the observed state of KmsExternalKey.
type KmsExternalKeyStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          KmsExternalKeyObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// KmsExternalKey is the Schema for the KmsExternalKeys API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tfaws}
type KmsExternalKey struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              KmsExternalKeySpec   `json:"spec"`
	Status            KmsExternalKeyStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// KmsExternalKeyList contains a list of KmsExternalKeys
type KmsExternalKeyList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []KmsExternalKey `json:"items"`
}

// Repository type metadata.
var (
	KmsExternalKeyKind             = "KmsExternalKey"
	KmsExternalKeyGroupKind        = schema.GroupKind{Group: Group, Kind: KmsExternalKeyKind}.String()
	KmsExternalKeyKindAPIVersion   = KmsExternalKeyKind + "." + GroupVersion.String()
	KmsExternalKeyGroupVersionKind = GroupVersion.WithKind(KmsExternalKeyKind)
)

func init() {
	SchemeBuilder.Register(&KmsExternalKey{}, &KmsExternalKeyList{})
}
