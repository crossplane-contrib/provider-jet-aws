/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

// +kubebuilder:object:generate=true
// +groupName=ebs.aws.tf.crossplane.io
// +versionName=v1alpha1

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1alpha1 "github.com/crossplane-contrib/provider-tf-aws/apis/ebs/v1alpha1"
)

type EbsSnapshotObservation struct {
	Arn string `json:"arn" tf:"arn"`

	DataEncryptionKeyId string `json:"dataEncryptionKeyId" tf:"data_encryption_key_id"`

	Encrypted bool `json:"encrypted" tf:"encrypted"`

	KmsKeyId string `json:"kmsKeyId" tf:"kms_key_id"`

	OwnerAlias string `json:"ownerAlias" tf:"owner_alias"`

	OwnerId string `json:"ownerId" tf:"owner_id"`

	VolumeSize int64 `json:"volumeSize" tf:"volume_size"`
}

type EbsSnapshotParameters struct {
	Description *string `json:"description,omitempty" tf:"description"`

	Tags map[string]string `json:"tags,omitempty" tf:"tags"`

	TagsAll map[string]string `json:"tagsAll,omitempty" tf:"tags_all"`

	VolumeId string `json:"volumeId" tf:"volume_id"`
}

// EbsSnapshotSpec defines the desired state of EbsSnapshot
type EbsSnapshotSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       EbsSnapshotParameters `json:"forProvider"`
}

// EbsSnapshotStatus defines the observed state of EbsSnapshot.
type EbsSnapshotStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          EbsSnapshotObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// EbsSnapshot is the Schema for the EbsSnapshots API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type EbsSnapshot struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              EbsSnapshotSpec   `json:"spec"`
	Status            EbsSnapshotStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// EbsSnapshotList contains a list of EbsSnapshots
type EbsSnapshotList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []EbsSnapshot `json:"items"`
}

// Repository type metadata.
var (
	EbsSnapshotKind             = "EbsSnapshot"
	EbsSnapshotGroupKind        = schema.GroupKind{Group: v1alpha1.Group, Kind: EbsSnapshotKind}.String()
	EbsSnapshotKindAPIVersion   = EbsSnapshotKind + "." + v1alpha1.GroupVersion.String()
	EbsSnapshotGroupVersionKind = v1alpha1.GroupVersion.WithKind(EbsSnapshotKind)
)

func init() {
	v1alpha1.SchemeBuilder.Register(&EbsSnapshot{}, &EbsSnapshotList{})
}
