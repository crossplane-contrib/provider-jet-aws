/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type SnapshotCopyObservation struct {
	Arn *string `json:"arn,omitempty" tf:"arn,omitempty"`

	DataEncryptionKeyID *string `json:"dataEncryptionKeyId,omitempty" tf:"data_encryption_key_id,omitempty"`

	OwnerAlias *string `json:"ownerAlias,omitempty" tf:"owner_alias,omitempty"`

	OwnerID *string `json:"ownerId,omitempty" tf:"owner_id,omitempty"`

	TagsAll map[string]*string `json:"tagsAll,omitempty" tf:"tags_all,omitempty"`

	VolumeID *string `json:"volumeId,omitempty" tf:"volume_id,omitempty"`

	VolumeSize *int64 `json:"volumeSize,omitempty" tf:"volume_size,omitempty"`
}

type SnapshotCopyParameters struct {

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Optional
	Encrypted *bool `json:"encrypted,omitempty" tf:"encrypted,omitempty"`

	// +kubebuilder:validation:Optional
	KmsKeyID *string `json:"kmsKeyId,omitempty" tf:"kms_key_id,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +terrajet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`

	// +kubebuilder:validation:Required
	SourceRegion *string `json:"sourceRegion" tf:"source_region,omitempty"`

	// +kubebuilder:validation:Required
	SourceSnapshotID *string `json:"sourceSnapshotId" tf:"source_snapshot_id,omitempty"`

	// +kubebuilder:validation:Optional
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

// SnapshotCopySpec defines the desired state of SnapshotCopy
type SnapshotCopySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     SnapshotCopyParameters `json:"forProvider"`
}

// SnapshotCopyStatus defines the observed state of SnapshotCopy.
type SnapshotCopyStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        SnapshotCopyObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// SnapshotCopy is the Schema for the SnapshotCopys API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tfaws}
type SnapshotCopy struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              SnapshotCopySpec   `json:"spec"`
	Status            SnapshotCopyStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SnapshotCopyList contains a list of SnapshotCopys
type SnapshotCopyList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []SnapshotCopy `json:"items"`
}

// Repository type metadata.
var (
	SnapshotCopyKind             = "SnapshotCopy"
	SnapshotCopyGroupKind        = schema.GroupKind{Group: Group, Kind: SnapshotCopyKind}.String()
	SnapshotCopyKindAPIVersion   = SnapshotCopyKind + "." + GroupVersion.String()
	SnapshotCopyGroupVersionKind = GroupVersion.WithKind(SnapshotCopyKind)
)

func init() {
	SchemeBuilder.Register(&SnapshotCopy{}, &SnapshotCopyList{})
}
