/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

// +kubebuilder:object:generate=true
// +groupName=synthetics.aws.tf.crossplane.io
// +versionName=v1alpha1

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1alpha1 "github.com/crossplane-contrib/provider-tf-aws/apis/synthetics/v1alpha1"
)

type RunConfigObservation struct {
}

type RunConfigParameters struct {
	ActiveTracing *bool `json:"activeTracing,omitempty" tf:"active_tracing"`

	MemoryInMb *int64 `json:"memoryInMb,omitempty" tf:"memory_in_mb"`

	TimeoutInSeconds *int64 `json:"timeoutInSeconds,omitempty" tf:"timeout_in_seconds"`
}

type ScheduleObservation struct {
}

type ScheduleParameters struct {
	DurationInSeconds *int64 `json:"durationInSeconds,omitempty" tf:"duration_in_seconds"`

	Expression string `json:"expression" tf:"expression"`
}

type SyntheticsCanaryObservation struct {
	Arn string `json:"arn" tf:"arn"`

	EngineArn string `json:"engineArn" tf:"engine_arn"`

	SourceLocationArn string `json:"sourceLocationArn" tf:"source_location_arn"`

	Status string `json:"status" tf:"status"`

	Timeline []TimelineObservation `json:"timeline" tf:"timeline"`
}

type SyntheticsCanaryParameters struct {
	ArtifactS3Location string `json:"artifactS3Location" tf:"artifact_s3_location"`

	ExecutionRoleArn string `json:"executionRoleArn" tf:"execution_role_arn"`

	FailureRetentionPeriod *int64 `json:"failureRetentionPeriod,omitempty" tf:"failure_retention_period"`

	Handler string `json:"handler" tf:"handler"`

	Name string `json:"name" tf:"name"`

	RunConfig []RunConfigParameters `json:"runConfig,omitempty" tf:"run_config"`

	RuntimeVersion string `json:"runtimeVersion" tf:"runtime_version"`

	S3Bucket *string `json:"s3Bucket,omitempty" tf:"s3_bucket"`

	S3Key *string `json:"s3Key,omitempty" tf:"s3_key"`

	S3Version *string `json:"s3Version,omitempty" tf:"s3_version"`

	Schedule []ScheduleParameters `json:"schedule" tf:"schedule"`

	StartCanary *bool `json:"startCanary,omitempty" tf:"start_canary"`

	SuccessRetentionPeriod *int64 `json:"successRetentionPeriod,omitempty" tf:"success_retention_period"`

	Tags map[string]string `json:"tags,omitempty" tf:"tags"`

	TagsAll map[string]string `json:"tagsAll,omitempty" tf:"tags_all"`

	VpcConfig []VpcConfigParameters `json:"vpcConfig,omitempty" tf:"vpc_config"`

	ZipFile *string `json:"zipFile,omitempty" tf:"zip_file"`
}

type TimelineObservation struct {
	Created string `json:"created" tf:"created"`

	LastModified string `json:"lastModified" tf:"last_modified"`

	LastStarted string `json:"lastStarted" tf:"last_started"`

	LastStopped string `json:"lastStopped" tf:"last_stopped"`
}

type TimelineParameters struct {
}

type VpcConfigObservation struct {
	VpcId string `json:"vpcId" tf:"vpc_id"`
}

type VpcConfigParameters struct {
	SecurityGroupIds []string `json:"securityGroupIds,omitempty" tf:"security_group_ids"`

	SubnetIds []string `json:"subnetIds,omitempty" tf:"subnet_ids"`
}

// SyntheticsCanarySpec defines the desired state of SyntheticsCanary
type SyntheticsCanarySpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       SyntheticsCanaryParameters `json:"forProvider"`
}

// SyntheticsCanaryStatus defines the observed state of SyntheticsCanary.
type SyntheticsCanaryStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          SyntheticsCanaryObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// SyntheticsCanary is the Schema for the SyntheticsCanarys API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type SyntheticsCanary struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              SyntheticsCanarySpec   `json:"spec"`
	Status            SyntheticsCanaryStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SyntheticsCanaryList contains a list of SyntheticsCanarys
type SyntheticsCanaryList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []SyntheticsCanary `json:"items"`
}

// Repository type metadata.
var (
	SyntheticsCanaryKind             = "SyntheticsCanary"
	SyntheticsCanaryGroupKind        = schema.GroupKind{Group: v1alpha1.Group, Kind: SyntheticsCanaryKind}.String()
	SyntheticsCanaryKindAPIVersion   = SyntheticsCanaryKind + "." + v1alpha1.GroupVersion.String()
	SyntheticsCanaryGroupVersionKind = v1alpha1.GroupVersion.WithKind(SyntheticsCanaryKind)
)

func init() {
	v1alpha1.SchemeBuilder.Register(&SyntheticsCanary{}, &SyntheticsCanaryList{})
}
