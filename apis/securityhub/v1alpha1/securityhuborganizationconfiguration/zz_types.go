/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

// +kubebuilder:object:generate=true
// +groupName=securityhub.aws.tf.crossplane.io
// +versionName=v1alpha1

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1alpha1 "github.com/crossplane-contrib/provider-tf-aws/apis/securityhub/v1alpha1"
)

type SecurityhubOrganizationConfigurationObservation struct {
}

type SecurityhubOrganizationConfigurationParameters struct {
	AutoEnable bool `json:"autoEnable" tf:"auto_enable"`
}

// SecurityhubOrganizationConfigurationSpec defines the desired state of SecurityhubOrganizationConfiguration
type SecurityhubOrganizationConfigurationSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       SecurityhubOrganizationConfigurationParameters `json:"forProvider"`
}

// SecurityhubOrganizationConfigurationStatus defines the observed state of SecurityhubOrganizationConfiguration.
type SecurityhubOrganizationConfigurationStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          SecurityhubOrganizationConfigurationObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// SecurityhubOrganizationConfiguration is the Schema for the SecurityhubOrganizationConfigurations API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type SecurityhubOrganizationConfiguration struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              SecurityhubOrganizationConfigurationSpec   `json:"spec"`
	Status            SecurityhubOrganizationConfigurationStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SecurityhubOrganizationConfigurationList contains a list of SecurityhubOrganizationConfigurations
type SecurityhubOrganizationConfigurationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []SecurityhubOrganizationConfiguration `json:"items"`
}

// Repository type metadata.
var (
	SecurityhubOrganizationConfigurationKind             = "SecurityhubOrganizationConfiguration"
	SecurityhubOrganizationConfigurationGroupKind        = schema.GroupKind{Group: v1alpha1.Group, Kind: SecurityhubOrganizationConfigurationKind}.String()
	SecurityhubOrganizationConfigurationKindAPIVersion   = SecurityhubOrganizationConfigurationKind + "." + v1alpha1.GroupVersion.String()
	SecurityhubOrganizationConfigurationGroupVersionKind = v1alpha1.GroupVersion.WithKind(SecurityhubOrganizationConfigurationKind)
)

func init() {
	v1alpha1.SchemeBuilder.Register(&SecurityhubOrganizationConfiguration{}, &SecurityhubOrganizationConfigurationList{})
}
