/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

// +kubebuilder:object:generate=true
// +groupName=securityhub.aws.tf.crossplane.io
// +versionName=v1alpha1

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1alpha1 "github.com/crossplane-contrib/provider-tf-aws/apis/securityhub/v1alpha1"
)

type SecurityhubStandardsControlObservation struct {
	ControlId string `json:"controlId" tf:"control_id"`

	ControlStatusUpdatedAt string `json:"controlStatusUpdatedAt" tf:"control_status_updated_at"`

	Description string `json:"description" tf:"description"`

	RelatedRequirements []string `json:"relatedRequirements" tf:"related_requirements"`

	RemediationUrl string `json:"remediationUrl" tf:"remediation_url"`

	SeverityRating string `json:"severityRating" tf:"severity_rating"`

	Title string `json:"title" tf:"title"`
}

type SecurityhubStandardsControlParameters struct {
	ControlStatus string `json:"controlStatus" tf:"control_status"`

	DisabledReason *string `json:"disabledReason,omitempty" tf:"disabled_reason"`

	StandardsControlArn string `json:"standardsControlArn" tf:"standards_control_arn"`
}

// SecurityhubStandardsControlSpec defines the desired state of SecurityhubStandardsControl
type SecurityhubStandardsControlSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       SecurityhubStandardsControlParameters `json:"forProvider"`
}

// SecurityhubStandardsControlStatus defines the observed state of SecurityhubStandardsControl.
type SecurityhubStandardsControlStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          SecurityhubStandardsControlObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// SecurityhubStandardsControl is the Schema for the SecurityhubStandardsControls API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type SecurityhubStandardsControl struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              SecurityhubStandardsControlSpec   `json:"spec"`
	Status            SecurityhubStandardsControlStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SecurityhubStandardsControlList contains a list of SecurityhubStandardsControls
type SecurityhubStandardsControlList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []SecurityhubStandardsControl `json:"items"`
}

// Repository type metadata.
var (
	SecurityhubStandardsControlKind             = "SecurityhubStandardsControl"
	SecurityhubStandardsControlGroupKind        = schema.GroupKind{Group: v1alpha1.Group, Kind: SecurityhubStandardsControlKind}.String()
	SecurityhubStandardsControlKindAPIVersion   = SecurityhubStandardsControlKind + "." + v1alpha1.GroupVersion.String()
	SecurityhubStandardsControlGroupVersionKind = v1alpha1.GroupVersion.WithKind(SecurityhubStandardsControlKind)
)

func init() {
	v1alpha1.SchemeBuilder.Register(&SecurityhubStandardsControl{}, &SecurityhubStandardsControlList{})
}
