/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

// +kubebuilder:object:generate=true
// +groupName=securityhub.aws.tf.crossplane.io
// +versionName=v1alpha1

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1alpha1 "github.com/crossplane-contrib/provider-tf-aws/apis/securityhub/v1alpha1"
)

type SecurityhubStandardsSubscriptionObservation struct {
}

type SecurityhubStandardsSubscriptionParameters struct {
	StandardsArn string `json:"standardsArn" tf:"standards_arn"`
}

// SecurityhubStandardsSubscriptionSpec defines the desired state of SecurityhubStandardsSubscription
type SecurityhubStandardsSubscriptionSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       SecurityhubStandardsSubscriptionParameters `json:"forProvider"`
}

// SecurityhubStandardsSubscriptionStatus defines the observed state of SecurityhubStandardsSubscription.
type SecurityhubStandardsSubscriptionStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          SecurityhubStandardsSubscriptionObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// SecurityhubStandardsSubscription is the Schema for the SecurityhubStandardsSubscriptions API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type SecurityhubStandardsSubscription struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              SecurityhubStandardsSubscriptionSpec   `json:"spec"`
	Status            SecurityhubStandardsSubscriptionStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SecurityhubStandardsSubscriptionList contains a list of SecurityhubStandardsSubscriptions
type SecurityhubStandardsSubscriptionList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []SecurityhubStandardsSubscription `json:"items"`
}

// Repository type metadata.
var (
	SecurityhubStandardsSubscriptionKind             = "SecurityhubStandardsSubscription"
	SecurityhubStandardsSubscriptionGroupKind        = schema.GroupKind{Group: v1alpha1.Group, Kind: SecurityhubStandardsSubscriptionKind}.String()
	SecurityhubStandardsSubscriptionKindAPIVersion   = SecurityhubStandardsSubscriptionKind + "." + v1alpha1.GroupVersion.String()
	SecurityhubStandardsSubscriptionGroupVersionKind = v1alpha1.GroupVersion.WithKind(SecurityhubStandardsSubscriptionKind)
)

func init() {
	v1alpha1.SchemeBuilder.Register(&SecurityhubStandardsSubscription{}, &SecurityhubStandardsSubscriptionList{})
}
