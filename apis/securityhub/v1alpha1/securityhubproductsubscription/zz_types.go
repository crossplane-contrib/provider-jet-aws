/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

// +kubebuilder:object:generate=true
// +groupName=securityhub.aws.tf.crossplane.io
// +versionName=v1alpha1

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1alpha1 "github.com/crossplane-contrib/provider-tf-aws/apis/securityhub/v1alpha1"
)

type SecurityhubProductSubscriptionObservation struct {
	Arn string `json:"arn" tf:"arn"`
}

type SecurityhubProductSubscriptionParameters struct {
	ProductArn string `json:"productArn" tf:"product_arn"`
}

// SecurityhubProductSubscriptionSpec defines the desired state of SecurityhubProductSubscription
type SecurityhubProductSubscriptionSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       SecurityhubProductSubscriptionParameters `json:"forProvider"`
}

// SecurityhubProductSubscriptionStatus defines the observed state of SecurityhubProductSubscription.
type SecurityhubProductSubscriptionStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          SecurityhubProductSubscriptionObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// SecurityhubProductSubscription is the Schema for the SecurityhubProductSubscriptions API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type SecurityhubProductSubscription struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              SecurityhubProductSubscriptionSpec   `json:"spec"`
	Status            SecurityhubProductSubscriptionStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SecurityhubProductSubscriptionList contains a list of SecurityhubProductSubscriptions
type SecurityhubProductSubscriptionList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []SecurityhubProductSubscription `json:"items"`
}

// Repository type metadata.
var (
	SecurityhubProductSubscriptionKind             = "SecurityhubProductSubscription"
	SecurityhubProductSubscriptionGroupKind        = schema.GroupKind{Group: v1alpha1.Group, Kind: SecurityhubProductSubscriptionKind}.String()
	SecurityhubProductSubscriptionKindAPIVersion   = SecurityhubProductSubscriptionKind + "." + v1alpha1.GroupVersion.String()
	SecurityhubProductSubscriptionGroupVersionKind = v1alpha1.GroupVersion.WithKind(SecurityhubProductSubscriptionKind)
)

func init() {
	v1alpha1.SchemeBuilder.Register(&SecurityhubProductSubscription{}, &SecurityhubProductSubscriptionList{})
}
