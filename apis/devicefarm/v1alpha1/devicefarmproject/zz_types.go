/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

// +kubebuilder:object:generate=true
// +groupName=devicefarm.aws.tf.crossplane.io
// +versionName=v1alpha1

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1alpha1 "github.com/crossplane-contrib/provider-tf-aws/apis/devicefarm/v1alpha1"
)

type DevicefarmProjectObservation struct {
	Arn string `json:"arn" tf:"arn"`
}

type DevicefarmProjectParameters struct {
	DefaultJobTimeoutMinutes *int64 `json:"defaultJobTimeoutMinutes,omitempty" tf:"default_job_timeout_minutes"`

	Name string `json:"name" tf:"name"`

	Tags map[string]string `json:"tags,omitempty" tf:"tags"`

	TagsAll map[string]string `json:"tagsAll,omitempty" tf:"tags_all"`
}

// DevicefarmProjectSpec defines the desired state of DevicefarmProject
type DevicefarmProjectSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       DevicefarmProjectParameters `json:"forProvider"`
}

// DevicefarmProjectStatus defines the observed state of DevicefarmProject.
type DevicefarmProjectStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          DevicefarmProjectObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// DevicefarmProject is the Schema for the DevicefarmProjects API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type DevicefarmProject struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DevicefarmProjectSpec   `json:"spec"`
	Status            DevicefarmProjectStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DevicefarmProjectList contains a list of DevicefarmProjects
type DevicefarmProjectList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DevicefarmProject `json:"items"`
}

// Repository type metadata.
var (
	DevicefarmProjectKind             = "DevicefarmProject"
	DevicefarmProjectGroupKind        = schema.GroupKind{Group: v1alpha1.Group, Kind: DevicefarmProjectKind}.String()
	DevicefarmProjectKindAPIVersion   = DevicefarmProjectKind + "." + v1alpha1.GroupVersion.String()
	DevicefarmProjectGroupVersionKind = v1alpha1.GroupVersion.WithKind(DevicefarmProjectKind)
)

func init() {
	v1alpha1.SchemeBuilder.Register(&DevicefarmProject{}, &DevicefarmProjectList{})
}
