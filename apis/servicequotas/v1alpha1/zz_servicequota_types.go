/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ServiceQuotaObservation struct {
	Adjustable *bool `json:"adjustable,omitempty" tf:"adjustable,omitempty"`

	Arn *string `json:"arn,omitempty" tf:"arn,omitempty"`

	DefaultValue *float64 `json:"defaultValue,omitempty" tf:"default_value,omitempty"`

	QuotaName *string `json:"quotaName,omitempty" tf:"quota_name,omitempty"`

	RequestID *string `json:"requestId,omitempty" tf:"request_id,omitempty"`

	RequestStatus *string `json:"requestStatus,omitempty" tf:"request_status,omitempty"`

	ServiceName *string `json:"serviceName,omitempty" tf:"service_name,omitempty"`
}

type ServiceQuotaParameters struct {

	// +kubebuilder:validation:Required
	QuotaCode *string `json:"quotaCode" tf:"quota_code,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +terrajet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`

	// +kubebuilder:validation:Required
	ServiceCode *string `json:"serviceCode" tf:"service_code,omitempty"`

	// +kubebuilder:validation:Required
	Value *float64 `json:"value" tf:"value,omitempty"`
}

// ServiceQuotaSpec defines the desired state of ServiceQuota
type ServiceQuotaSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ServiceQuotaParameters `json:"forProvider"`
}

// ServiceQuotaStatus defines the observed state of ServiceQuota.
type ServiceQuotaStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ServiceQuotaObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ServiceQuota is the Schema for the ServiceQuotas API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tfaws}
type ServiceQuota struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ServiceQuotaSpec   `json:"spec"`
	Status            ServiceQuotaStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ServiceQuotaList contains a list of ServiceQuotas
type ServiceQuotaList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ServiceQuota `json:"items"`
}

// Repository type metadata.
var (
	ServiceQuotaKind             = "ServiceQuota"
	ServiceQuotaGroupKind        = schema.GroupKind{Group: Group, Kind: ServiceQuotaKind}.String()
	ServiceQuotaKindAPIVersion   = ServiceQuotaKind + "." + GroupVersion.String()
	ServiceQuotaGroupVersionKind = GroupVersion.WithKind(ServiceQuotaKind)
)

func init() {
	SchemeBuilder.Register(&ServiceQuota{}, &ServiceQuotaList{})
}
