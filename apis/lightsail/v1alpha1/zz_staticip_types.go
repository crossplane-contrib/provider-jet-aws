/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type StaticIpObservation struct {
	Arn *string `json:"arn,omitempty" tf:"arn,omitempty"`

	IPAddress *string `json:"ipAddress,omitempty" tf:"ip_address,omitempty"`

	SupportCode *string `json:"supportCode,omitempty" tf:"support_code,omitempty"`
}

type StaticIpParameters struct {

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +terrajet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`
}

// StaticIpSpec defines the desired state of StaticIp
type StaticIpSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     StaticIpParameters `json:"forProvider"`
}

// StaticIpStatus defines the observed state of StaticIp.
type StaticIpStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        StaticIpObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// StaticIp is the Schema for the StaticIps API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tfaws}
type StaticIp struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              StaticIpSpec   `json:"spec"`
	Status            StaticIpStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// StaticIpList contains a list of StaticIps
type StaticIpList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []StaticIp `json:"items"`
}

// Repository type metadata.
var (
	StaticIpKind             = "StaticIp"
	StaticIpGroupKind        = schema.GroupKind{Group: Group, Kind: StaticIpKind}.String()
	StaticIpKindAPIVersion   = StaticIpKind + "." + GroupVersion.String()
	StaticIpGroupVersionKind = GroupVersion.WithKind(StaticIpKind)
)

func init() {
	SchemeBuilder.Register(&StaticIp{}, &StaticIpList{})
}
