/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

// +kubebuilder:object:generate=true
// +groupName=lightsail.aws.tf.crossplane.io
// +versionName=v1alpha1

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1alpha1 "github.com/crossplane-contrib/provider-tf-aws/apis/lightsail/v1alpha1"
)

type LightsailStaticIpAttachmentObservation struct {
	IpAddress string `json:"ipAddress" tf:"ip_address"`
}

type LightsailStaticIpAttachmentParameters struct {
	InstanceName string `json:"instanceName" tf:"instance_name"`

	StaticIpName string `json:"staticIpName" tf:"static_ip_name"`
}

// LightsailStaticIpAttachmentSpec defines the desired state of LightsailStaticIpAttachment
type LightsailStaticIpAttachmentSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       LightsailStaticIpAttachmentParameters `json:"forProvider"`
}

// LightsailStaticIpAttachmentStatus defines the observed state of LightsailStaticIpAttachment.
type LightsailStaticIpAttachmentStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          LightsailStaticIpAttachmentObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// LightsailStaticIpAttachment is the Schema for the LightsailStaticIpAttachments API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type LightsailStaticIpAttachment struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              LightsailStaticIpAttachmentSpec   `json:"spec"`
	Status            LightsailStaticIpAttachmentStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// LightsailStaticIpAttachmentList contains a list of LightsailStaticIpAttachments
type LightsailStaticIpAttachmentList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []LightsailStaticIpAttachment `json:"items"`
}

// Repository type metadata.
var (
	LightsailStaticIpAttachmentKind             = "LightsailStaticIpAttachment"
	LightsailStaticIpAttachmentGroupKind        = schema.GroupKind{Group: v1alpha1.Group, Kind: LightsailStaticIpAttachmentKind}.String()
	LightsailStaticIpAttachmentKindAPIVersion   = LightsailStaticIpAttachmentKind + "." + v1alpha1.GroupVersion.String()
	LightsailStaticIpAttachmentGroupVersionKind = v1alpha1.GroupVersion.WithKind(LightsailStaticIpAttachmentKind)
)

func init() {
	v1alpha1.SchemeBuilder.Register(&LightsailStaticIpAttachment{}, &LightsailStaticIpAttachmentList{})
}
