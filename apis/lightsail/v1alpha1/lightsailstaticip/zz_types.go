/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

// +kubebuilder:object:generate=true
// +groupName=lightsail.aws.tf.crossplane.io
// +versionName=v1alpha1

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1alpha1 "github.com/crossplane-contrib/provider-tf-aws/apis/lightsail/v1alpha1"
)

type LightsailStaticIpObservation struct {
	Arn string `json:"arn" tf:"arn"`

	IpAddress string `json:"ipAddress" tf:"ip_address"`

	SupportCode string `json:"supportCode" tf:"support_code"`
}

type LightsailStaticIpParameters struct {
	Name string `json:"name" tf:"name"`
}

// LightsailStaticIpSpec defines the desired state of LightsailStaticIp
type LightsailStaticIpSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       LightsailStaticIpParameters `json:"forProvider"`
}

// LightsailStaticIpStatus defines the observed state of LightsailStaticIp.
type LightsailStaticIpStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          LightsailStaticIpObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// LightsailStaticIp is the Schema for the LightsailStaticIps API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type LightsailStaticIp struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              LightsailStaticIpSpec   `json:"spec"`
	Status            LightsailStaticIpStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// LightsailStaticIpList contains a list of LightsailStaticIps
type LightsailStaticIpList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []LightsailStaticIp `json:"items"`
}

// Repository type metadata.
var (
	LightsailStaticIpKind             = "LightsailStaticIp"
	LightsailStaticIpGroupKind        = schema.GroupKind{Group: v1alpha1.Group, Kind: LightsailStaticIpKind}.String()
	LightsailStaticIpKindAPIVersion   = LightsailStaticIpKind + "." + v1alpha1.GroupVersion.String()
	LightsailStaticIpGroupVersionKind = v1alpha1.GroupVersion.WithKind(LightsailStaticIpKind)
)

func init() {
	v1alpha1.SchemeBuilder.Register(&LightsailStaticIp{}, &LightsailStaticIpList{})
}
