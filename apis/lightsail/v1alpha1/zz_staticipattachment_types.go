/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type StaticIpAttachmentObservation struct {
	IPAddress *string `json:"ipAddress,omitempty" tf:"ip_address,omitempty"`
}

type StaticIpAttachmentParameters struct {

	// +kubebuilder:validation:Required
	InstanceName *string `json:"instanceName" tf:"instance_name,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +terrajet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`

	// +kubebuilder:validation:Required
	StaticIPName *string `json:"staticIpName" tf:"static_ip_name,omitempty"`
}

// StaticIpAttachmentSpec defines the desired state of StaticIpAttachment
type StaticIpAttachmentSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     StaticIpAttachmentParameters `json:"forProvider"`
}

// StaticIpAttachmentStatus defines the observed state of StaticIpAttachment.
type StaticIpAttachmentStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        StaticIpAttachmentObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// StaticIpAttachment is the Schema for the StaticIpAttachments API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tfaws}
type StaticIpAttachment struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              StaticIpAttachmentSpec   `json:"spec"`
	Status            StaticIpAttachmentStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// StaticIpAttachmentList contains a list of StaticIpAttachments
type StaticIpAttachmentList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []StaticIpAttachment `json:"items"`
}

// Repository type metadata.
var (
	StaticIpAttachmentKind             = "StaticIpAttachment"
	StaticIpAttachmentGroupKind        = schema.GroupKind{Group: Group, Kind: StaticIpAttachmentKind}.String()
	StaticIpAttachmentKindAPIVersion   = StaticIpAttachmentKind + "." + GroupVersion.String()
	StaticIpAttachmentGroupVersionKind = GroupVersion.WithKind(StaticIpAttachmentKind)
)

func init() {
	SchemeBuilder.Register(&StaticIpAttachment{}, &StaticIpAttachmentList{})
}
