/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

// +kubebuilder:object:generate=true
// +groupName=network.aws.tf.crossplane.io
// +versionName=v1alpha1

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1alpha1 "github.com/crossplane-contrib/provider-tf-aws/apis/network/v1alpha1"
)

type AttachmentObservation struct {
	AttachmentId string `json:"attachmentId" tf:"attachment_id"`
}

type AttachmentParameters struct {
	DeviceIndex int64 `json:"deviceIndex" tf:"device_index"`

	Instance string `json:"instance" tf:"instance"`
}

type NetworkInterfaceObservation struct {
	MacAddress string `json:"macAddress" tf:"mac_address"`

	OutpostArn string `json:"outpostArn" tf:"outpost_arn"`

	PrivateDnsName string `json:"privateDnsName" tf:"private_dns_name"`
}

type NetworkInterfaceParameters struct {
	Attachment []AttachmentParameters `json:"attachment,omitempty" tf:"attachment"`

	Description *string `json:"description,omitempty" tf:"description"`

	InterfaceType *string `json:"interfaceType,omitempty" tf:"interface_type"`

	Ipv6AddressCount *int64 `json:"ipv6AddressCount,omitempty" tf:"ipv6_address_count"`

	Ipv6Addresses []string `json:"ipv6Addresses,omitempty" tf:"ipv6_addresses"`

	PrivateIp *string `json:"privateIp,omitempty" tf:"private_ip"`

	PrivateIps []string `json:"privateIps,omitempty" tf:"private_ips"`

	PrivateIpsCount *int64 `json:"privateIpsCount,omitempty" tf:"private_ips_count"`

	SecurityGroups []string `json:"securityGroups,omitempty" tf:"security_groups"`

	SourceDestCheck *bool `json:"sourceDestCheck,omitempty" tf:"source_dest_check"`

	SubnetId string `json:"subnetId" tf:"subnet_id"`

	Tags map[string]string `json:"tags,omitempty" tf:"tags"`

	TagsAll map[string]string `json:"tagsAll,omitempty" tf:"tags_all"`
}

// NetworkInterfaceSpec defines the desired state of NetworkInterface
type NetworkInterfaceSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       NetworkInterfaceParameters `json:"forProvider"`
}

// NetworkInterfaceStatus defines the observed state of NetworkInterface.
type NetworkInterfaceStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          NetworkInterfaceObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// NetworkInterface is the Schema for the NetworkInterfaces API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type NetworkInterface struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              NetworkInterfaceSpec   `json:"spec"`
	Status            NetworkInterfaceStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// NetworkInterfaceList contains a list of NetworkInterfaces
type NetworkInterfaceList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []NetworkInterface `json:"items"`
}

// Repository type metadata.
var (
	NetworkInterfaceKind             = "NetworkInterface"
	NetworkInterfaceGroupKind        = schema.GroupKind{Group: v1alpha1.Group, Kind: NetworkInterfaceKind}.String()
	NetworkInterfaceKindAPIVersion   = NetworkInterfaceKind + "." + v1alpha1.GroupVersion.String()
	NetworkInterfaceGroupVersionKind = v1alpha1.GroupVersion.WithKind(NetworkInterfaceKind)
)

func init() {
	v1alpha1.SchemeBuilder.Register(&NetworkInterface{}, &NetworkInterfaceList{})
}
