/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

// +kubebuilder:object:generate=true
// +groupName=volume.aws.tf.crossplane.io
// +versionName=v1alpha1

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1alpha1 "github.com/crossplane-contrib/provider-tf-aws/apis/volume/v1alpha1"
)

type VolumeAttachmentObservation struct {
}

type VolumeAttachmentParameters struct {
	DeviceName string `json:"deviceName" tf:"device_name"`

	ForceDetach *bool `json:"forceDetach,omitempty" tf:"force_detach"`

	InstanceId string `json:"instanceId" tf:"instance_id"`

	SkipDestroy *bool `json:"skipDestroy,omitempty" tf:"skip_destroy"`

	VolumeId string `json:"volumeId" tf:"volume_id"`
}

// VolumeAttachmentSpec defines the desired state of VolumeAttachment
type VolumeAttachmentSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       VolumeAttachmentParameters `json:"forProvider"`
}

// VolumeAttachmentStatus defines the observed state of VolumeAttachment.
type VolumeAttachmentStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          VolumeAttachmentObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// VolumeAttachment is the Schema for the VolumeAttachments API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type VolumeAttachment struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              VolumeAttachmentSpec   `json:"spec"`
	Status            VolumeAttachmentStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// VolumeAttachmentList contains a list of VolumeAttachments
type VolumeAttachmentList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []VolumeAttachment `json:"items"`
}

// Repository type metadata.
var (
	VolumeAttachmentKind             = "VolumeAttachment"
	VolumeAttachmentGroupKind        = schema.GroupKind{Group: v1alpha1.Group, Kind: VolumeAttachmentKind}.String()
	VolumeAttachmentKindAPIVersion   = VolumeAttachmentKind + "." + v1alpha1.GroupVersion.String()
	VolumeAttachmentGroupVersionKind = v1alpha1.GroupVersion.WithKind(VolumeAttachmentKind)
)

func init() {
	v1alpha1.SchemeBuilder.Register(&VolumeAttachment{}, &VolumeAttachmentList{})
}
