/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type SagemakerNotebookInstanceLifecycleConfigurationObservation struct {
	ARN string `json:"arn" tf:"arn"`
}

type SagemakerNotebookInstanceLifecycleConfigurationParameters struct {
	Name *string `json:"name,omitempty" tf:"name"`

	OnCreate *string `json:"onCreate,omitempty" tf:"on_create"`

	OnStart *string `json:"onStart,omitempty" tf:"on_start"`
}

// SagemakerNotebookInstanceLifecycleConfigurationSpec defines the desired state of SagemakerNotebookInstanceLifecycleConfiguration
type SagemakerNotebookInstanceLifecycleConfigurationSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       SagemakerNotebookInstanceLifecycleConfigurationParameters `json:"forProvider"`
}

// SagemakerNotebookInstanceLifecycleConfigurationStatus defines the observed state of SagemakerNotebookInstanceLifecycleConfiguration.
type SagemakerNotebookInstanceLifecycleConfigurationStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          SagemakerNotebookInstanceLifecycleConfigurationObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// SagemakerNotebookInstanceLifecycleConfiguration is the Schema for the SagemakerNotebookInstanceLifecycleConfigurations API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tfaws}
type SagemakerNotebookInstanceLifecycleConfiguration struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              SagemakerNotebookInstanceLifecycleConfigurationSpec   `json:"spec"`
	Status            SagemakerNotebookInstanceLifecycleConfigurationStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SagemakerNotebookInstanceLifecycleConfigurationList contains a list of SagemakerNotebookInstanceLifecycleConfigurations
type SagemakerNotebookInstanceLifecycleConfigurationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []SagemakerNotebookInstanceLifecycleConfiguration `json:"items"`
}

// Repository type metadata.
var (
	SagemakerNotebookInstanceLifecycleConfigurationKind             = "SagemakerNotebookInstanceLifecycleConfiguration"
	SagemakerNotebookInstanceLifecycleConfigurationGroupKind        = schema.GroupKind{Group: Group, Kind: SagemakerNotebookInstanceLifecycleConfigurationKind}.String()
	SagemakerNotebookInstanceLifecycleConfigurationKindAPIVersion   = SagemakerNotebookInstanceLifecycleConfigurationKind + "." + GroupVersion.String()
	SagemakerNotebookInstanceLifecycleConfigurationGroupVersionKind = GroupVersion.WithKind(SagemakerNotebookInstanceLifecycleConfigurationKind)
)

func init() {
	SchemeBuilder.Register(&SagemakerNotebookInstanceLifecycleConfiguration{}, &SagemakerNotebookInstanceLifecycleConfigurationList{})
}
