/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type CognitoConfigObservation struct {
}

type CognitoConfigParameters struct {

	// +kubebuilder:validation:Required
	ClientID *string `json:"clientId" tf:"client_id,omitempty"`

	// +kubebuilder:validation:Required
	UserPool *string `json:"userPool" tf:"user_pool,omitempty"`
}

type OidcConfigObservation struct {
}

type OidcConfigParameters struct {

	// +kubebuilder:validation:Required
	AuthorizationEndpoint *string `json:"authorizationEndpoint" tf:"authorization_endpoint,omitempty"`

	// +kubebuilder:validation:Required
	ClientID *string `json:"clientId" tf:"client_id,omitempty"`

	// +kubebuilder:validation:Required
	ClientSecretSecretRef v1.SecretKeySelector `json:"clientSecretSecretRef" tf:"-"`

	// +kubebuilder:validation:Required
	Issuer *string `json:"issuer" tf:"issuer,omitempty"`

	// +kubebuilder:validation:Required
	JwksURI *string `json:"jwksUri" tf:"jwks_uri,omitempty"`

	// +kubebuilder:validation:Required
	LogoutEndpoint *string `json:"logoutEndpoint" tf:"logout_endpoint,omitempty"`

	// +kubebuilder:validation:Required
	TokenEndpoint *string `json:"tokenEndpoint" tf:"token_endpoint,omitempty"`

	// +kubebuilder:validation:Required
	UserInfoEndpoint *string `json:"userInfoEndpoint" tf:"user_info_endpoint,omitempty"`
}

type SourceIPConfigObservation struct {
}

type SourceIPConfigParameters struct {

	// +kubebuilder:validation:Required
	Cidrs []*string `json:"cidrs" tf:"cidrs,omitempty"`
}

type WorkforceObservation struct {
	Arn *string `json:"arn,omitempty" tf:"arn,omitempty"`

	Subdomain *string `json:"subdomain,omitempty" tf:"subdomain,omitempty"`
}

type WorkforceParameters struct {

	// +kubebuilder:validation:Optional
	CognitoConfig []CognitoConfigParameters `json:"cognitoConfig,omitempty" tf:"cognito_config,omitempty"`

	// +kubebuilder:validation:Optional
	OidcConfig []OidcConfigParameters `json:"oidcConfig,omitempty" tf:"oidc_config,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +terrajet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`

	// +kubebuilder:validation:Optional
	SourceIPConfig []SourceIPConfigParameters `json:"sourceIpConfig,omitempty" tf:"source_ip_config,omitempty"`

	// +kubebuilder:validation:Required
	WorkforceName *string `json:"workforceName" tf:"workforce_name,omitempty"`
}

// WorkforceSpec defines the desired state of Workforce
type WorkforceSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     WorkforceParameters `json:"forProvider"`
}

// WorkforceStatus defines the observed state of Workforce.
type WorkforceStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        WorkforceObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Workforce is the Schema for the Workforces API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tfaws}
type Workforce struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              WorkforceSpec   `json:"spec"`
	Status            WorkforceStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// WorkforceList contains a list of Workforces
type WorkforceList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Workforce `json:"items"`
}

// Repository type metadata.
var (
	WorkforceKind             = "Workforce"
	WorkforceGroupKind        = schema.GroupKind{Group: Group, Kind: WorkforceKind}.String()
	WorkforceKindAPIVersion   = WorkforceKind + "." + GroupVersion.String()
	WorkforceGroupVersionKind = GroupVersion.WithKind(WorkforceKind)
)

func init() {
	SchemeBuilder.Register(&Workforce{}, &WorkforceList{})
}
