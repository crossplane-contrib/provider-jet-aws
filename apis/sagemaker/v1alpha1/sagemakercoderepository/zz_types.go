/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

// +kubebuilder:object:generate=true
// +groupName=sagemaker.aws.tf.crossplane.io
// +versionName=v1alpha1

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1alpha1 "github.com/crossplane-contrib/provider-tf-aws/apis/sagemaker/v1alpha1"
)

type GitConfigObservation struct {
}

type GitConfigParameters struct {
	Branch *string `json:"branch,omitempty" tf:"branch"`

	RepositoryUrl string `json:"repositoryUrl" tf:"repository_url"`

	SecretArn *string `json:"secretArn,omitempty" tf:"secret_arn"`
}

type SagemakerCodeRepositoryObservation struct {
	Arn string `json:"arn" tf:"arn"`
}

type SagemakerCodeRepositoryParameters struct {
	CodeRepositoryName string `json:"codeRepositoryName" tf:"code_repository_name"`

	GitConfig []GitConfigParameters `json:"gitConfig" tf:"git_config"`
}

// SagemakerCodeRepositorySpec defines the desired state of SagemakerCodeRepository
type SagemakerCodeRepositorySpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       SagemakerCodeRepositoryParameters `json:"forProvider"`
}

// SagemakerCodeRepositoryStatus defines the observed state of SagemakerCodeRepository.
type SagemakerCodeRepositoryStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          SagemakerCodeRepositoryObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// SagemakerCodeRepository is the Schema for the SagemakerCodeRepositorys API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type SagemakerCodeRepository struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              SagemakerCodeRepositorySpec   `json:"spec"`
	Status            SagemakerCodeRepositoryStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SagemakerCodeRepositoryList contains a list of SagemakerCodeRepositorys
type SagemakerCodeRepositoryList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []SagemakerCodeRepository `json:"items"`
}

// Repository type metadata.
var (
	SagemakerCodeRepositoryKind             = "SagemakerCodeRepository"
	SagemakerCodeRepositoryGroupKind        = schema.GroupKind{Group: v1alpha1.Group, Kind: SagemakerCodeRepositoryKind}.String()
	SagemakerCodeRepositoryKindAPIVersion   = SagemakerCodeRepositoryKind + "." + v1alpha1.GroupVersion.String()
	SagemakerCodeRepositoryGroupVersionKind = v1alpha1.GroupVersion.WithKind(SagemakerCodeRepositoryKind)
)

func init() {
	v1alpha1.SchemeBuilder.Register(&SagemakerCodeRepository{}, &SagemakerCodeRepositoryList{})
}
