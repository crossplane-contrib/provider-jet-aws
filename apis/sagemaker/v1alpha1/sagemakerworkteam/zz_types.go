/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

// +kubebuilder:object:generate=true
// +groupName=sagemaker.aws.tf.crossplane.io
// +versionName=v1alpha1

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1alpha1 "github.com/crossplane-contrib/provider-tf-aws/apis/sagemaker/v1alpha1"
)

type CognitoMemberDefinitionObservation struct {
}

type CognitoMemberDefinitionParameters struct {
	ClientId string `json:"clientId" tf:"client_id"`

	UserGroup string `json:"userGroup" tf:"user_group"`

	UserPool string `json:"userPool" tf:"user_pool"`
}

type MemberDefinitionObservation struct {
}

type MemberDefinitionParameters struct {
	CognitoMemberDefinition []CognitoMemberDefinitionParameters `json:"cognitoMemberDefinition,omitempty" tf:"cognito_member_definition"`

	OidcMemberDefinition []OidcMemberDefinitionParameters `json:"oidcMemberDefinition,omitempty" tf:"oidc_member_definition"`
}

type NotificationConfigurationObservation struct {
}

type NotificationConfigurationParameters struct {
	NotificationTopicArn *string `json:"notificationTopicArn,omitempty" tf:"notification_topic_arn"`
}

type OidcMemberDefinitionObservation struct {
}

type OidcMemberDefinitionParameters struct {
	Groups []string `json:"groups" tf:"groups"`
}

type SagemakerWorkteamObservation struct {
	Arn string `json:"arn" tf:"arn"`

	Subdomain string `json:"subdomain" tf:"subdomain"`
}

type SagemakerWorkteamParameters struct {
	Description string `json:"description" tf:"description"`

	MemberDefinition []MemberDefinitionParameters `json:"memberDefinition" tf:"member_definition"`

	NotificationConfiguration []NotificationConfigurationParameters `json:"notificationConfiguration,omitempty" tf:"notification_configuration"`

	Tags map[string]string `json:"tags,omitempty" tf:"tags"`

	TagsAll map[string]string `json:"tagsAll,omitempty" tf:"tags_all"`

	WorkforceName string `json:"workforceName" tf:"workforce_name"`

	WorkteamName string `json:"workteamName" tf:"workteam_name"`
}

// SagemakerWorkteamSpec defines the desired state of SagemakerWorkteam
type SagemakerWorkteamSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       SagemakerWorkteamParameters `json:"forProvider"`
}

// SagemakerWorkteamStatus defines the observed state of SagemakerWorkteam.
type SagemakerWorkteamStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          SagemakerWorkteamObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// SagemakerWorkteam is the Schema for the SagemakerWorkteams API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type SagemakerWorkteam struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              SagemakerWorkteamSpec   `json:"spec"`
	Status            SagemakerWorkteamStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SagemakerWorkteamList contains a list of SagemakerWorkteams
type SagemakerWorkteamList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []SagemakerWorkteam `json:"items"`
}

// Repository type metadata.
var (
	SagemakerWorkteamKind             = "SagemakerWorkteam"
	SagemakerWorkteamGroupKind        = schema.GroupKind{Group: v1alpha1.Group, Kind: SagemakerWorkteamKind}.String()
	SagemakerWorkteamKindAPIVersion   = SagemakerWorkteamKind + "." + v1alpha1.GroupVersion.String()
	SagemakerWorkteamGroupVersionKind = v1alpha1.GroupVersion.WithKind(SagemakerWorkteamKind)
)

func init() {
	v1alpha1.SchemeBuilder.Register(&SagemakerWorkteam{}, &SagemakerWorkteamList{})
}
