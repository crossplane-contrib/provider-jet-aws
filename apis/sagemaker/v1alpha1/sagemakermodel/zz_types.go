/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

// +kubebuilder:object:generate=true
// +groupName=sagemaker.aws.tf.crossplane.io
// +versionName=v1alpha1

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1alpha1 "github.com/crossplane-contrib/provider-tf-aws/apis/sagemaker/v1alpha1"
)

type ContainerObservation struct {
}

type ContainerParameters struct {
	ContainerHostname *string `json:"containerHostname,omitempty" tf:"container_hostname"`

	Environment map[string]string `json:"environment,omitempty" tf:"environment"`

	Image string `json:"image" tf:"image"`

	ImageConfig []ImageConfigParameters `json:"imageConfig,omitempty" tf:"image_config"`

	Mode *string `json:"mode,omitempty" tf:"mode"`

	ModelDataUrl *string `json:"modelDataUrl,omitempty" tf:"model_data_url"`
}

type ImageConfigObservation struct {
}

type ImageConfigParameters struct {
	RepositoryAccessMode string `json:"repositoryAccessMode" tf:"repository_access_mode"`
}

type InferenceExecutionConfigObservation struct {
}

type InferenceExecutionConfigParameters struct {
	Mode string `json:"mode" tf:"mode"`
}

type PrimaryContainerObservation struct {
}

type PrimaryContainerParameters struct {
	ContainerHostname *string `json:"containerHostname,omitempty" tf:"container_hostname"`

	Environment map[string]string `json:"environment,omitempty" tf:"environment"`

	Image string `json:"image" tf:"image"`

	ImageConfig []ImageConfigParameters `json:"imageConfig,omitempty" tf:"image_config"`

	Mode *string `json:"mode,omitempty" tf:"mode"`

	ModelDataUrl *string `json:"modelDataUrl,omitempty" tf:"model_data_url"`
}

type SagemakerModelObservation struct {
	Arn string `json:"arn" tf:"arn"`
}

type SagemakerModelParameters struct {
	Container []ContainerParameters `json:"container,omitempty" tf:"container"`

	EnableNetworkIsolation *bool `json:"enableNetworkIsolation,omitempty" tf:"enable_network_isolation"`

	ExecutionRoleArn string `json:"executionRoleArn" tf:"execution_role_arn"`

	InferenceExecutionConfig []InferenceExecutionConfigParameters `json:"inferenceExecutionConfig,omitempty" tf:"inference_execution_config"`

	Name *string `json:"name,omitempty" tf:"name"`

	PrimaryContainer []PrimaryContainerParameters `json:"primaryContainer,omitempty" tf:"primary_container"`

	Tags map[string]string `json:"tags,omitempty" tf:"tags"`

	TagsAll map[string]string `json:"tagsAll,omitempty" tf:"tags_all"`

	VpcConfig []VpcConfigParameters `json:"vpcConfig,omitempty" tf:"vpc_config"`
}

type VpcConfigObservation struct {
}

type VpcConfigParameters struct {
	SecurityGroupIds []string `json:"securityGroupIds" tf:"security_group_ids"`

	Subnets []string `json:"subnets" tf:"subnets"`
}

// SagemakerModelSpec defines the desired state of SagemakerModel
type SagemakerModelSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       SagemakerModelParameters `json:"forProvider"`
}

// SagemakerModelStatus defines the observed state of SagemakerModel.
type SagemakerModelStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          SagemakerModelObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// SagemakerModel is the Schema for the SagemakerModels API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type SagemakerModel struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              SagemakerModelSpec   `json:"spec"`
	Status            SagemakerModelStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SagemakerModelList contains a list of SagemakerModels
type SagemakerModelList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []SagemakerModel `json:"items"`
}

// Repository type metadata.
var (
	SagemakerModelKind             = "SagemakerModel"
	SagemakerModelGroupKind        = schema.GroupKind{Group: v1alpha1.Group, Kind: SagemakerModelKind}.String()
	SagemakerModelKindAPIVersion   = SagemakerModelKind + "." + v1alpha1.GroupVersion.String()
	SagemakerModelGroupVersionKind = v1alpha1.GroupVersion.WithKind(SagemakerModelKind)
)

func init() {
	v1alpha1.SchemeBuilder.Register(&SagemakerModel{}, &SagemakerModelList{})
}
