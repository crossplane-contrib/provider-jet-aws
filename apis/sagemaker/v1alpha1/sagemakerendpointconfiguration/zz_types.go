/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

// +kubebuilder:object:generate=true
// +groupName=sagemaker.aws.tf.crossplane.io
// +versionName=v1alpha1

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1alpha1 "github.com/crossplane-contrib/provider-tf-aws/apis/sagemaker/v1alpha1"
)

type CaptureContentTypeHeaderObservation struct {
}

type CaptureContentTypeHeaderParameters struct {
	CsvContentTypes []string `json:"csvContentTypes,omitempty" tf:"csv_content_types"`

	JsonContentTypes []string `json:"jsonContentTypes,omitempty" tf:"json_content_types"`
}

type CaptureOptionsObservation struct {
}

type CaptureOptionsParameters struct {
	CaptureMode string `json:"captureMode" tf:"capture_mode"`
}

type DataCaptureConfigObservation struct {
}

type DataCaptureConfigParameters struct {
	CaptureContentTypeHeader []CaptureContentTypeHeaderParameters `json:"captureContentTypeHeader,omitempty" tf:"capture_content_type_header"`

	CaptureOptions []CaptureOptionsParameters `json:"captureOptions" tf:"capture_options"`

	DestinationS3Uri string `json:"destinationS3Uri" tf:"destination_s3_uri"`

	EnableCapture *bool `json:"enableCapture,omitempty" tf:"enable_capture"`

	InitialSamplingPercentage int64 `json:"initialSamplingPercentage" tf:"initial_sampling_percentage"`

	KmsKeyId *string `json:"kmsKeyId,omitempty" tf:"kms_key_id"`
}

type ProductionVariantsObservation struct {
}

type ProductionVariantsParameters struct {
	AcceleratorType *string `json:"acceleratorType,omitempty" tf:"accelerator_type"`

	InitialInstanceCount int64 `json:"initialInstanceCount" tf:"initial_instance_count"`

	InitialVariantWeight *float64 `json:"initialVariantWeight,omitempty" tf:"initial_variant_weight"`

	InstanceType string `json:"instanceType" tf:"instance_type"`

	ModelName string `json:"modelName" tf:"model_name"`

	VariantName *string `json:"variantName,omitempty" tf:"variant_name"`
}

type SagemakerEndpointConfigurationObservation struct {
	Arn string `json:"arn" tf:"arn"`
}

type SagemakerEndpointConfigurationParameters struct {
	DataCaptureConfig []DataCaptureConfigParameters `json:"dataCaptureConfig,omitempty" tf:"data_capture_config"`

	KmsKeyArn *string `json:"kmsKeyArn,omitempty" tf:"kms_key_arn"`

	Name *string `json:"name,omitempty" tf:"name"`

	ProductionVariants []ProductionVariantsParameters `json:"productionVariants" tf:"production_variants"`

	Tags map[string]string `json:"tags,omitempty" tf:"tags"`

	TagsAll map[string]string `json:"tagsAll,omitempty" tf:"tags_all"`
}

// SagemakerEndpointConfigurationSpec defines the desired state of SagemakerEndpointConfiguration
type SagemakerEndpointConfigurationSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       SagemakerEndpointConfigurationParameters `json:"forProvider"`
}

// SagemakerEndpointConfigurationStatus defines the observed state of SagemakerEndpointConfiguration.
type SagemakerEndpointConfigurationStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          SagemakerEndpointConfigurationObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// SagemakerEndpointConfiguration is the Schema for the SagemakerEndpointConfigurations API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type SagemakerEndpointConfiguration struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              SagemakerEndpointConfigurationSpec   `json:"spec"`
	Status            SagemakerEndpointConfigurationStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SagemakerEndpointConfigurationList contains a list of SagemakerEndpointConfigurations
type SagemakerEndpointConfigurationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []SagemakerEndpointConfiguration `json:"items"`
}

// Repository type metadata.
var (
	SagemakerEndpointConfigurationKind             = "SagemakerEndpointConfiguration"
	SagemakerEndpointConfigurationGroupKind        = schema.GroupKind{Group: v1alpha1.Group, Kind: SagemakerEndpointConfigurationKind}.String()
	SagemakerEndpointConfigurationKindAPIVersion   = SagemakerEndpointConfigurationKind + "." + v1alpha1.GroupVersion.String()
	SagemakerEndpointConfigurationGroupVersionKind = v1alpha1.GroupVersion.WithKind(SagemakerEndpointConfigurationKind)
)

func init() {
	v1alpha1.SchemeBuilder.Register(&SagemakerEndpointConfiguration{}, &SagemakerEndpointConfigurationList{})
}
