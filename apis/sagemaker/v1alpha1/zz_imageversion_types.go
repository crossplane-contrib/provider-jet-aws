/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ImageVersionObservation struct {
	Arn *string `json:"arn,omitempty" tf:"arn,omitempty"`

	ContainerImage *string `json:"containerImage,omitempty" tf:"container_image,omitempty"`

	ImageArn *string `json:"imageArn,omitempty" tf:"image_arn,omitempty"`

	Version *int64 `json:"version,omitempty" tf:"version,omitempty"`
}

type ImageVersionParameters struct {

	// +kubebuilder:validation:Required
	BaseImage *string `json:"baseImage" tf:"base_image,omitempty"`

	// +kubebuilder:validation:Required
	ImageName *string `json:"imageName" tf:"image_name,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +terrajet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`
}

// ImageVersionSpec defines the desired state of ImageVersion
type ImageVersionSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ImageVersionParameters `json:"forProvider"`
}

// ImageVersionStatus defines the observed state of ImageVersion.
type ImageVersionStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ImageVersionObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ImageVersion is the Schema for the ImageVersions API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tfaws}
type ImageVersion struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ImageVersionSpec   `json:"spec"`
	Status            ImageVersionStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ImageVersionList contains a list of ImageVersions
type ImageVersionList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ImageVersion `json:"items"`
}

// Repository type metadata.
var (
	ImageVersionKind             = "ImageVersion"
	ImageVersionGroupKind        = schema.GroupKind{Group: Group, Kind: ImageVersionKind}.String()
	ImageVersionKindAPIVersion   = ImageVersionKind + "." + GroupVersion.String()
	ImageVersionGroupVersionKind = GroupVersion.WithKind(ImageVersionKind)
)

func init() {
	SchemeBuilder.Register(&ImageVersion{}, &ImageVersionList{})
}
