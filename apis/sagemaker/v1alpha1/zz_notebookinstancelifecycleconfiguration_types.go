/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type NotebookInstanceLifecycleConfigurationObservation struct {
	Arn *string `json:"arn,omitempty" tf:"arn,omitempty"`
}

type NotebookInstanceLifecycleConfigurationParameters struct {

	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	OnCreate *string `json:"onCreate,omitempty" tf:"on_create,omitempty"`

	// +kubebuilder:validation:Optional
	OnStart *string `json:"onStart,omitempty" tf:"on_start,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +terrajet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`
}

// NotebookInstanceLifecycleConfigurationSpec defines the desired state of NotebookInstanceLifecycleConfiguration
type NotebookInstanceLifecycleConfigurationSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     NotebookInstanceLifecycleConfigurationParameters `json:"forProvider"`
}

// NotebookInstanceLifecycleConfigurationStatus defines the observed state of NotebookInstanceLifecycleConfiguration.
type NotebookInstanceLifecycleConfigurationStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        NotebookInstanceLifecycleConfigurationObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// NotebookInstanceLifecycleConfiguration is the Schema for the NotebookInstanceLifecycleConfigurations API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tfaws}
type NotebookInstanceLifecycleConfiguration struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              NotebookInstanceLifecycleConfigurationSpec   `json:"spec"`
	Status            NotebookInstanceLifecycleConfigurationStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// NotebookInstanceLifecycleConfigurationList contains a list of NotebookInstanceLifecycleConfigurations
type NotebookInstanceLifecycleConfigurationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []NotebookInstanceLifecycleConfiguration `json:"items"`
}

// Repository type metadata.
var (
	NotebookInstanceLifecycleConfigurationKind             = "NotebookInstanceLifecycleConfiguration"
	NotebookInstanceLifecycleConfigurationGroupKind        = schema.GroupKind{Group: Group, Kind: NotebookInstanceLifecycleConfigurationKind}.String()
	NotebookInstanceLifecycleConfigurationKindAPIVersion   = NotebookInstanceLifecycleConfigurationKind + "." + GroupVersion.String()
	NotebookInstanceLifecycleConfigurationGroupVersionKind = GroupVersion.WithKind(NotebookInstanceLifecycleConfigurationKind)
)

func init() {
	SchemeBuilder.Register(&NotebookInstanceLifecycleConfiguration{}, &NotebookInstanceLifecycleConfigurationList{})
}
