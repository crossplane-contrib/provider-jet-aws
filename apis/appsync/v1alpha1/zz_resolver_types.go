/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type CachingConfigObservation struct {
}

type CachingConfigParameters struct {

	// +kubebuilder:validation:Optional
	CachingKeys []*string `json:"cachingKeys,omitempty" tf:"caching_keys,omitempty"`

	// +kubebuilder:validation:Optional
	TTL *int64 `json:"ttl,omitempty" tf:"ttl,omitempty"`
}

type PipelineConfigObservation struct {
}

type PipelineConfigParameters struct {

	// +kubebuilder:validation:Optional
	Functions []*string `json:"functions,omitempty" tf:"functions,omitempty"`
}

type ResolverObservation struct {
	Arn *string `json:"arn,omitempty" tf:"arn,omitempty"`
}

type ResolverParameters struct {

	// +kubebuilder:validation:Required
	APIID *string `json:"apiId" tf:"api_id,omitempty"`

	// +kubebuilder:validation:Optional
	CachingConfig []CachingConfigParameters `json:"cachingConfig,omitempty" tf:"caching_config,omitempty"`

	// +kubebuilder:validation:Optional
	DataSource *string `json:"dataSource,omitempty" tf:"data_source,omitempty"`

	// +kubebuilder:validation:Required
	Field *string `json:"field" tf:"field,omitempty"`

	// +kubebuilder:validation:Optional
	Kind *string `json:"kind,omitempty" tf:"kind,omitempty"`

	// +kubebuilder:validation:Optional
	PipelineConfig []PipelineConfigParameters `json:"pipelineConfig,omitempty" tf:"pipeline_config,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +terrajet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`

	// +kubebuilder:validation:Optional
	RequestTemplate *string `json:"requestTemplate,omitempty" tf:"request_template,omitempty"`

	// +kubebuilder:validation:Optional
	ResponseTemplate *string `json:"responseTemplate,omitempty" tf:"response_template,omitempty"`

	// +kubebuilder:validation:Required
	Type *string `json:"type" tf:"type,omitempty"`
}

// ResolverSpec defines the desired state of Resolver
type ResolverSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ResolverParameters `json:"forProvider"`
}

// ResolverStatus defines the observed state of Resolver.
type ResolverStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ResolverObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Resolver is the Schema for the Resolvers API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tfaws}
type Resolver struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ResolverSpec   `json:"spec"`
	Status            ResolverStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ResolverList contains a list of Resolvers
type ResolverList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Resolver `json:"items"`
}

// Repository type metadata.
var (
	ResolverKind             = "Resolver"
	ResolverGroupKind        = schema.GroupKind{Group: Group, Kind: ResolverKind}.String()
	ResolverKindAPIVersion   = ResolverKind + "." + GroupVersion.String()
	ResolverGroupVersionKind = GroupVersion.WithKind(ResolverKind)
)

func init() {
	SchemeBuilder.Register(&Resolver{}, &ResolverList{})
}
