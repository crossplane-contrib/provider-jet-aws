/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AdditionalAuthenticationProviderObservation struct {
}

type AdditionalAuthenticationProviderParameters struct {

	// +kubebuilder:validation:Required
	AuthenticationType *string `json:"authenticationType" tf:"authentication_type,omitempty"`

	// +kubebuilder:validation:Optional
	OpenidConnectConfig []OpenidConnectConfigParameters `json:"openidConnectConfig,omitempty" tf:"openid_connect_config,omitempty"`

	// +kubebuilder:validation:Optional
	UserPoolConfig []UserPoolConfigParameters `json:"userPoolConfig,omitempty" tf:"user_pool_config,omitempty"`
}

type GraphqlApiObservation struct {
	Arn *string `json:"arn,omitempty" tf:"arn,omitempty"`

	TagsAll map[string]*string `json:"tagsAll,omitempty" tf:"tags_all,omitempty"`

	Uris map[string]*string `json:"uris,omitempty" tf:"uris,omitempty"`
}

type GraphqlApiOpenidConnectConfigObservation struct {
}

type GraphqlApiOpenidConnectConfigParameters struct {

	// +kubebuilder:validation:Optional
	AuthTTL *int64 `json:"authTtl,omitempty" tf:"auth_ttl,omitempty"`

	// +kubebuilder:validation:Optional
	ClientID *string `json:"clientId,omitempty" tf:"client_id,omitempty"`

	// +kubebuilder:validation:Optional
	IatTTL *int64 `json:"iatTtl,omitempty" tf:"iat_ttl,omitempty"`

	// +kubebuilder:validation:Required
	Issuer *string `json:"issuer" tf:"issuer,omitempty"`
}

type GraphqlApiParameters struct {

	// +kubebuilder:validation:Optional
	AdditionalAuthenticationProvider []AdditionalAuthenticationProviderParameters `json:"additionalAuthenticationProvider,omitempty" tf:"additional_authentication_provider,omitempty"`

	// +kubebuilder:validation:Required
	AuthenticationType *string `json:"authenticationType" tf:"authentication_type,omitempty"`

	// +kubebuilder:validation:Optional
	LogConfig []LogConfigParameters `json:"logConfig,omitempty" tf:"log_config,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	OpenidConnectConfig []GraphqlApiOpenidConnectConfigParameters `json:"openidConnectConfig,omitempty" tf:"openid_connect_config,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +terrajet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`

	// +kubebuilder:validation:Optional
	Schema *string `json:"schema,omitempty" tf:"schema,omitempty"`

	// +kubebuilder:validation:Optional
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// +kubebuilder:validation:Optional
	UserPoolConfig []GraphqlApiUserPoolConfigParameters `json:"userPoolConfig,omitempty" tf:"user_pool_config,omitempty"`

	// +kubebuilder:validation:Optional
	XrayEnabled *bool `json:"xrayEnabled,omitempty" tf:"xray_enabled,omitempty"`
}

type GraphqlApiUserPoolConfigObservation struct {
}

type GraphqlApiUserPoolConfigParameters struct {

	// +kubebuilder:validation:Optional
	AppIDClientRegex *string `json:"appIdClientRegex,omitempty" tf:"app_id_client_regex,omitempty"`

	// +kubebuilder:validation:Optional
	AwsRegion *string `json:"awsRegion,omitempty" tf:"aws_region,omitempty"`

	// +kubebuilder:validation:Required
	DefaultAction *string `json:"defaultAction" tf:"default_action,omitempty"`

	// +kubebuilder:validation:Required
	UserPoolID *string `json:"userPoolId" tf:"user_pool_id,omitempty"`
}

type LogConfigObservation struct {
}

type LogConfigParameters struct {

	// +kubebuilder:validation:Required
	CloudwatchLogsRoleArn *string `json:"cloudwatchLogsRoleArn" tf:"cloudwatch_logs_role_arn,omitempty"`

	// +kubebuilder:validation:Optional
	ExcludeVerboseContent *bool `json:"excludeVerboseContent,omitempty" tf:"exclude_verbose_content,omitempty"`

	// +kubebuilder:validation:Required
	FieldLogLevel *string `json:"fieldLogLevel" tf:"field_log_level,omitempty"`
}

type OpenidConnectConfigObservation struct {
}

type OpenidConnectConfigParameters struct {

	// +kubebuilder:validation:Optional
	AuthTTL *int64 `json:"authTtl,omitempty" tf:"auth_ttl,omitempty"`

	// +kubebuilder:validation:Optional
	ClientID *string `json:"clientId,omitempty" tf:"client_id,omitempty"`

	// +kubebuilder:validation:Optional
	IatTTL *int64 `json:"iatTtl,omitempty" tf:"iat_ttl,omitempty"`

	// +kubebuilder:validation:Required
	Issuer *string `json:"issuer" tf:"issuer,omitempty"`
}

type UserPoolConfigObservation struct {
}

type UserPoolConfigParameters struct {

	// +kubebuilder:validation:Optional
	AppIDClientRegex *string `json:"appIdClientRegex,omitempty" tf:"app_id_client_regex,omitempty"`

	// +kubebuilder:validation:Optional
	AwsRegion *string `json:"awsRegion,omitempty" tf:"aws_region,omitempty"`

	// +kubebuilder:validation:Required
	UserPoolID *string `json:"userPoolId" tf:"user_pool_id,omitempty"`
}

// GraphqlApiSpec defines the desired state of GraphqlApi
type GraphqlApiSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     GraphqlApiParameters `json:"forProvider"`
}

// GraphqlApiStatus defines the observed state of GraphqlApi.
type GraphqlApiStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        GraphqlApiObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// GraphqlApi is the Schema for the GraphqlApis API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tfaws}
type GraphqlApi struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              GraphqlApiSpec   `json:"spec"`
	Status            GraphqlApiStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// GraphqlApiList contains a list of GraphqlApis
type GraphqlApiList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []GraphqlApi `json:"items"`
}

// Repository type metadata.
var (
	GraphqlApiKind             = "GraphqlApi"
	GraphqlApiGroupKind        = schema.GroupKind{Group: Group, Kind: GraphqlApiKind}.String()
	GraphqlApiKindAPIVersion   = GraphqlApiKind + "." + GroupVersion.String()
	GraphqlApiGroupVersionKind = GroupVersion.WithKind(GraphqlApiKind)
)

func init() {
	SchemeBuilder.Register(&GraphqlApi{}, &GraphqlApiList{})
}
