/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

// +kubebuilder:object:generate=true
// +groupName=appsync.aws.tf.crossplane.io
// +versionName=v1alpha1

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1alpha1 "github.com/crossplane-contrib/provider-tf-aws/apis/appsync/v1alpha1"
)

type AppsyncDatasourceObservation struct {
	Arn string `json:"arn" tf:"arn"`
}

type AppsyncDatasourceParameters struct {
	ApiId string `json:"apiId" tf:"api_id"`

	Description *string `json:"description,omitempty" tf:"description"`

	DynamodbConfig []DynamodbConfigParameters `json:"dynamodbConfig,omitempty" tf:"dynamodb_config"`

	ElasticsearchConfig []ElasticsearchConfigParameters `json:"elasticsearchConfig,omitempty" tf:"elasticsearch_config"`

	HttpConfig []HttpConfigParameters `json:"httpConfig,omitempty" tf:"http_config"`

	LambdaConfig []LambdaConfigParameters `json:"lambdaConfig,omitempty" tf:"lambda_config"`

	Name string `json:"name" tf:"name"`

	ServiceRoleArn *string `json:"serviceRoleArn,omitempty" tf:"service_role_arn"`

	Type string `json:"type" tf:"type"`
}

type DynamodbConfigObservation struct {
}

type DynamodbConfigParameters struct {
	Region *string `json:"region,omitempty" tf:"region"`

	TableName string `json:"tableName" tf:"table_name"`

	UseCallerCredentials *bool `json:"useCallerCredentials,omitempty" tf:"use_caller_credentials"`
}

type ElasticsearchConfigObservation struct {
}

type ElasticsearchConfigParameters struct {
	Endpoint string `json:"endpoint" tf:"endpoint"`

	Region *string `json:"region,omitempty" tf:"region"`
}

type HttpConfigObservation struct {
}

type HttpConfigParameters struct {
	Endpoint string `json:"endpoint" tf:"endpoint"`
}

type LambdaConfigObservation struct {
}

type LambdaConfigParameters struct {
	FunctionArn string `json:"functionArn" tf:"function_arn"`
}

// AppsyncDatasourceSpec defines the desired state of AppsyncDatasource
type AppsyncDatasourceSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       AppsyncDatasourceParameters `json:"forProvider"`
}

// AppsyncDatasourceStatus defines the observed state of AppsyncDatasource.
type AppsyncDatasourceStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          AppsyncDatasourceObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// AppsyncDatasource is the Schema for the AppsyncDatasources API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type AppsyncDatasource struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              AppsyncDatasourceSpec   `json:"spec"`
	Status            AppsyncDatasourceStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// AppsyncDatasourceList contains a list of AppsyncDatasources
type AppsyncDatasourceList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []AppsyncDatasource `json:"items"`
}

// Repository type metadata.
var (
	AppsyncDatasourceKind             = "AppsyncDatasource"
	AppsyncDatasourceGroupKind        = schema.GroupKind{Group: v1alpha1.Group, Kind: AppsyncDatasourceKind}.String()
	AppsyncDatasourceKindAPIVersion   = AppsyncDatasourceKind + "." + v1alpha1.GroupVersion.String()
	AppsyncDatasourceGroupVersionKind = v1alpha1.GroupVersion.WithKind(AppsyncDatasourceKind)
)

func init() {
	v1alpha1.SchemeBuilder.Register(&AppsyncDatasource{}, &AppsyncDatasourceList{})
}
