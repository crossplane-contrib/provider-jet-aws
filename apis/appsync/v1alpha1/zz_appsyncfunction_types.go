/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type AppsyncFunctionObservation struct {
	ARN string `json:"arn" tf:"arn"`

	FunctionID string `json:"functionID" tf:"function_id"`
}

type AppsyncFunctionParameters struct {
	APIID string `json:"apiID" tf:"api_id"`

	DataSource string `json:"dataSource" tf:"data_source"`

	Description *string `json:"description,omitempty" tf:"description"`

	FunctionVersion *string `json:"functionVersion,omitempty" tf:"function_version"`

	Name string `json:"name" tf:"name"`

	RequestMappingTemplate string `json:"requestMappingTemplate" tf:"request_mapping_template"`

	ResponseMappingTemplate string `json:"responseMappingTemplate" tf:"response_mapping_template"`
}

// AppsyncFunctionSpec defines the desired state of AppsyncFunction
type AppsyncFunctionSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       AppsyncFunctionParameters `json:"forProvider"`
}

// AppsyncFunctionStatus defines the observed state of AppsyncFunction.
type AppsyncFunctionStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          AppsyncFunctionObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// AppsyncFunction is the Schema for the AppsyncFunctions API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tfaws}
type AppsyncFunction struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              AppsyncFunctionSpec   `json:"spec"`
	Status            AppsyncFunctionStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// AppsyncFunctionList contains a list of AppsyncFunctions
type AppsyncFunctionList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []AppsyncFunction `json:"items"`
}

// Repository type metadata.
var (
	AppsyncFunctionKind             = "AppsyncFunction"
	AppsyncFunctionGroupKind        = schema.GroupKind{Group: Group, Kind: AppsyncFunctionKind}.String()
	AppsyncFunctionKindAPIVersion   = AppsyncFunctionKind + "." + GroupVersion.String()
	AppsyncFunctionGroupVersionKind = GroupVersion.WithKind(AppsyncFunctionKind)
)

func init() {
	SchemeBuilder.Register(&AppsyncFunction{}, &AppsyncFunctionList{})
}
