/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

// +kubebuilder:object:generate=true
// +groupName=appsync.aws.tf.crossplane.io
// +versionName=v1alpha1

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1alpha1 "github.com/crossplane-contrib/provider-tf-aws/apis/appsync/v1alpha1"
)

type AppsyncResolverObservation struct {
	Arn string `json:"arn" tf:"arn"`
}

type AppsyncResolverParameters struct {
	ApiId string `json:"apiId" tf:"api_id"`

	CachingConfig []CachingConfigParameters `json:"cachingConfig,omitempty" tf:"caching_config"`

	DataSource *string `json:"dataSource,omitempty" tf:"data_source"`

	Field string `json:"field" tf:"field"`

	Kind *string `json:"kind,omitempty" tf:"kind"`

	PipelineConfig []PipelineConfigParameters `json:"pipelineConfig,omitempty" tf:"pipeline_config"`

	RequestTemplate *string `json:"requestTemplate,omitempty" tf:"request_template"`

	ResponseTemplate *string `json:"responseTemplate,omitempty" tf:"response_template"`

	Type string `json:"type" tf:"type"`
}

type CachingConfigObservation struct {
}

type CachingConfigParameters struct {
	CachingKeys []string `json:"cachingKeys,omitempty" tf:"caching_keys"`

	Ttl *int64 `json:"ttl,omitempty" tf:"ttl"`
}

type PipelineConfigObservation struct {
}

type PipelineConfigParameters struct {
	Functions []string `json:"functions,omitempty" tf:"functions"`
}

// AppsyncResolverSpec defines the desired state of AppsyncResolver
type AppsyncResolverSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       AppsyncResolverParameters `json:"forProvider"`
}

// AppsyncResolverStatus defines the observed state of AppsyncResolver.
type AppsyncResolverStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          AppsyncResolverObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// AppsyncResolver is the Schema for the AppsyncResolvers API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type AppsyncResolver struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              AppsyncResolverSpec   `json:"spec"`
	Status            AppsyncResolverStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// AppsyncResolverList contains a list of AppsyncResolvers
type AppsyncResolverList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []AppsyncResolver `json:"items"`
}

// Repository type metadata.
var (
	AppsyncResolverKind             = "AppsyncResolver"
	AppsyncResolverGroupKind        = schema.GroupKind{Group: v1alpha1.Group, Kind: AppsyncResolverKind}.String()
	AppsyncResolverKindAPIVersion   = AppsyncResolverKind + "." + v1alpha1.GroupVersion.String()
	AppsyncResolverGroupVersionKind = v1alpha1.GroupVersion.WithKind(AppsyncResolverKind)
)

func init() {
	v1alpha1.SchemeBuilder.Register(&AppsyncResolver{}, &AppsyncResolverList{})
}
