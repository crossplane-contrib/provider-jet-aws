/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AccountAliasObservation struct {
}

type AccountAliasParameters struct {

	// +kubebuilder:validation:Required
	AccountAlias *string `json:"accountAlias" tf:"account_alias,omitempty"`
}

// AccountAliasSpec defines the desired state of AccountAlias
type AccountAliasSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     AccountAliasParameters `json:"forProvider"`
}

// AccountAliasStatus defines the observed state of AccountAlias.
type AccountAliasStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        AccountAliasObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// AccountAlias is the Schema for the AccountAliass API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tfaws}
type AccountAlias struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              AccountAliasSpec   `json:"spec"`
	Status            AccountAliasStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// AccountAliasList contains a list of AccountAliass
type AccountAliasList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []AccountAlias `json:"items"`
}

// Repository type metadata.
var (
	AccountAliasKind             = "AccountAlias"
	AccountAliasGroupKind        = schema.GroupKind{Group: Group, Kind: AccountAliasKind}.String()
	AccountAliasKindAPIVersion   = AccountAliasKind + "." + GroupVersion.String()
	AccountAliasGroupVersionKind = GroupVersion.WithKind(AccountAliasKind)
)

func init() {
	SchemeBuilder.Register(&AccountAlias{}, &AccountAliasList{})
}
