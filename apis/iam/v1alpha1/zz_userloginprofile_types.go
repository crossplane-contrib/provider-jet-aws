/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type UserLoginProfileObservation struct {
	EncryptedPassword *string `json:"encryptedPassword,omitempty" tf:"encrypted_password,omitempty"`

	KeyFingerprint *string `json:"keyFingerprint,omitempty" tf:"key_fingerprint,omitempty"`
}

type UserLoginProfileParameters struct {

	// +kubebuilder:validation:Optional
	PasswordLength *int64 `json:"passwordLength,omitempty" tf:"password_length,omitempty"`

	// +kubebuilder:validation:Optional
	PasswordResetRequired *bool `json:"passwordResetRequired,omitempty" tf:"password_reset_required,omitempty"`

	// +kubebuilder:validation:Required
	PgpKey *string `json:"pgpKey" tf:"pgp_key,omitempty"`

	// +kubebuilder:validation:Required
	User *string `json:"user" tf:"user,omitempty"`
}

// UserLoginProfileSpec defines the desired state of UserLoginProfile
type UserLoginProfileSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     UserLoginProfileParameters `json:"forProvider"`
}

// UserLoginProfileStatus defines the observed state of UserLoginProfile.
type UserLoginProfileStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        UserLoginProfileObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// UserLoginProfile is the Schema for the UserLoginProfiles API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tfaws}
type UserLoginProfile struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              UserLoginProfileSpec   `json:"spec"`
	Status            UserLoginProfileStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// UserLoginProfileList contains a list of UserLoginProfiles
type UserLoginProfileList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []UserLoginProfile `json:"items"`
}

// Repository type metadata.
var (
	UserLoginProfileKind             = "UserLoginProfile"
	UserLoginProfileGroupKind        = schema.GroupKind{Group: Group, Kind: UserLoginProfileKind}.String()
	UserLoginProfileKindAPIVersion   = UserLoginProfileKind + "." + GroupVersion.String()
	UserLoginProfileGroupVersionKind = GroupVersion.WithKind(UserLoginProfileKind)
)

func init() {
	SchemeBuilder.Register(&UserLoginProfile{}, &UserLoginProfileList{})
}
