/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AccountPasswordPolicyObservation struct {
	ExpirePasswords *bool `json:"expirePasswords,omitempty" tf:"expire_passwords,omitempty"`
}

type AccountPasswordPolicyParameters struct {

	// +kubebuilder:validation:Optional
	AllowUsersToChangePassword *bool `json:"allowUsersToChangePassword,omitempty" tf:"allow_users_to_change_password,omitempty"`

	// +kubebuilder:validation:Optional
	HardExpiry *bool `json:"hardExpiry,omitempty" tf:"hard_expiry,omitempty"`

	// +kubebuilder:validation:Optional
	MaxPasswordAge *int64 `json:"maxPasswordAge,omitempty" tf:"max_password_age,omitempty"`

	// +kubebuilder:validation:Optional
	MinimumPasswordLength *int64 `json:"minimumPasswordLength,omitempty" tf:"minimum_password_length,omitempty"`

	// +kubebuilder:validation:Optional
	PasswordReusePrevention *int64 `json:"passwordReusePrevention,omitempty" tf:"password_reuse_prevention,omitempty"`

	// +kubebuilder:validation:Optional
	RequireLowercaseCharacters *bool `json:"requireLowercaseCharacters,omitempty" tf:"require_lowercase_characters,omitempty"`

	// +kubebuilder:validation:Optional
	RequireNumbers *bool `json:"requireNumbers,omitempty" tf:"require_numbers,omitempty"`

	// +kubebuilder:validation:Optional
	RequireSymbols *bool `json:"requireSymbols,omitempty" tf:"require_symbols,omitempty"`

	// +kubebuilder:validation:Optional
	RequireUppercaseCharacters *bool `json:"requireUppercaseCharacters,omitempty" tf:"require_uppercase_characters,omitempty"`
}

// AccountPasswordPolicySpec defines the desired state of AccountPasswordPolicy
type AccountPasswordPolicySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     AccountPasswordPolicyParameters `json:"forProvider"`
}

// AccountPasswordPolicyStatus defines the observed state of AccountPasswordPolicy.
type AccountPasswordPolicyStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        AccountPasswordPolicyObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// AccountPasswordPolicy is the Schema for the AccountPasswordPolicys API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tfaws}
type AccountPasswordPolicy struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              AccountPasswordPolicySpec   `json:"spec"`
	Status            AccountPasswordPolicyStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// AccountPasswordPolicyList contains a list of AccountPasswordPolicys
type AccountPasswordPolicyList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []AccountPasswordPolicy `json:"items"`
}

// Repository type metadata.
var (
	AccountPasswordPolicyKind             = "AccountPasswordPolicy"
	AccountPasswordPolicyGroupKind        = schema.GroupKind{Group: Group, Kind: AccountPasswordPolicyKind}.String()
	AccountPasswordPolicyKindAPIVersion   = AccountPasswordPolicyKind + "." + GroupVersion.String()
	AccountPasswordPolicyGroupVersionKind = GroupVersion.WithKind(AccountPasswordPolicyKind)
)

func init() {
	SchemeBuilder.Register(&AccountPasswordPolicy{}, &AccountPasswordPolicyList{})
}
