/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

// +kubebuilder:object:generate=true
// +groupName=iam.aws.tf.crossplane.io
// +versionName=v1alpha1

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1alpha1 "github.com/crossplane-contrib/provider-tf-aws/apis/iam/v1alpha1"
)

type IamGroupObservation struct {
	Arn string `json:"arn" tf:"arn"`

	UniqueId string `json:"uniqueId" tf:"unique_id"`
}

type IamGroupParameters struct {
	Name string `json:"name" tf:"name"`

	Path *string `json:"path,omitempty" tf:"path"`
}

// IamGroupSpec defines the desired state of IamGroup
type IamGroupSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       IamGroupParameters `json:"forProvider"`
}

// IamGroupStatus defines the observed state of IamGroup.
type IamGroupStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          IamGroupObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// IamGroup is the Schema for the IamGroups API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type IamGroup struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              IamGroupSpec   `json:"spec"`
	Status            IamGroupStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// IamGroupList contains a list of IamGroups
type IamGroupList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []IamGroup `json:"items"`
}

// Repository type metadata.
var (
	IamGroupKind             = "IamGroup"
	IamGroupGroupKind        = schema.GroupKind{Group: v1alpha1.Group, Kind: IamGroupKind}.String()
	IamGroupKindAPIVersion   = IamGroupKind + "." + v1alpha1.GroupVersion.String()
	IamGroupGroupVersionKind = v1alpha1.GroupVersion.WithKind(IamGroupKind)
)

func init() {
	v1alpha1.SchemeBuilder.Register(&IamGroup{}, &IamGroupList{})
}
