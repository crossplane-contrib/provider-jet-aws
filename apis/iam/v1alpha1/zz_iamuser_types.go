/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type IamUserObservation struct {
	ARN string `json:"arn" tf:"arn"`

	UniqueID string `json:"uniqueID" tf:"unique_id"`
}

type IamUserParameters struct {
	ForceDestroy *bool `json:"forceDestroy,omitempty" tf:"force_destroy"`

	Name string `json:"name" tf:"name"`

	Path *string `json:"path,omitempty" tf:"path"`

	PermissionsBoundary *string `json:"permissionsBoundary,omitempty" tf:"permissions_boundary"`

	Tags map[string]string `json:"tags,omitempty" tf:"tags"`

	TagsAll map[string]string `json:"tagsAll,omitempty" tf:"tags_all"`
}

// IamUserSpec defines the desired state of IamUser
type IamUserSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       IamUserParameters `json:"forProvider"`
}

// IamUserStatus defines the observed state of IamUser.
type IamUserStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          IamUserObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// IamUser is the Schema for the IamUsers API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tfaws}
type IamUser struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              IamUserSpec   `json:"spec"`
	Status            IamUserStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// IamUserList contains a list of IamUsers
type IamUserList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []IamUser `json:"items"`
}

// Repository type metadata.
var (
	IamUserKind             = "IamUser"
	IamUserGroupKind        = schema.GroupKind{Group: Group, Kind: IamUserKind}.String()
	IamUserKindAPIVersion   = IamUserKind + "." + GroupVersion.String()
	IamUserGroupVersionKind = GroupVersion.WithKind(IamUserKind)
)

func init() {
	SchemeBuilder.Register(&IamUser{}, &IamUserList{})
}
