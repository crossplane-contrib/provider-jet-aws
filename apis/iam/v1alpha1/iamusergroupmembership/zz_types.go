/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

// +kubebuilder:object:generate=true
// +groupName=iam.aws.tf.crossplane.io
// +versionName=v1alpha1

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1alpha1 "github.com/crossplane-contrib/provider-tf-aws/apis/iam/v1alpha1"
)

type IamUserGroupMembershipObservation struct {
}

type IamUserGroupMembershipParameters struct {
	Groups []string `json:"groups" tf:"groups"`

	User string `json:"user" tf:"user"`
}

// IamUserGroupMembershipSpec defines the desired state of IamUserGroupMembership
type IamUserGroupMembershipSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       IamUserGroupMembershipParameters `json:"forProvider"`
}

// IamUserGroupMembershipStatus defines the observed state of IamUserGroupMembership.
type IamUserGroupMembershipStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          IamUserGroupMembershipObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// IamUserGroupMembership is the Schema for the IamUserGroupMemberships API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type IamUserGroupMembership struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              IamUserGroupMembershipSpec   `json:"spec"`
	Status            IamUserGroupMembershipStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// IamUserGroupMembershipList contains a list of IamUserGroupMemberships
type IamUserGroupMembershipList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []IamUserGroupMembership `json:"items"`
}

// Repository type metadata.
var (
	IamUserGroupMembershipKind             = "IamUserGroupMembership"
	IamUserGroupMembershipGroupKind        = schema.GroupKind{Group: v1alpha1.Group, Kind: IamUserGroupMembershipKind}.String()
	IamUserGroupMembershipKindAPIVersion   = IamUserGroupMembershipKind + "." + v1alpha1.GroupVersion.String()
	IamUserGroupMembershipGroupVersionKind = v1alpha1.GroupVersion.WithKind(IamUserGroupMembershipKind)
)

func init() {
	v1alpha1.SchemeBuilder.Register(&IamUserGroupMembership{}, &IamUserGroupMembershipList{})
}
