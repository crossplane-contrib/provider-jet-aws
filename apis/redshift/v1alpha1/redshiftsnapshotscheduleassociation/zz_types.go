/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

// +kubebuilder:object:generate=true
// +groupName=redshift.aws.tf.crossplane.io
// +versionName=v1alpha1

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1alpha1 "github.com/crossplane-contrib/provider-tf-aws/apis/redshift/v1alpha1"
)

type RedshiftSnapshotScheduleAssociationObservation struct {
}

type RedshiftSnapshotScheduleAssociationParameters struct {
	ClusterIdentifier string `json:"clusterIdentifier" tf:"cluster_identifier"`

	ScheduleIdentifier string `json:"scheduleIdentifier" tf:"schedule_identifier"`
}

// RedshiftSnapshotScheduleAssociationSpec defines the desired state of RedshiftSnapshotScheduleAssociation
type RedshiftSnapshotScheduleAssociationSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       RedshiftSnapshotScheduleAssociationParameters `json:"forProvider"`
}

// RedshiftSnapshotScheduleAssociationStatus defines the observed state of RedshiftSnapshotScheduleAssociation.
type RedshiftSnapshotScheduleAssociationStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          RedshiftSnapshotScheduleAssociationObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// RedshiftSnapshotScheduleAssociation is the Schema for the RedshiftSnapshotScheduleAssociations API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type RedshiftSnapshotScheduleAssociation struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              RedshiftSnapshotScheduleAssociationSpec   `json:"spec"`
	Status            RedshiftSnapshotScheduleAssociationStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// RedshiftSnapshotScheduleAssociationList contains a list of RedshiftSnapshotScheduleAssociations
type RedshiftSnapshotScheduleAssociationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []RedshiftSnapshotScheduleAssociation `json:"items"`
}

// Repository type metadata.
var (
	RedshiftSnapshotScheduleAssociationKind             = "RedshiftSnapshotScheduleAssociation"
	RedshiftSnapshotScheduleAssociationGroupKind        = schema.GroupKind{Group: v1alpha1.Group, Kind: RedshiftSnapshotScheduleAssociationKind}.String()
	RedshiftSnapshotScheduleAssociationKindAPIVersion   = RedshiftSnapshotScheduleAssociationKind + "." + v1alpha1.GroupVersion.String()
	RedshiftSnapshotScheduleAssociationGroupVersionKind = v1alpha1.GroupVersion.WithKind(RedshiftSnapshotScheduleAssociationKind)
)

func init() {
	v1alpha1.SchemeBuilder.Register(&RedshiftSnapshotScheduleAssociation{}, &RedshiftSnapshotScheduleAssociationList{})
}
