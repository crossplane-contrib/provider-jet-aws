/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

// +kubebuilder:object:generate=true
// +groupName=redshift.aws.tf.crossplane.io
// +versionName=v1alpha1

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1alpha1 "github.com/crossplane-contrib/provider-tf-aws/apis/redshift/v1alpha1"
)

type LoggingObservation struct {
}

type LoggingParameters struct {
	BucketName *string `json:"bucketName,omitempty" tf:"bucket_name"`

	Enable bool `json:"enable" tf:"enable"`

	S3KeyPrefix *string `json:"s3KeyPrefix,omitempty" tf:"s3_key_prefix"`
}

type RedshiftClusterObservation struct {
	Arn string `json:"arn" tf:"arn"`

	DnsName string `json:"dnsName" tf:"dns_name"`
}

type RedshiftClusterParameters struct {
	AllowVersionUpgrade *bool `json:"allowVersionUpgrade,omitempty" tf:"allow_version_upgrade"`

	AutomatedSnapshotRetentionPeriod *int64 `json:"automatedSnapshotRetentionPeriod,omitempty" tf:"automated_snapshot_retention_period"`

	AvailabilityZone *string `json:"availabilityZone,omitempty" tf:"availability_zone"`

	ClusterIdentifier string `json:"clusterIdentifier" tf:"cluster_identifier"`

	ClusterParameterGroupName *string `json:"clusterParameterGroupName,omitempty" tf:"cluster_parameter_group_name"`

	ClusterPublicKey *string `json:"clusterPublicKey,omitempty" tf:"cluster_public_key"`

	ClusterRevisionNumber *string `json:"clusterRevisionNumber,omitempty" tf:"cluster_revision_number"`

	ClusterSecurityGroups []string `json:"clusterSecurityGroups,omitempty" tf:"cluster_security_groups"`

	ClusterSubnetGroupName *string `json:"clusterSubnetGroupName,omitempty" tf:"cluster_subnet_group_name"`

	ClusterType *string `json:"clusterType,omitempty" tf:"cluster_type"`

	ClusterVersion *string `json:"clusterVersion,omitempty" tf:"cluster_version"`

	DatabaseName *string `json:"databaseName,omitempty" tf:"database_name"`

	ElasticIp *string `json:"elasticIp,omitempty" tf:"elastic_ip"`

	Encrypted *bool `json:"encrypted,omitempty" tf:"encrypted"`

	Endpoint *string `json:"endpoint,omitempty" tf:"endpoint"`

	EnhancedVpcRouting *bool `json:"enhancedVpcRouting,omitempty" tf:"enhanced_vpc_routing"`

	FinalSnapshotIdentifier *string `json:"finalSnapshotIdentifier,omitempty" tf:"final_snapshot_identifier"`

	IamRoles []string `json:"iamRoles,omitempty" tf:"iam_roles"`

	KmsKeyId *string `json:"kmsKeyId,omitempty" tf:"kms_key_id"`

	Logging []LoggingParameters `json:"logging,omitempty" tf:"logging"`

	MasterPassword *string `json:"masterPassword,omitempty" tf:"master_password"`

	MasterUsername *string `json:"masterUsername,omitempty" tf:"master_username"`

	NodeType string `json:"nodeType" tf:"node_type"`

	NumberOfNodes *int64 `json:"numberOfNodes,omitempty" tf:"number_of_nodes"`

	OwnerAccount *string `json:"ownerAccount,omitempty" tf:"owner_account"`

	Port *int64 `json:"port,omitempty" tf:"port"`

	PreferredMaintenanceWindow *string `json:"preferredMaintenanceWindow,omitempty" tf:"preferred_maintenance_window"`

	PubliclyAccessible *bool `json:"publiclyAccessible,omitempty" tf:"publicly_accessible"`

	SkipFinalSnapshot *bool `json:"skipFinalSnapshot,omitempty" tf:"skip_final_snapshot"`

	SnapshotClusterIdentifier *string `json:"snapshotClusterIdentifier,omitempty" tf:"snapshot_cluster_identifier"`

	SnapshotCopy []SnapshotCopyParameters `json:"snapshotCopy,omitempty" tf:"snapshot_copy"`

	SnapshotIdentifier *string `json:"snapshotIdentifier,omitempty" tf:"snapshot_identifier"`

	Tags map[string]string `json:"tags,omitempty" tf:"tags"`

	TagsAll map[string]string `json:"tagsAll,omitempty" tf:"tags_all"`

	VpcSecurityGroupIds []string `json:"vpcSecurityGroupIds,omitempty" tf:"vpc_security_group_ids"`
}

type SnapshotCopyObservation struct {
}

type SnapshotCopyParameters struct {
	DestinationRegion string `json:"destinationRegion" tf:"destination_region"`

	GrantName *string `json:"grantName,omitempty" tf:"grant_name"`

	RetentionPeriod *int64 `json:"retentionPeriod,omitempty" tf:"retention_period"`
}

// RedshiftClusterSpec defines the desired state of RedshiftCluster
type RedshiftClusterSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       RedshiftClusterParameters `json:"forProvider"`
}

// RedshiftClusterStatus defines the observed state of RedshiftCluster.
type RedshiftClusterStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          RedshiftClusterObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// RedshiftCluster is the Schema for the RedshiftClusters API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type RedshiftCluster struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              RedshiftClusterSpec   `json:"spec"`
	Status            RedshiftClusterStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// RedshiftClusterList contains a list of RedshiftClusters
type RedshiftClusterList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []RedshiftCluster `json:"items"`
}

// Repository type metadata.
var (
	RedshiftClusterKind             = "RedshiftCluster"
	RedshiftClusterGroupKind        = schema.GroupKind{Group: v1alpha1.Group, Kind: RedshiftClusterKind}.String()
	RedshiftClusterKindAPIVersion   = RedshiftClusterKind + "." + v1alpha1.GroupVersion.String()
	RedshiftClusterGroupVersionKind = v1alpha1.GroupVersion.WithKind(RedshiftClusterKind)
)

func init() {
	v1alpha1.SchemeBuilder.Register(&RedshiftCluster{}, &RedshiftClusterList{})
}
