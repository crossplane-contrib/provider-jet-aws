/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

// +kubebuilder:object:generate=true
// +groupName=redshift.aws.tf.crossplane.io
// +versionName=v1alpha1

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1alpha1 "github.com/crossplane-contrib/provider-tf-aws/apis/redshift/v1alpha1"
)

type RedshiftSnapshotCopyGrantObservation struct {
	Arn string `json:"arn" tf:"arn"`
}

type RedshiftSnapshotCopyGrantParameters struct {
	KmsKeyId *string `json:"kmsKeyId,omitempty" tf:"kms_key_id"`

	SnapshotCopyGrantName string `json:"snapshotCopyGrantName" tf:"snapshot_copy_grant_name"`

	Tags map[string]string `json:"tags,omitempty" tf:"tags"`

	TagsAll map[string]string `json:"tagsAll,omitempty" tf:"tags_all"`
}

// RedshiftSnapshotCopyGrantSpec defines the desired state of RedshiftSnapshotCopyGrant
type RedshiftSnapshotCopyGrantSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       RedshiftSnapshotCopyGrantParameters `json:"forProvider"`
}

// RedshiftSnapshotCopyGrantStatus defines the observed state of RedshiftSnapshotCopyGrant.
type RedshiftSnapshotCopyGrantStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          RedshiftSnapshotCopyGrantObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// RedshiftSnapshotCopyGrant is the Schema for the RedshiftSnapshotCopyGrants API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type RedshiftSnapshotCopyGrant struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              RedshiftSnapshotCopyGrantSpec   `json:"spec"`
	Status            RedshiftSnapshotCopyGrantStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// RedshiftSnapshotCopyGrantList contains a list of RedshiftSnapshotCopyGrants
type RedshiftSnapshotCopyGrantList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []RedshiftSnapshotCopyGrant `json:"items"`
}

// Repository type metadata.
var (
	RedshiftSnapshotCopyGrantKind             = "RedshiftSnapshotCopyGrant"
	RedshiftSnapshotCopyGrantGroupKind        = schema.GroupKind{Group: v1alpha1.Group, Kind: RedshiftSnapshotCopyGrantKind}.String()
	RedshiftSnapshotCopyGrantKindAPIVersion   = RedshiftSnapshotCopyGrantKind + "." + v1alpha1.GroupVersion.String()
	RedshiftSnapshotCopyGrantGroupVersionKind = v1alpha1.GroupVersion.WithKind(RedshiftSnapshotCopyGrantKind)
)

func init() {
	v1alpha1.SchemeBuilder.Register(&RedshiftSnapshotCopyGrant{}, &RedshiftSnapshotCopyGrantList{})
}
