/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AbortStatementObservation struct {
}

type AbortStatementParameters struct {

	// +kubebuilder:validation:Required
	Message []MessageParameters `json:"message" tf:"message,omitempty"`

	// +kubebuilder:validation:Optional
	ResponseCard *string `json:"responseCard,omitempty" tf:"response_card,omitempty"`
}

type BotObservation struct {
	Arn *string `json:"arn,omitempty" tf:"arn,omitempty"`

	Checksum *string `json:"checksum,omitempty" tf:"checksum,omitempty"`

	CreatedDate *string `json:"createdDate,omitempty" tf:"created_date,omitempty"`

	FailureReason *string `json:"failureReason,omitempty" tf:"failure_reason,omitempty"`

	LastUpdatedDate *string `json:"lastUpdatedDate,omitempty" tf:"last_updated_date,omitempty"`

	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

type BotParameters struct {

	// +kubebuilder:validation:Required
	AbortStatement []AbortStatementParameters `json:"abortStatement" tf:"abort_statement,omitempty"`

	// +kubebuilder:validation:Required
	ChildDirected *bool `json:"childDirected" tf:"child_directed,omitempty"`

	// +kubebuilder:validation:Optional
	ClarificationPrompt []ClarificationPromptParameters `json:"clarificationPrompt,omitempty" tf:"clarification_prompt,omitempty"`

	// +kubebuilder:validation:Optional
	CreateVersion *bool `json:"createVersion,omitempty" tf:"create_version,omitempty"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Optional
	DetectSentiment *bool `json:"detectSentiment,omitempty" tf:"detect_sentiment,omitempty"`

	// +kubebuilder:validation:Optional
	EnableModelImprovements *bool `json:"enableModelImprovements,omitempty" tf:"enable_model_improvements,omitempty"`

	// +kubebuilder:validation:Optional
	IdleSessionTTLInSeconds *int64 `json:"idleSessionTtlInSeconds,omitempty" tf:"idle_session_ttl_in_seconds,omitempty"`

	// +kubebuilder:validation:Required
	Intent []IntentParameters `json:"intent" tf:"intent,omitempty"`

	// +kubebuilder:validation:Optional
	Locale *string `json:"locale,omitempty" tf:"locale,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	NluIntentConfidenceThreshold *float64 `json:"nluIntentConfidenceThreshold,omitempty" tf:"nlu_intent_confidence_threshold,omitempty"`

	// +kubebuilder:validation:Optional
	ProcessBehavior *string `json:"processBehavior,omitempty" tf:"process_behavior,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +terrajet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`

	// +kubebuilder:validation:Optional
	VoiceID *string `json:"voiceId,omitempty" tf:"voice_id,omitempty"`
}

type ClarificationPromptMessageObservation struct {
}

type ClarificationPromptMessageParameters struct {

	// +kubebuilder:validation:Required
	Content *string `json:"content" tf:"content,omitempty"`

	// +kubebuilder:validation:Required
	ContentType *string `json:"contentType" tf:"content_type,omitempty"`

	// +kubebuilder:validation:Optional
	GroupNumber *int64 `json:"groupNumber,omitempty" tf:"group_number,omitempty"`
}

type ClarificationPromptObservation struct {
}

type ClarificationPromptParameters struct {

	// +kubebuilder:validation:Required
	MaxAttempts *int64 `json:"maxAttempts" tf:"max_attempts,omitempty"`

	// +kubebuilder:validation:Required
	Message []ClarificationPromptMessageParameters `json:"message" tf:"message,omitempty"`

	// +kubebuilder:validation:Optional
	ResponseCard *string `json:"responseCard,omitempty" tf:"response_card,omitempty"`
}

type IntentObservation struct {
}

type IntentParameters struct {

	// +kubebuilder:validation:Required
	IntentName *string `json:"intentName" tf:"intent_name,omitempty"`

	// +kubebuilder:validation:Required
	IntentVersion *string `json:"intentVersion" tf:"intent_version,omitempty"`
}

type MessageObservation struct {
}

type MessageParameters struct {

	// +kubebuilder:validation:Required
	Content *string `json:"content" tf:"content,omitempty"`

	// +kubebuilder:validation:Required
	ContentType *string `json:"contentType" tf:"content_type,omitempty"`

	// +kubebuilder:validation:Optional
	GroupNumber *int64 `json:"groupNumber,omitempty" tf:"group_number,omitempty"`
}

// BotSpec defines the desired state of Bot
type BotSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     BotParameters `json:"forProvider"`
}

// BotStatus defines the observed state of Bot.
type BotStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        BotObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Bot is the Schema for the Bots API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tfaws}
type Bot struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              BotSpec   `json:"spec"`
	Status            BotStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// BotList contains a list of Bots
type BotList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Bot `json:"items"`
}

// Repository type metadata.
var (
	BotKind             = "Bot"
	BotGroupKind        = schema.GroupKind{Group: Group, Kind: BotKind}.String()
	BotKindAPIVersion   = BotKind + "." + GroupVersion.String()
	BotGroupVersionKind = GroupVersion.WithKind(BotKind)
)

func init() {
	SchemeBuilder.Register(&Bot{}, &BotList{})
}
