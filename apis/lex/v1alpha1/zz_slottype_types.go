/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type EnumerationValueObservation struct {
}

type EnumerationValueParameters struct {

	// +kubebuilder:validation:Optional
	Synonyms []*string `json:"synonyms,omitempty" tf:"synonyms,omitempty"`

	// +kubebuilder:validation:Required
	Value *string `json:"value" tf:"value,omitempty"`
}

type SlotTypeObservation struct {
	Checksum *string `json:"checksum,omitempty" tf:"checksum,omitempty"`

	CreatedDate *string `json:"createdDate,omitempty" tf:"created_date,omitempty"`

	LastUpdatedDate *string `json:"lastUpdatedDate,omitempty" tf:"last_updated_date,omitempty"`

	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

type SlotTypeParameters struct {

	// +kubebuilder:validation:Optional
	CreateVersion *bool `json:"createVersion,omitempty" tf:"create_version,omitempty"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Required
	EnumerationValue []EnumerationValueParameters `json:"enumerationValue" tf:"enumeration_value,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +terrajet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`

	// +kubebuilder:validation:Optional
	ValueSelectionStrategy *string `json:"valueSelectionStrategy,omitempty" tf:"value_selection_strategy,omitempty"`
}

// SlotTypeSpec defines the desired state of SlotType
type SlotTypeSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     SlotTypeParameters `json:"forProvider"`
}

// SlotTypeStatus defines the observed state of SlotType.
type SlotTypeStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        SlotTypeObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// SlotType is the Schema for the SlotTypes API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tfaws}
type SlotType struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              SlotTypeSpec   `json:"spec"`
	Status            SlotTypeStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SlotTypeList contains a list of SlotTypes
type SlotTypeList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []SlotType `json:"items"`
}

// Repository type metadata.
var (
	SlotTypeKind             = "SlotType"
	SlotTypeGroupKind        = schema.GroupKind{Group: Group, Kind: SlotTypeKind}.String()
	SlotTypeKindAPIVersion   = SlotTypeKind + "." + GroupVersion.String()
	SlotTypeGroupVersionKind = GroupVersion.WithKind(SlotTypeKind)
)

func init() {
	SchemeBuilder.Register(&SlotType{}, &SlotTypeList{})
}
