/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

// +kubebuilder:object:generate=true
// +groupName=globalaccelerator.aws.tf.crossplane.io
// +versionName=v1alpha1

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1alpha1 "github.com/crossplane-contrib/provider-tf-aws/apis/globalaccelerator/v1alpha1"
)

type AttributesObservation struct {
}

type AttributesParameters struct {
	FlowLogsEnabled *bool `json:"flowLogsEnabled,omitempty" tf:"flow_logs_enabled"`

	FlowLogsS3Bucket *string `json:"flowLogsS3Bucket,omitempty" tf:"flow_logs_s3_bucket"`

	FlowLogsS3Prefix *string `json:"flowLogsS3Prefix,omitempty" tf:"flow_logs_s3_prefix"`
}

type GlobalacceleratorAcceleratorObservation struct {
	DnsName string `json:"dnsName" tf:"dns_name"`

	HostedZoneId string `json:"hostedZoneId" tf:"hosted_zone_id"`

	IpSets []IpSetsObservation `json:"ipSets" tf:"ip_sets"`
}

type GlobalacceleratorAcceleratorParameters struct {
	Attributes []AttributesParameters `json:"attributes,omitempty" tf:"attributes"`

	Enabled *bool `json:"enabled,omitempty" tf:"enabled"`

	IpAddressType *string `json:"ipAddressType,omitempty" tf:"ip_address_type"`

	Name string `json:"name" tf:"name"`

	Tags map[string]string `json:"tags,omitempty" tf:"tags"`

	TagsAll map[string]string `json:"tagsAll,omitempty" tf:"tags_all"`
}

type IpSetsObservation struct {
	IpAddresses []string `json:"ipAddresses" tf:"ip_addresses"`

	IpFamily string `json:"ipFamily" tf:"ip_family"`
}

type IpSetsParameters struct {
}

// GlobalacceleratorAcceleratorSpec defines the desired state of GlobalacceleratorAccelerator
type GlobalacceleratorAcceleratorSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       GlobalacceleratorAcceleratorParameters `json:"forProvider"`
}

// GlobalacceleratorAcceleratorStatus defines the observed state of GlobalacceleratorAccelerator.
type GlobalacceleratorAcceleratorStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          GlobalacceleratorAcceleratorObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// GlobalacceleratorAccelerator is the Schema for the GlobalacceleratorAccelerators API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type GlobalacceleratorAccelerator struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              GlobalacceleratorAcceleratorSpec   `json:"spec"`
	Status            GlobalacceleratorAcceleratorStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// GlobalacceleratorAcceleratorList contains a list of GlobalacceleratorAccelerators
type GlobalacceleratorAcceleratorList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []GlobalacceleratorAccelerator `json:"items"`
}

// Repository type metadata.
var (
	GlobalacceleratorAcceleratorKind             = "GlobalacceleratorAccelerator"
	GlobalacceleratorAcceleratorGroupKind        = schema.GroupKind{Group: v1alpha1.Group, Kind: GlobalacceleratorAcceleratorKind}.String()
	GlobalacceleratorAcceleratorKindAPIVersion   = GlobalacceleratorAcceleratorKind + "." + v1alpha1.GroupVersion.String()
	GlobalacceleratorAcceleratorGroupVersionKind = v1alpha1.GroupVersion.WithKind(GlobalacceleratorAcceleratorKind)
)

func init() {
	v1alpha1.SchemeBuilder.Register(&GlobalacceleratorAccelerator{}, &GlobalacceleratorAcceleratorList{})
}
