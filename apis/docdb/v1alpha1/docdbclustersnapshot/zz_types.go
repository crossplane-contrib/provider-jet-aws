/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

// +kubebuilder:object:generate=true
// +groupName=docdb.aws.tf.crossplane.io
// +versionName=v1alpha1

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1alpha1 "github.com/crossplane-contrib/provider-tf-aws/apis/docdb/v1alpha1"
)

type DocdbClusterSnapshotObservation struct {
	AvailabilityZones []string `json:"availabilityZones" tf:"availability_zones"`

	DbClusterSnapshotArn string `json:"dbClusterSnapshotArn" tf:"db_cluster_snapshot_arn"`

	Engine string `json:"engine" tf:"engine"`

	EngineVersion string `json:"engineVersion" tf:"engine_version"`

	KmsKeyId string `json:"kmsKeyId" tf:"kms_key_id"`

	Port int64 `json:"port" tf:"port"`

	SnapshotType string `json:"snapshotType" tf:"snapshot_type"`

	SourceDbClusterSnapshotArn string `json:"sourceDbClusterSnapshotArn" tf:"source_db_cluster_snapshot_arn"`

	Status string `json:"status" tf:"status"`

	StorageEncrypted bool `json:"storageEncrypted" tf:"storage_encrypted"`

	VpcId string `json:"vpcId" tf:"vpc_id"`
}

type DocdbClusterSnapshotParameters struct {
	DbClusterIdentifier string `json:"dbClusterIdentifier" tf:"db_cluster_identifier"`

	DbClusterSnapshotIdentifier string `json:"dbClusterSnapshotIdentifier" tf:"db_cluster_snapshot_identifier"`
}

// DocdbClusterSnapshotSpec defines the desired state of DocdbClusterSnapshot
type DocdbClusterSnapshotSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       DocdbClusterSnapshotParameters `json:"forProvider"`
}

// DocdbClusterSnapshotStatus defines the observed state of DocdbClusterSnapshot.
type DocdbClusterSnapshotStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          DocdbClusterSnapshotObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// DocdbClusterSnapshot is the Schema for the DocdbClusterSnapshots API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type DocdbClusterSnapshot struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DocdbClusterSnapshotSpec   `json:"spec"`
	Status            DocdbClusterSnapshotStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DocdbClusterSnapshotList contains a list of DocdbClusterSnapshots
type DocdbClusterSnapshotList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DocdbClusterSnapshot `json:"items"`
}

// Repository type metadata.
var (
	DocdbClusterSnapshotKind             = "DocdbClusterSnapshot"
	DocdbClusterSnapshotGroupKind        = schema.GroupKind{Group: v1alpha1.Group, Kind: DocdbClusterSnapshotKind}.String()
	DocdbClusterSnapshotKindAPIVersion   = DocdbClusterSnapshotKind + "." + v1alpha1.GroupVersion.String()
	DocdbClusterSnapshotGroupVersionKind = v1alpha1.GroupVersion.WithKind(DocdbClusterSnapshotKind)
)

func init() {
	v1alpha1.SchemeBuilder.Register(&DocdbClusterSnapshot{}, &DocdbClusterSnapshotList{})
}
