/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ThreatintelsetObservation struct {
	Arn *string `json:"arn,omitempty" tf:"arn,omitempty"`

	TagsAll map[string]*string `json:"tagsAll,omitempty" tf:"tags_all,omitempty"`
}

type ThreatintelsetParameters struct {

	// +kubebuilder:validation:Required
	Activate *bool `json:"activate" tf:"activate,omitempty"`

	// +kubebuilder:validation:Required
	DetectorID *string `json:"detectorId" tf:"detector_id,omitempty"`

	// +kubebuilder:validation:Required
	Format *string `json:"format" tf:"format,omitempty"`

	// +kubebuilder:validation:Required
	Location *string `json:"location" tf:"location,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +terrajet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`

	// +kubebuilder:validation:Optional
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

// ThreatintelsetSpec defines the desired state of Threatintelset
type ThreatintelsetSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ThreatintelsetParameters `json:"forProvider"`
}

// ThreatintelsetStatus defines the observed state of Threatintelset.
type ThreatintelsetStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ThreatintelsetObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Threatintelset is the Schema for the Threatintelsets API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tfaws}
type Threatintelset struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ThreatintelsetSpec   `json:"spec"`
	Status            ThreatintelsetStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ThreatintelsetList contains a list of Threatintelsets
type ThreatintelsetList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Threatintelset `json:"items"`
}

// Repository type metadata.
var (
	ThreatintelsetKind             = "Threatintelset"
	ThreatintelsetGroupKind        = schema.GroupKind{Group: Group, Kind: ThreatintelsetKind}.String()
	ThreatintelsetKindAPIVersion   = ThreatintelsetKind + "." + GroupVersion.String()
	ThreatintelsetGroupVersionKind = GroupVersion.WithKind(ThreatintelsetKind)
)

func init() {
	SchemeBuilder.Register(&Threatintelset{}, &ThreatintelsetList{})
}
