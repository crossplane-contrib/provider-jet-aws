/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

// +kubebuilder:object:generate=true
// +groupName=guardduty.aws.tf.crossplane.io
// +versionName=v1alpha1

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1alpha1 "github.com/crossplane-contrib/provider-tf-aws/apis/guardduty/v1alpha1"
)

type CriterionObservation struct {
}

type CriterionParameters struct {
	Equals []string `json:"equals,omitempty" tf:"equals"`

	Field string `json:"field" tf:"field"`

	GreaterThan *string `json:"greaterThan,omitempty" tf:"greater_than"`

	GreaterThanOrEqual *string `json:"greaterThanOrEqual,omitempty" tf:"greater_than_or_equal"`

	LessThan *string `json:"lessThan,omitempty" tf:"less_than"`

	LessThanOrEqual *string `json:"lessThanOrEqual,omitempty" tf:"less_than_or_equal"`

	NotEquals []string `json:"notEquals,omitempty" tf:"not_equals"`
}

type FindingCriteriaObservation struct {
}

type FindingCriteriaParameters struct {
	Criterion []CriterionParameters `json:"criterion" tf:"criterion"`
}

type GuarddutyFilterObservation struct {
	Arn string `json:"arn" tf:"arn"`
}

type GuarddutyFilterParameters struct {
	Action string `json:"action" tf:"action"`

	Description *string `json:"description,omitempty" tf:"description"`

	DetectorId string `json:"detectorId" tf:"detector_id"`

	FindingCriteria []FindingCriteriaParameters `json:"findingCriteria" tf:"finding_criteria"`

	Name string `json:"name" tf:"name"`

	Rank int64 `json:"rank" tf:"rank"`

	Tags map[string]string `json:"tags,omitempty" tf:"tags"`

	TagsAll map[string]string `json:"tagsAll,omitempty" tf:"tags_all"`
}

// GuarddutyFilterSpec defines the desired state of GuarddutyFilter
type GuarddutyFilterSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       GuarddutyFilterParameters `json:"forProvider"`
}

// GuarddutyFilterStatus defines the observed state of GuarddutyFilter.
type GuarddutyFilterStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          GuarddutyFilterObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// GuarddutyFilter is the Schema for the GuarddutyFilters API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type GuarddutyFilter struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              GuarddutyFilterSpec   `json:"spec"`
	Status            GuarddutyFilterStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// GuarddutyFilterList contains a list of GuarddutyFilters
type GuarddutyFilterList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []GuarddutyFilter `json:"items"`
}

// Repository type metadata.
var (
	GuarddutyFilterKind             = "GuarddutyFilter"
	GuarddutyFilterGroupKind        = schema.GroupKind{Group: v1alpha1.Group, Kind: GuarddutyFilterKind}.String()
	GuarddutyFilterKindAPIVersion   = GuarddutyFilterKind + "." + v1alpha1.GroupVersion.String()
	GuarddutyFilterGroupVersionKind = v1alpha1.GroupVersion.WithKind(GuarddutyFilterKind)
)

func init() {
	v1alpha1.SchemeBuilder.Register(&GuarddutyFilter{}, &GuarddutyFilterList{})
}
