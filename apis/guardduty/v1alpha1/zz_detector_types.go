/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type DatasourcesObservation struct {
}

type DatasourcesParameters struct {

	// +kubebuilder:validation:Optional
	S3Logs []S3LogsParameters `json:"s3Logs,omitempty" tf:"s3_logs,omitempty"`
}

type DetectorObservation struct {
	AccountID *string `json:"accountId,omitempty" tf:"account_id,omitempty"`

	Arn *string `json:"arn,omitempty" tf:"arn,omitempty"`

	TagsAll map[string]*string `json:"tagsAll,omitempty" tf:"tags_all,omitempty"`
}

type DetectorParameters struct {

	// +kubebuilder:validation:Optional
	Datasources []DatasourcesParameters `json:"datasources,omitempty" tf:"datasources,omitempty"`

	// +kubebuilder:validation:Optional
	Enable *bool `json:"enable,omitempty" tf:"enable,omitempty"`

	// +kubebuilder:validation:Optional
	FindingPublishingFrequency *string `json:"findingPublishingFrequency,omitempty" tf:"finding_publishing_frequency,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +terrajet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`

	// +kubebuilder:validation:Optional
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

type S3LogsObservation struct {
}

type S3LogsParameters struct {

	// +kubebuilder:validation:Required
	Enable *bool `json:"enable" tf:"enable,omitempty"`
}

// DetectorSpec defines the desired state of Detector
type DetectorSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     DetectorParameters `json:"forProvider"`
}

// DetectorStatus defines the observed state of Detector.
type DetectorStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        DetectorObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Detector is the Schema for the Detectors API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tfaws}
type Detector struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DetectorSpec   `json:"spec"`
	Status            DetectorStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DetectorList contains a list of Detectors
type DetectorList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Detector `json:"items"`
}

// Repository type metadata.
var (
	DetectorKind             = "Detector"
	DetectorGroupKind        = schema.GroupKind{Group: Group, Kind: DetectorKind}.String()
	DetectorKindAPIVersion   = DetectorKind + "." + GroupVersion.String()
	DetectorGroupVersionKind = GroupVersion.WithKind(DetectorKind)
)

func init() {
	SchemeBuilder.Register(&Detector{}, &DetectorList{})
}
