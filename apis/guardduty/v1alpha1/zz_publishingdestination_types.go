/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type PublishingDestinationObservation struct {
}

type PublishingDestinationParameters struct {

	// +kubebuilder:validation:Required
	DestinationArn *string `json:"destinationArn" tf:"destination_arn,omitempty"`

	// +kubebuilder:validation:Optional
	DestinationType *string `json:"destinationType,omitempty" tf:"destination_type,omitempty"`

	// +kubebuilder:validation:Required
	DetectorID *string `json:"detectorId" tf:"detector_id,omitempty"`

	// +kubebuilder:validation:Required
	KmsKeyArn *string `json:"kmsKeyArn" tf:"kms_key_arn,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +terrajet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`
}

// PublishingDestinationSpec defines the desired state of PublishingDestination
type PublishingDestinationSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     PublishingDestinationParameters `json:"forProvider"`
}

// PublishingDestinationStatus defines the observed state of PublishingDestination.
type PublishingDestinationStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        PublishingDestinationObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// PublishingDestination is the Schema for the PublishingDestinations API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tfaws}
type PublishingDestination struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              PublishingDestinationSpec   `json:"spec"`
	Status            PublishingDestinationStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// PublishingDestinationList contains a list of PublishingDestinations
type PublishingDestinationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []PublishingDestination `json:"items"`
}

// Repository type metadata.
var (
	PublishingDestinationKind             = "PublishingDestination"
	PublishingDestinationGroupKind        = schema.GroupKind{Group: Group, Kind: PublishingDestinationKind}.String()
	PublishingDestinationKindAPIVersion   = PublishingDestinationKind + "." + GroupVersion.String()
	PublishingDestinationGroupVersionKind = GroupVersion.WithKind(PublishingDestinationKind)
)

func init() {
	SchemeBuilder.Register(&PublishingDestination{}, &PublishingDestinationList{})
}
