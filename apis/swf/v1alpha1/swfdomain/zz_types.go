/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

// +kubebuilder:object:generate=true
// +groupName=swf.aws.tf.crossplane.io
// +versionName=v1alpha1

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1alpha1 "github.com/crossplane-contrib/provider-tf-aws/apis/swf/v1alpha1"
)

type SwfDomainObservation struct {
	Arn string `json:"arn" tf:"arn"`
}

type SwfDomainParameters struct {
	Description *string `json:"description,omitempty" tf:"description"`

	Name *string `json:"name,omitempty" tf:"name"`

	NamePrefix *string `json:"namePrefix,omitempty" tf:"name_prefix"`

	Tags map[string]string `json:"tags,omitempty" tf:"tags"`

	TagsAll map[string]string `json:"tagsAll,omitempty" tf:"tags_all"`

	WorkflowExecutionRetentionPeriodInDays string `json:"workflowExecutionRetentionPeriodInDays" tf:"workflow_execution_retention_period_in_days"`
}

// SwfDomainSpec defines the desired state of SwfDomain
type SwfDomainSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       SwfDomainParameters `json:"forProvider"`
}

// SwfDomainStatus defines the observed state of SwfDomain.
type SwfDomainStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          SwfDomainObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// SwfDomain is the Schema for the SwfDomains API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type SwfDomain struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              SwfDomainSpec   `json:"spec"`
	Status            SwfDomainStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SwfDomainList contains a list of SwfDomains
type SwfDomainList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []SwfDomain `json:"items"`
}

// Repository type metadata.
var (
	SwfDomainKind             = "SwfDomain"
	SwfDomainGroupKind        = schema.GroupKind{Group: v1alpha1.Group, Kind: SwfDomainKind}.String()
	SwfDomainKindAPIVersion   = SwfDomainKind + "." + v1alpha1.GroupVersion.String()
	SwfDomainGroupVersionKind = v1alpha1.GroupVersion.WithKind(SwfDomainKind)
)

func init() {
	v1alpha1.SchemeBuilder.Register(&SwfDomain{}, &SwfDomainList{})
}
