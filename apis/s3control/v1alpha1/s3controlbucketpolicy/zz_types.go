/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

// +kubebuilder:object:generate=true
// +groupName=s3control.aws.tf.crossplane.io
// +versionName=v1alpha1

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1alpha1 "github.com/crossplane-contrib/provider-tf-aws/apis/s3control/v1alpha1"
)

type S3ControlBucketPolicyObservation struct {
}

type S3ControlBucketPolicyParameters struct {
	Bucket string `json:"bucket" tf:"bucket"`

	Policy string `json:"policy" tf:"policy"`
}

// S3ControlBucketPolicySpec defines the desired state of S3ControlBucketPolicy
type S3ControlBucketPolicySpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       S3ControlBucketPolicyParameters `json:"forProvider"`
}

// S3ControlBucketPolicyStatus defines the observed state of S3ControlBucketPolicy.
type S3ControlBucketPolicyStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          S3ControlBucketPolicyObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// S3ControlBucketPolicy is the Schema for the S3ControlBucketPolicys API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type S3ControlBucketPolicy struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              S3ControlBucketPolicySpec   `json:"spec"`
	Status            S3ControlBucketPolicyStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// S3ControlBucketPolicyList contains a list of S3ControlBucketPolicys
type S3ControlBucketPolicyList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []S3ControlBucketPolicy `json:"items"`
}

// Repository type metadata.
var (
	S3ControlBucketPolicyKind             = "S3ControlBucketPolicy"
	S3ControlBucketPolicyGroupKind        = schema.GroupKind{Group: v1alpha1.Group, Kind: S3ControlBucketPolicyKind}.String()
	S3ControlBucketPolicyKindAPIVersion   = S3ControlBucketPolicyKind + "." + v1alpha1.GroupVersion.String()
	S3ControlBucketPolicyGroupVersionKind = v1alpha1.GroupVersion.WithKind(S3ControlBucketPolicyKind)
)

func init() {
	v1alpha1.SchemeBuilder.Register(&S3ControlBucketPolicy{}, &S3ControlBucketPolicyList{})
}
