/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type FileSystemPolicyObservation struct {
}

type FileSystemPolicyParameters struct {

	// +kubebuilder:validation:Required
	FileSystemID *string `json:"fileSystemId" tf:"file_system_id,omitempty"`

	// +kubebuilder:validation:Required
	Policy *string `json:"policy" tf:"policy,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +terrajet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`
}

// FileSystemPolicySpec defines the desired state of FileSystemPolicy
type FileSystemPolicySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     FileSystemPolicyParameters `json:"forProvider"`
}

// FileSystemPolicyStatus defines the observed state of FileSystemPolicy.
type FileSystemPolicyStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        FileSystemPolicyObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// FileSystemPolicy is the Schema for the FileSystemPolicys API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tfaws}
type FileSystemPolicy struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              FileSystemPolicySpec   `json:"spec"`
	Status            FileSystemPolicyStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// FileSystemPolicyList contains a list of FileSystemPolicys
type FileSystemPolicyList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []FileSystemPolicy `json:"items"`
}

// Repository type metadata.
var (
	FileSystemPolicyKind             = "FileSystemPolicy"
	FileSystemPolicyGroupKind        = schema.GroupKind{Group: Group, Kind: FileSystemPolicyKind}.String()
	FileSystemPolicyKindAPIVersion   = FileSystemPolicyKind + "." + GroupVersion.String()
	FileSystemPolicyGroupVersionKind = GroupVersion.WithKind(FileSystemPolicyKind)
)

func init() {
	SchemeBuilder.Register(&FileSystemPolicy{}, &FileSystemPolicyList{})
}
