/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type SelectionObservation struct {
}

type SelectionParameters struct {

	// +kubebuilder:validation:Required
	IamRoleArn *string `json:"iamRoleArn" tf:"iam_role_arn,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Required
	PlanID *string `json:"planId" tf:"plan_id,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +terrajet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`

	// +kubebuilder:validation:Optional
	Resources []*string `json:"resources,omitempty" tf:"resources,omitempty"`

	// +kubebuilder:validation:Optional
	SelectionTag []SelectionTagParameters `json:"selectionTag,omitempty" tf:"selection_tag,omitempty"`
}

type SelectionTagObservation struct {
}

type SelectionTagParameters struct {

	// +kubebuilder:validation:Required
	Key *string `json:"key" tf:"key,omitempty"`

	// +kubebuilder:validation:Required
	Type *string `json:"type" tf:"type,omitempty"`

	// +kubebuilder:validation:Required
	Value *string `json:"value" tf:"value,omitempty"`
}

// SelectionSpec defines the desired state of Selection
type SelectionSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     SelectionParameters `json:"forProvider"`
}

// SelectionStatus defines the observed state of Selection.
type SelectionStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        SelectionObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Selection is the Schema for the Selections API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tfaws}
type Selection struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              SelectionSpec   `json:"spec"`
	Status            SelectionStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SelectionList contains a list of Selections
type SelectionList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Selection `json:"items"`
}

// Repository type metadata.
var (
	SelectionKind             = "Selection"
	SelectionGroupKind        = schema.GroupKind{Group: Group, Kind: SelectionKind}.String()
	SelectionKindAPIVersion   = SelectionKind + "." + GroupVersion.String()
	SelectionGroupVersionKind = GroupVersion.WithKind(SelectionKind)
)

func init() {
	SchemeBuilder.Register(&Selection{}, &SelectionList{})
}
