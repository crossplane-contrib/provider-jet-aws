/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AdvancedBackupSettingObservation struct {
}

type AdvancedBackupSettingParameters struct {

	// +kubebuilder:validation:Required
	BackupOptions map[string]*string `json:"backupOptions" tf:"backup_options,omitempty"`

	// +kubebuilder:validation:Required
	ResourceType *string `json:"resourceType" tf:"resource_type,omitempty"`
}

type CopyActionObservation struct {
}

type CopyActionParameters struct {

	// +kubebuilder:validation:Required
	DestinationVaultArn *string `json:"destinationVaultArn" tf:"destination_vault_arn,omitempty"`

	// +kubebuilder:validation:Optional
	Lifecycle []LifecycleParameters `json:"lifecycle,omitempty" tf:"lifecycle,omitempty"`
}

type LifecycleObservation struct {
}

type LifecycleParameters struct {

	// +kubebuilder:validation:Optional
	ColdStorageAfter *int64 `json:"coldStorageAfter,omitempty" tf:"cold_storage_after,omitempty"`

	// +kubebuilder:validation:Optional
	DeleteAfter *int64 `json:"deleteAfter,omitempty" tf:"delete_after,omitempty"`
}

type PlanObservation struct {
	Arn *string `json:"arn,omitempty" tf:"arn,omitempty"`

	TagsAll map[string]*string `json:"tagsAll,omitempty" tf:"tags_all,omitempty"`

	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

type PlanParameters struct {

	// +kubebuilder:validation:Optional
	AdvancedBackupSetting []AdvancedBackupSettingParameters `json:"advancedBackupSetting,omitempty" tf:"advanced_backup_setting,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +terrajet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`

	// +kubebuilder:validation:Required
	Rule []RuleParameters `json:"rule" tf:"rule,omitempty"`

	// +kubebuilder:validation:Optional
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

type RuleLifecycleObservation struct {
}

type RuleLifecycleParameters struct {

	// +kubebuilder:validation:Optional
	ColdStorageAfter *int64 `json:"coldStorageAfter,omitempty" tf:"cold_storage_after,omitempty"`

	// +kubebuilder:validation:Optional
	DeleteAfter *int64 `json:"deleteAfter,omitempty" tf:"delete_after,omitempty"`
}

type RuleObservation struct {
}

type RuleParameters struct {

	// +kubebuilder:validation:Optional
	CompletionWindow *int64 `json:"completionWindow,omitempty" tf:"completion_window,omitempty"`

	// +kubebuilder:validation:Optional
	CopyAction []CopyActionParameters `json:"copyAction,omitempty" tf:"copy_action,omitempty"`

	// +kubebuilder:validation:Optional
	EnableContinuousBackup *bool `json:"enableContinuousBackup,omitempty" tf:"enable_continuous_backup,omitempty"`

	// +kubebuilder:validation:Optional
	Lifecycle []RuleLifecycleParameters `json:"lifecycle,omitempty" tf:"lifecycle,omitempty"`

	// +kubebuilder:validation:Optional
	RecoveryPointTags map[string]*string `json:"recoveryPointTags,omitempty" tf:"recovery_point_tags,omitempty"`

	// +kubebuilder:validation:Required
	RuleName *string `json:"ruleName" tf:"rule_name,omitempty"`

	// +kubebuilder:validation:Optional
	Schedule *string `json:"schedule,omitempty" tf:"schedule,omitempty"`

	// +kubebuilder:validation:Optional
	StartWindow *int64 `json:"startWindow,omitempty" tf:"start_window,omitempty"`

	// +kubebuilder:validation:Required
	TargetVaultName *string `json:"targetVaultName" tf:"target_vault_name,omitempty"`
}

// PlanSpec defines the desired state of Plan
type PlanSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     PlanParameters `json:"forProvider"`
}

// PlanStatus defines the observed state of Plan.
type PlanStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        PlanObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Plan is the Schema for the Plans API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tfaws}
type Plan struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              PlanSpec   `json:"spec"`
	Status            PlanStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// PlanList contains a list of Plans
type PlanList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Plan `json:"items"`
}

// Repository type metadata.
var (
	PlanKind             = "Plan"
	PlanGroupKind        = schema.GroupKind{Group: Group, Kind: PlanKind}.String()
	PlanKindAPIVersion   = PlanKind + "." + GroupVersion.String()
	PlanGroupVersionKind = GroupVersion.WithKind(PlanKind)
)

func init() {
	SchemeBuilder.Register(&Plan{}, &PlanList{})
}
