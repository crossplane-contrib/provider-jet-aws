/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

// +kubebuilder:object:generate=true
// +groupName=backup.aws.tf.crossplane.io
// +versionName=v1alpha1

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1alpha1 "github.com/crossplane-contrib/provider-tf-aws/apis/backup/v1alpha1"
)

type BackupVaultObservation struct {
	Arn string `json:"arn" tf:"arn"`

	RecoveryPoints int64 `json:"recoveryPoints" tf:"recovery_points"`
}

type BackupVaultParameters struct {
	KmsKeyArn *string `json:"kmsKeyArn,omitempty" tf:"kms_key_arn"`

	Name string `json:"name" tf:"name"`

	Tags map[string]string `json:"tags,omitempty" tf:"tags"`

	TagsAll map[string]string `json:"tagsAll,omitempty" tf:"tags_all"`
}

// BackupVaultSpec defines the desired state of BackupVault
type BackupVaultSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       BackupVaultParameters `json:"forProvider"`
}

// BackupVaultStatus defines the observed state of BackupVault.
type BackupVaultStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          BackupVaultObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// BackupVault is the Schema for the BackupVaults API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type BackupVault struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              BackupVaultSpec   `json:"spec"`
	Status            BackupVaultStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// BackupVaultList contains a list of BackupVaults
type BackupVaultList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []BackupVault `json:"items"`
}

// Repository type metadata.
var (
	BackupVaultKind             = "BackupVault"
	BackupVaultGroupKind        = schema.GroupKind{Group: v1alpha1.Group, Kind: BackupVaultKind}.String()
	BackupVaultKindAPIVersion   = BackupVaultKind + "." + v1alpha1.GroupVersion.String()
	BackupVaultGroupVersionKind = v1alpha1.GroupVersion.WithKind(BackupVaultKind)
)

func init() {
	v1alpha1.SchemeBuilder.Register(&BackupVault{}, &BackupVaultList{})
}
