/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type VaultNotificationsObservation struct {
	BackupVaultArn *string `json:"backupVaultArn,omitempty" tf:"backup_vault_arn,omitempty"`
}

type VaultNotificationsParameters struct {

	// +kubebuilder:validation:Required
	BackupVaultEvents []*string `json:"backupVaultEvents" tf:"backup_vault_events,omitempty"`

	// +kubebuilder:validation:Required
	BackupVaultName *string `json:"backupVaultName" tf:"backup_vault_name,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +terrajet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`

	// +kubebuilder:validation:Required
	SnsTopicArn *string `json:"snsTopicArn" tf:"sns_topic_arn,omitempty"`
}

// VaultNotificationsSpec defines the desired state of VaultNotifications
type VaultNotificationsSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     VaultNotificationsParameters `json:"forProvider"`
}

// VaultNotificationsStatus defines the observed state of VaultNotifications.
type VaultNotificationsStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        VaultNotificationsObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// VaultNotifications is the Schema for the VaultNotificationss API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tfaws}
type VaultNotifications struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              VaultNotificationsSpec   `json:"spec"`
	Status            VaultNotificationsStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// VaultNotificationsList contains a list of VaultNotificationss
type VaultNotificationsList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []VaultNotifications `json:"items"`
}

// Repository type metadata.
var (
	VaultNotificationsKind             = "VaultNotifications"
	VaultNotificationsGroupKind        = schema.GroupKind{Group: Group, Kind: VaultNotificationsKind}.String()
	VaultNotificationsKindAPIVersion   = VaultNotificationsKind + "." + GroupVersion.String()
	VaultNotificationsGroupVersionKind = GroupVersion.WithKind(VaultNotificationsKind)
)

func init() {
	SchemeBuilder.Register(&VaultNotifications{}, &VaultNotificationsList{})
}
