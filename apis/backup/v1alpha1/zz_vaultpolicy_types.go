/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type VaultPolicyObservation struct {
	BackupVaultArn *string `json:"backupVaultArn,omitempty" tf:"backup_vault_arn,omitempty"`
}

type VaultPolicyParameters struct {

	// +kubebuilder:validation:Required
	BackupVaultName *string `json:"backupVaultName" tf:"backup_vault_name,omitempty"`

	// +kubebuilder:validation:Required
	Policy *string `json:"policy" tf:"policy,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +terrajet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`
}

// VaultPolicySpec defines the desired state of VaultPolicy
type VaultPolicySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     VaultPolicyParameters `json:"forProvider"`
}

// VaultPolicyStatus defines the observed state of VaultPolicy.
type VaultPolicyStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        VaultPolicyObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// VaultPolicy is the Schema for the VaultPolicys API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tfaws}
type VaultPolicy struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              VaultPolicySpec   `json:"spec"`
	Status            VaultPolicyStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// VaultPolicyList contains a list of VaultPolicys
type VaultPolicyList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []VaultPolicy `json:"items"`
}

// Repository type metadata.
var (
	VaultPolicyKind             = "VaultPolicy"
	VaultPolicyGroupKind        = schema.GroupKind{Group: Group, Kind: VaultPolicyKind}.String()
	VaultPolicyKindAPIVersion   = VaultPolicyKind + "." + GroupVersion.String()
	VaultPolicyGroupVersionKind = GroupVersion.WithKind(VaultPolicyKind)
)

func init() {
	SchemeBuilder.Register(&VaultPolicy{}, &VaultPolicyList{})
}
