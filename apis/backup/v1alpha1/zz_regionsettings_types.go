/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type RegionSettingsObservation struct {
}

type RegionSettingsParameters struct {

	// Region is the region you'd like your resource to be created in.
	// +terrajet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`

	// +kubebuilder:validation:Required
	ResourceTypeOptInPreference map[string]*bool `json:"resourceTypeOptInPreference" tf:"resource_type_opt_in_preference,omitempty"`
}

// RegionSettingsSpec defines the desired state of RegionSettings
type RegionSettingsSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     RegionSettingsParameters `json:"forProvider"`
}

// RegionSettingsStatus defines the observed state of RegionSettings.
type RegionSettingsStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        RegionSettingsObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// RegionSettings is the Schema for the RegionSettingss API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tfaws}
type RegionSettings struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              RegionSettingsSpec   `json:"spec"`
	Status            RegionSettingsStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// RegionSettingsList contains a list of RegionSettingss
type RegionSettingsList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []RegionSettings `json:"items"`
}

// Repository type metadata.
var (
	RegionSettingsKind             = "RegionSettings"
	RegionSettingsGroupKind        = schema.GroupKind{Group: Group, Kind: RegionSettingsKind}.String()
	RegionSettingsKindAPIVersion   = RegionSettingsKind + "." + GroupVersion.String()
	RegionSettingsGroupVersionKind = GroupVersion.WithKind(RegionSettingsKind)
)

func init() {
	SchemeBuilder.Register(&RegionSettings{}, &RegionSettingsList{})
}
