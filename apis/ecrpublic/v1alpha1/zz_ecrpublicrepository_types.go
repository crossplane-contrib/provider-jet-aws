/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type CatalogDataObservation struct {
}

type CatalogDataParameters struct {
	AboutText *string `json:"aboutText,omitempty" tf:"about_text"`

	Architectures []string `json:"architectures,omitempty" tf:"architectures"`

	Description *string `json:"description,omitempty" tf:"description"`

	LogoImageBlob *string `json:"logoImageBlob,omitempty" tf:"logo_image_blob"`

	OperatingSystems []string `json:"operatingSystems,omitempty" tf:"operating_systems"`

	UsageText *string `json:"usageText,omitempty" tf:"usage_text"`
}

type EcrpublicRepositoryObservation struct {
	ARN string `json:"arn" tf:"arn"`

	RegistryID string `json:"registryID" tf:"registry_id"`

	RepositoryURI string `json:"repositoryURI" tf:"repository_uri"`
}

type EcrpublicRepositoryParameters struct {
	CatalogData []CatalogDataParameters `json:"catalogData,omitempty" tf:"catalog_data"`

	ForceDestroy *bool `json:"forceDestroy,omitempty" tf:"force_destroy"`

	RepositoryName string `json:"repositoryName" tf:"repository_name"`
}

// EcrpublicRepositorySpec defines the desired state of EcrpublicRepository
type EcrpublicRepositorySpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       EcrpublicRepositoryParameters `json:"forProvider"`
}

// EcrpublicRepositoryStatus defines the observed state of EcrpublicRepository.
type EcrpublicRepositoryStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          EcrpublicRepositoryObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// EcrpublicRepository is the Schema for the EcrpublicRepositorys API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tfaws}
type EcrpublicRepository struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              EcrpublicRepositorySpec   `json:"spec"`
	Status            EcrpublicRepositoryStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// EcrpublicRepositoryList contains a list of EcrpublicRepositorys
type EcrpublicRepositoryList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []EcrpublicRepository `json:"items"`
}

// Repository type metadata.
var (
	EcrpublicRepositoryKind             = "EcrpublicRepository"
	EcrpublicRepositoryGroupKind        = schema.GroupKind{Group: Group, Kind: EcrpublicRepositoryKind}.String()
	EcrpublicRepositoryKindAPIVersion   = EcrpublicRepositoryKind + "." + GroupVersion.String()
	EcrpublicRepositoryGroupVersionKind = GroupVersion.WithKind(EcrpublicRepositoryKind)
)

func init() {
	SchemeBuilder.Register(&EcrpublicRepository{}, &EcrpublicRepositoryList{})
}
