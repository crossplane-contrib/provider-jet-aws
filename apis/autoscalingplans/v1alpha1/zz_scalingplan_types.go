/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ApplicationSourceObservation struct {
}

type ApplicationSourceParameters struct {

	// +kubebuilder:validation:Optional
	CloudformationStackArn *string `json:"cloudformationStackArn,omitempty" tf:"cloudformation_stack_arn,omitempty"`

	// +kubebuilder:validation:Optional
	TagFilter []TagFilterParameters `json:"tagFilter,omitempty" tf:"tag_filter,omitempty"`
}

type CustomizedLoadMetricSpecificationObservation struct {
}

type CustomizedLoadMetricSpecificationParameters struct {

	// +kubebuilder:validation:Optional
	Dimensions map[string]*string `json:"dimensions,omitempty" tf:"dimensions,omitempty"`

	// +kubebuilder:validation:Required
	MetricName *string `json:"metricName" tf:"metric_name,omitempty"`

	// +kubebuilder:validation:Required
	Namespace *string `json:"namespace" tf:"namespace,omitempty"`

	// +kubebuilder:validation:Required
	Statistic *string `json:"statistic" tf:"statistic,omitempty"`

	// +kubebuilder:validation:Optional
	Unit *string `json:"unit,omitempty" tf:"unit,omitempty"`
}

type CustomizedScalingMetricSpecificationObservation struct {
}

type CustomizedScalingMetricSpecificationParameters struct {

	// +kubebuilder:validation:Optional
	Dimensions map[string]*string `json:"dimensions,omitempty" tf:"dimensions,omitempty"`

	// +kubebuilder:validation:Required
	MetricName *string `json:"metricName" tf:"metric_name,omitempty"`

	// +kubebuilder:validation:Required
	Namespace *string `json:"namespace" tf:"namespace,omitempty"`

	// +kubebuilder:validation:Required
	Statistic *string `json:"statistic" tf:"statistic,omitempty"`

	// +kubebuilder:validation:Optional
	Unit *string `json:"unit,omitempty" tf:"unit,omitempty"`
}

type PredefinedLoadMetricSpecificationObservation struct {
}

type PredefinedLoadMetricSpecificationParameters struct {

	// +kubebuilder:validation:Required
	PredefinedLoadMetricType *string `json:"predefinedLoadMetricType" tf:"predefined_load_metric_type,omitempty"`

	// +kubebuilder:validation:Optional
	ResourceLabel *string `json:"resourceLabel,omitempty" tf:"resource_label,omitempty"`
}

type PredefinedScalingMetricSpecificationObservation struct {
}

type PredefinedScalingMetricSpecificationParameters struct {

	// +kubebuilder:validation:Required
	PredefinedScalingMetricType *string `json:"predefinedScalingMetricType" tf:"predefined_scaling_metric_type,omitempty"`

	// +kubebuilder:validation:Optional
	ResourceLabel *string `json:"resourceLabel,omitempty" tf:"resource_label,omitempty"`
}

type ScalingInstructionObservation struct {
}

type ScalingInstructionParameters struct {

	// +kubebuilder:validation:Optional
	CustomizedLoadMetricSpecification []CustomizedLoadMetricSpecificationParameters `json:"customizedLoadMetricSpecification,omitempty" tf:"customized_load_metric_specification,omitempty"`

	// +kubebuilder:validation:Optional
	DisableDynamicScaling *bool `json:"disableDynamicScaling,omitempty" tf:"disable_dynamic_scaling,omitempty"`

	// +kubebuilder:validation:Required
	MaxCapacity *int64 `json:"maxCapacity" tf:"max_capacity,omitempty"`

	// +kubebuilder:validation:Required
	MinCapacity *int64 `json:"minCapacity" tf:"min_capacity,omitempty"`

	// +kubebuilder:validation:Optional
	PredefinedLoadMetricSpecification []PredefinedLoadMetricSpecificationParameters `json:"predefinedLoadMetricSpecification,omitempty" tf:"predefined_load_metric_specification,omitempty"`

	// +kubebuilder:validation:Optional
	PredictiveScalingMaxCapacityBehavior *string `json:"predictiveScalingMaxCapacityBehavior,omitempty" tf:"predictive_scaling_max_capacity_behavior,omitempty"`

	// +kubebuilder:validation:Optional
	PredictiveScalingMaxCapacityBuffer *int64 `json:"predictiveScalingMaxCapacityBuffer,omitempty" tf:"predictive_scaling_max_capacity_buffer,omitempty"`

	// +kubebuilder:validation:Optional
	PredictiveScalingMode *string `json:"predictiveScalingMode,omitempty" tf:"predictive_scaling_mode,omitempty"`

	// +kubebuilder:validation:Required
	ResourceID *string `json:"resourceId" tf:"resource_id,omitempty"`

	// +kubebuilder:validation:Required
	ScalableDimension *string `json:"scalableDimension" tf:"scalable_dimension,omitempty"`

	// +kubebuilder:validation:Optional
	ScalingPolicyUpdateBehavior *string `json:"scalingPolicyUpdateBehavior,omitempty" tf:"scaling_policy_update_behavior,omitempty"`

	// +kubebuilder:validation:Optional
	ScheduledActionBufferTime *int64 `json:"scheduledActionBufferTime,omitempty" tf:"scheduled_action_buffer_time,omitempty"`

	// +kubebuilder:validation:Required
	ServiceNamespace *string `json:"serviceNamespace" tf:"service_namespace,omitempty"`

	// +kubebuilder:validation:Required
	TargetTrackingConfiguration []TargetTrackingConfigurationParameters `json:"targetTrackingConfiguration" tf:"target_tracking_configuration,omitempty"`
}

type ScalingPlanObservation struct {
	ScalingPlanVersion *int64 `json:"scalingPlanVersion,omitempty" tf:"scaling_plan_version,omitempty"`
}

type ScalingPlanParameters struct {

	// +kubebuilder:validation:Required
	ApplicationSource []ApplicationSourceParameters `json:"applicationSource" tf:"application_source,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +terrajet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`

	// +kubebuilder:validation:Required
	ScalingInstruction []ScalingInstructionParameters `json:"scalingInstruction" tf:"scaling_instruction,omitempty"`
}

type TagFilterObservation struct {
}

type TagFilterParameters struct {

	// +kubebuilder:validation:Required
	Key *string `json:"key" tf:"key,omitempty"`

	// +kubebuilder:validation:Optional
	Values []*string `json:"values,omitempty" tf:"values,omitempty"`
}

type TargetTrackingConfigurationObservation struct {
}

type TargetTrackingConfigurationParameters struct {

	// +kubebuilder:validation:Optional
	CustomizedScalingMetricSpecification []CustomizedScalingMetricSpecificationParameters `json:"customizedScalingMetricSpecification,omitempty" tf:"customized_scaling_metric_specification,omitempty"`

	// +kubebuilder:validation:Optional
	DisableScaleIn *bool `json:"disableScaleIn,omitempty" tf:"disable_scale_in,omitempty"`

	// +kubebuilder:validation:Optional
	EstimatedInstanceWarmup *int64 `json:"estimatedInstanceWarmup,omitempty" tf:"estimated_instance_warmup,omitempty"`

	// +kubebuilder:validation:Optional
	PredefinedScalingMetricSpecification []PredefinedScalingMetricSpecificationParameters `json:"predefinedScalingMetricSpecification,omitempty" tf:"predefined_scaling_metric_specification,omitempty"`

	// +kubebuilder:validation:Optional
	ScaleInCooldown *int64 `json:"scaleInCooldown,omitempty" tf:"scale_in_cooldown,omitempty"`

	// +kubebuilder:validation:Optional
	ScaleOutCooldown *int64 `json:"scaleOutCooldown,omitempty" tf:"scale_out_cooldown,omitempty"`

	// +kubebuilder:validation:Required
	TargetValue *float64 `json:"targetValue" tf:"target_value,omitempty"`
}

// ScalingPlanSpec defines the desired state of ScalingPlan
type ScalingPlanSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ScalingPlanParameters `json:"forProvider"`
}

// ScalingPlanStatus defines the observed state of ScalingPlan.
type ScalingPlanStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ScalingPlanObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ScalingPlan is the Schema for the ScalingPlans API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tfaws}
type ScalingPlan struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ScalingPlanSpec   `json:"spec"`
	Status            ScalingPlanStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ScalingPlanList contains a list of ScalingPlans
type ScalingPlanList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ScalingPlan `json:"items"`
}

// Repository type metadata.
var (
	ScalingPlanKind             = "ScalingPlan"
	ScalingPlanGroupKind        = schema.GroupKind{Group: Group, Kind: ScalingPlanKind}.String()
	ScalingPlanKindAPIVersion   = ScalingPlanKind + "." + GroupVersion.String()
	ScalingPlanGroupVersionKind = GroupVersion.WithKind(ScalingPlanKind)
)

func init() {
	SchemeBuilder.Register(&ScalingPlan{}, &ScalingPlanList{})
}
