/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type DomainSamlOptionsObservation struct {
}

type DomainSamlOptionsParameters struct {

	// +kubebuilder:validation:Required
	DomainName *string `json:"domainName" tf:"domain_name,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +terrajet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`

	// +kubebuilder:validation:Optional
	SamlOptions []SamlOptionsParameters `json:"samlOptions,omitempty" tf:"saml_options,omitempty"`
}

type IdpObservation struct {
}

type IdpParameters struct {

	// +kubebuilder:validation:Required
	EntityID *string `json:"entityId" tf:"entity_id,omitempty"`

	// +kubebuilder:validation:Required
	MetadataContent *string `json:"metadataContent" tf:"metadata_content,omitempty"`
}

type SamlOptionsObservation struct {
}

type SamlOptionsParameters struct {

	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// +kubebuilder:validation:Optional
	Idp []IdpParameters `json:"idp,omitempty" tf:"idp,omitempty"`

	// +kubebuilder:validation:Optional
	MasterBackendRole *string `json:"masterBackendRole,omitempty" tf:"master_backend_role,omitempty"`

	// +kubebuilder:validation:Optional
	MasterUserNameSecretRef v1.SecretKeySelector `json:"masterUserNameSecretRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	RolesKey *string `json:"rolesKey,omitempty" tf:"roles_key,omitempty"`

	// +kubebuilder:validation:Optional
	SessionTimeoutMinutes *int64 `json:"sessionTimeoutMinutes,omitempty" tf:"session_timeout_minutes,omitempty"`

	// +kubebuilder:validation:Optional
	SubjectKey *string `json:"subjectKey,omitempty" tf:"subject_key,omitempty"`
}

// DomainSamlOptionsSpec defines the desired state of DomainSamlOptions
type DomainSamlOptionsSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     DomainSamlOptionsParameters `json:"forProvider"`
}

// DomainSamlOptionsStatus defines the observed state of DomainSamlOptions.
type DomainSamlOptionsStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        DomainSamlOptionsObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// DomainSamlOptions is the Schema for the DomainSamlOptionss API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tfaws}
type DomainSamlOptions struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DomainSamlOptionsSpec   `json:"spec"`
	Status            DomainSamlOptionsStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DomainSamlOptionsList contains a list of DomainSamlOptionss
type DomainSamlOptionsList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DomainSamlOptions `json:"items"`
}

// Repository type metadata.
var (
	DomainSamlOptionsKind             = "DomainSamlOptions"
	DomainSamlOptionsGroupKind        = schema.GroupKind{Group: Group, Kind: DomainSamlOptionsKind}.String()
	DomainSamlOptionsKindAPIVersion   = DomainSamlOptionsKind + "." + GroupVersion.String()
	DomainSamlOptionsGroupVersionKind = GroupVersion.WithKind(DomainSamlOptionsKind)
)

func init() {
	SchemeBuilder.Register(&DomainSamlOptions{}, &DomainSamlOptionsList{})
}
