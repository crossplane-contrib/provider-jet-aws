/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type AdvancedSecurityOptionsObservation struct {
}

type AdvancedSecurityOptionsParameters struct {
	Enabled bool `json:"enabled" tf:"enabled"`

	InternalUserDatabaseEnabled *bool `json:"internalUserDatabaseEnabled,omitempty" tf:"internal_user_database_enabled"`

	MasterUserOptions []MasterUserOptionsParameters `json:"masterUserOptions,omitempty" tf:"master_user_options"`
}

type ClusterConfigObservation struct {
}

type ClusterConfigParameters struct {
	DedicatedMasterCount *int64 `json:"dedicatedMasterCount,omitempty" tf:"dedicated_master_count"`

	DedicatedMasterEnabled *bool `json:"dedicatedMasterEnabled,omitempty" tf:"dedicated_master_enabled"`

	DedicatedMasterType *string `json:"dedicatedMasterType,omitempty" tf:"dedicated_master_type"`

	InstanceCount *int64 `json:"instanceCount,omitempty" tf:"instance_count"`

	InstanceType *string `json:"instanceType,omitempty" tf:"instance_type"`

	WarmCount *int64 `json:"warmCount,omitempty" tf:"warm_count"`

	WarmEnabled *bool `json:"warmEnabled,omitempty" tf:"warm_enabled"`

	WarmType *string `json:"warmType,omitempty" tf:"warm_type"`

	ZoneAwarenessConfig []ZoneAwarenessConfigParameters `json:"zoneAwarenessConfig,omitempty" tf:"zone_awareness_config"`

	ZoneAwarenessEnabled *bool `json:"zoneAwarenessEnabled,omitempty" tf:"zone_awareness_enabled"`
}

type CognitoOptionsObservation struct {
}

type CognitoOptionsParameters struct {
	Enabled *bool `json:"enabled,omitempty" tf:"enabled"`

	IdentityPoolID string `json:"identityPoolID" tf:"identity_pool_id"`

	RoleARN string `json:"roleARN" tf:"role_arn"`

	UserPoolID string `json:"userPoolID" tf:"user_pool_id"`
}

type DomainEndpointOptionsObservation struct {
}

type DomainEndpointOptionsParameters struct {
	CustomEndpoint *string `json:"customEndpoint,omitempty" tf:"custom_endpoint"`

	CustomEndpointCertificateARN *string `json:"customEndpointCertificateARN,omitempty" tf:"custom_endpoint_certificate_arn"`

	CustomEndpointEnabled *bool `json:"customEndpointEnabled,omitempty" tf:"custom_endpoint_enabled"`

	EnforceHTTPS *bool `json:"enforceHTTPS,omitempty" tf:"enforce_https"`

	TLSSecurityPolicy *string `json:"tlsSecurityPolicy,omitempty" tf:"tls_security_policy"`
}

type EbsOptionsObservation struct {
}

type EbsOptionsParameters struct {
	EbsEnabled bool `json:"ebsEnabled" tf:"ebs_enabled"`

	Iops *int64 `json:"iops,omitempty" tf:"iops"`

	VolumeSize *int64 `json:"volumeSize,omitempty" tf:"volume_size"`

	VolumeType *string `json:"volumeType,omitempty" tf:"volume_type"`
}

type ElasticsearchDomainObservation struct {
	ARN string `json:"arn" tf:"arn"`

	DomainID string `json:"domainID" tf:"domain_id"`

	Endpoint string `json:"endpoint" tf:"endpoint"`

	KibanaEndpoint string `json:"kibanaEndpoint" tf:"kibana_endpoint"`
}

type ElasticsearchDomainParameters struct {
	AccessPolicies *string `json:"accessPolicies,omitempty" tf:"access_policies"`

	AdvancedOptions map[string]string `json:"advancedOptions,omitempty" tf:"advanced_options"`

	AdvancedSecurityOptions []AdvancedSecurityOptionsParameters `json:"advancedSecurityOptions,omitempty" tf:"advanced_security_options"`

	ClusterConfig []ClusterConfigParameters `json:"clusterConfig,omitempty" tf:"cluster_config"`

	CognitoOptions []CognitoOptionsParameters `json:"cognitoOptions,omitempty" tf:"cognito_options"`

	DomainEndpointOptions []DomainEndpointOptionsParameters `json:"domainEndpointOptions,omitempty" tf:"domain_endpoint_options"`

	DomainName string `json:"domainName" tf:"domain_name"`

	EbsOptions []EbsOptionsParameters `json:"ebsOptions,omitempty" tf:"ebs_options"`

	ElasticsearchVersion *string `json:"elasticsearchVersion,omitempty" tf:"elasticsearch_version"`

	EncryptAtRest []EncryptAtRestParameters `json:"encryptAtRest,omitempty" tf:"encrypt_at_rest"`

	LogPublishingOptions []LogPublishingOptionsParameters `json:"logPublishingOptions,omitempty" tf:"log_publishing_options"`

	NodeToNodeEncryption []NodeToNodeEncryptionParameters `json:"nodeToNodeEncryption,omitempty" tf:"node_to_node_encryption"`

	SnapshotOptions []SnapshotOptionsParameters `json:"snapshotOptions,omitempty" tf:"snapshot_options"`

	Tags map[string]string `json:"tags,omitempty" tf:"tags"`

	TagsAll map[string]string `json:"tagsAll,omitempty" tf:"tags_all"`

	VPCOptions []VPCOptionsParameters `json:"vpcOptions,omitempty" tf:"vpc_options"`
}

type EncryptAtRestObservation struct {
}

type EncryptAtRestParameters struct {
	Enabled bool `json:"enabled" tf:"enabled"`

	KmsKeyID *string `json:"kmsKeyID,omitempty" tf:"kms_key_id"`
}

type LogPublishingOptionsObservation struct {
}

type LogPublishingOptionsParameters struct {
	CloudwatchLogGroupARN string `json:"cloudwatchLogGroupARN" tf:"cloudwatch_log_group_arn"`

	Enabled *bool `json:"enabled,omitempty" tf:"enabled"`

	LogType string `json:"logType" tf:"log_type"`
}

type MasterUserOptionsObservation struct {
}

type MasterUserOptionsParameters struct {
	MasterUserARN *string `json:"masterUserARN,omitempty" tf:"master_user_arn"`

	MasterUserName *string `json:"masterUserName,omitempty" tf:"master_user_name"`

	MasterUserPassword *string `json:"masterUserPassword,omitempty" tf:"master_user_password"`
}

type NodeToNodeEncryptionObservation struct {
}

type NodeToNodeEncryptionParameters struct {
	Enabled bool `json:"enabled" tf:"enabled"`
}

type SnapshotOptionsObservation struct {
}

type SnapshotOptionsParameters struct {
	AutomatedSnapshotStartHour int64 `json:"automatedSnapshotStartHour" tf:"automated_snapshot_start_hour"`
}

type VPCOptionsObservation struct {
	AvailabilityZones []string `json:"availabilityZones" tf:"availability_zones"`

	VPCID string `json:"vpcID" tf:"vpc_id"`
}

type VPCOptionsParameters struct {
	SecurityGroupIds []string `json:"securityGroupIds,omitempty" tf:"security_group_ids"`

	SubnetIds []string `json:"subnetIds,omitempty" tf:"subnet_ids"`
}

type ZoneAwarenessConfigObservation struct {
}

type ZoneAwarenessConfigParameters struct {
	AvailabilityZoneCount *int64 `json:"availabilityZoneCount,omitempty" tf:"availability_zone_count"`
}

// ElasticsearchDomainSpec defines the desired state of ElasticsearchDomain
type ElasticsearchDomainSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       ElasticsearchDomainParameters `json:"forProvider"`
}

// ElasticsearchDomainStatus defines the observed state of ElasticsearchDomain.
type ElasticsearchDomainStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          ElasticsearchDomainObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ElasticsearchDomain is the Schema for the ElasticsearchDomains API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tfaws}
type ElasticsearchDomain struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ElasticsearchDomainSpec   `json:"spec"`
	Status            ElasticsearchDomainStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ElasticsearchDomainList contains a list of ElasticsearchDomains
type ElasticsearchDomainList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ElasticsearchDomain `json:"items"`
}

// Repository type metadata.
var (
	ElasticsearchDomainKind             = "ElasticsearchDomain"
	ElasticsearchDomainGroupKind        = schema.GroupKind{Group: Group, Kind: ElasticsearchDomainKind}.String()
	ElasticsearchDomainKindAPIVersion   = ElasticsearchDomainKind + "." + GroupVersion.String()
	ElasticsearchDomainGroupVersionKind = GroupVersion.WithKind(ElasticsearchDomainKind)
)

func init() {
	SchemeBuilder.Register(&ElasticsearchDomain{}, &ElasticsearchDomainList{})
}
