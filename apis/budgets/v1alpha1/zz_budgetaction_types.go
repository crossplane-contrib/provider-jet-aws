/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ActionThresholdObservation struct {
}

type ActionThresholdParameters struct {

	// +kubebuilder:validation:Required
	ActionThresholdType *string `json:"actionThresholdType" tf:"action_threshold_type,omitempty"`

	// +kubebuilder:validation:Required
	ActionThresholdValue *float64 `json:"actionThresholdValue" tf:"action_threshold_value,omitempty"`
}

type BudgetActionObservation struct {
	ActionID *string `json:"actionId,omitempty" tf:"action_id,omitempty"`

	Arn *string `json:"arn,omitempty" tf:"arn,omitempty"`

	Status *string `json:"status,omitempty" tf:"status,omitempty"`
}

type BudgetActionParameters struct {

	// +kubebuilder:validation:Optional
	AccountID *string `json:"accountId,omitempty" tf:"account_id,omitempty"`

	// +kubebuilder:validation:Required
	ActionThreshold []ActionThresholdParameters `json:"actionThreshold" tf:"action_threshold,omitempty"`

	// +kubebuilder:validation:Required
	ActionType *string `json:"actionType" tf:"action_type,omitempty"`

	// +kubebuilder:validation:Required
	ApprovalModel *string `json:"approvalModel" tf:"approval_model,omitempty"`

	// +kubebuilder:validation:Required
	BudgetName *string `json:"budgetName" tf:"budget_name,omitempty"`

	// +kubebuilder:validation:Required
	Definition []DefinitionParameters `json:"definition" tf:"definition,omitempty"`

	// +kubebuilder:validation:Required
	ExecutionRoleArn *string `json:"executionRoleArn" tf:"execution_role_arn,omitempty"`

	// +kubebuilder:validation:Required
	NotificationType *string `json:"notificationType" tf:"notification_type,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +terrajet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`

	// +kubebuilder:validation:Required
	Subscriber []SubscriberParameters `json:"subscriber" tf:"subscriber,omitempty"`
}

type DefinitionObservation struct {
}

type DefinitionParameters struct {

	// +kubebuilder:validation:Optional
	IamActionDefinition []IamActionDefinitionParameters `json:"iamActionDefinition,omitempty" tf:"iam_action_definition,omitempty"`

	// +kubebuilder:validation:Optional
	ScpActionDefinition []ScpActionDefinitionParameters `json:"scpActionDefinition,omitempty" tf:"scp_action_definition,omitempty"`

	// +kubebuilder:validation:Optional
	SsmActionDefinition []SsmActionDefinitionParameters `json:"ssmActionDefinition,omitempty" tf:"ssm_action_definition,omitempty"`
}

type IamActionDefinitionObservation struct {
}

type IamActionDefinitionParameters struct {

	// +kubebuilder:validation:Optional
	Groups []*string `json:"groups,omitempty" tf:"groups,omitempty"`

	// +kubebuilder:validation:Required
	PolicyArn *string `json:"policyArn" tf:"policy_arn,omitempty"`

	// +kubebuilder:validation:Optional
	Roles []*string `json:"roles,omitempty" tf:"roles,omitempty"`

	// +kubebuilder:validation:Optional
	Users []*string `json:"users,omitempty" tf:"users,omitempty"`
}

type ScpActionDefinitionObservation struct {
}

type ScpActionDefinitionParameters struct {

	// +kubebuilder:validation:Required
	PolicyID *string `json:"policyId" tf:"policy_id,omitempty"`

	// +kubebuilder:validation:Required
	TargetIds []*string `json:"targetIds" tf:"target_ids,omitempty"`
}

type SsmActionDefinitionObservation struct {
}

type SsmActionDefinitionParameters struct {

	// +kubebuilder:validation:Required
	ActionSubType *string `json:"actionSubType" tf:"action_sub_type,omitempty"`

	// +kubebuilder:validation:Required
	InstanceIds []*string `json:"instanceIds" tf:"instance_ids,omitempty"`

	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"region,omitempty"`
}

type SubscriberObservation struct {
}

type SubscriberParameters struct {

	// +kubebuilder:validation:Required
	Address *string `json:"address" tf:"address,omitempty"`

	// +kubebuilder:validation:Required
	SubscriptionType *string `json:"subscriptionType" tf:"subscription_type,omitempty"`
}

// BudgetActionSpec defines the desired state of BudgetAction
type BudgetActionSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     BudgetActionParameters `json:"forProvider"`
}

// BudgetActionStatus defines the observed state of BudgetAction.
type BudgetActionStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        BudgetActionObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// BudgetAction is the Schema for the BudgetActions API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tfaws}
type BudgetAction struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              BudgetActionSpec   `json:"spec"`
	Status            BudgetActionStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// BudgetActionList contains a list of BudgetActions
type BudgetActionList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []BudgetAction `json:"items"`
}

// Repository type metadata.
var (
	BudgetActionKind             = "BudgetAction"
	BudgetActionGroupKind        = schema.GroupKind{Group: Group, Kind: BudgetActionKind}.String()
	BudgetActionKindAPIVersion   = BudgetActionKind + "." + GroupVersion.String()
	BudgetActionGroupVersionKind = GroupVersion.WithKind(BudgetActionKind)
)

func init() {
	SchemeBuilder.Register(&BudgetAction{}, &BudgetActionList{})
}
