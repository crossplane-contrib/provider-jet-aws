/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type ActionThresholdObservation struct {
}

type ActionThresholdParameters struct {
	ActionThresholdType string `json:"actionThresholdType" tf:"action_threshold_type"`

	ActionThresholdValue float64 `json:"actionThresholdValue" tf:"action_threshold_value"`
}

type BudgetsBudgetActionObservation struct {
	ARN string `json:"arn" tf:"arn"`

	ActionID string `json:"actionID" tf:"action_id"`

	Status string `json:"status" tf:"status"`
}

type BudgetsBudgetActionParameters struct {
	AccountID *string `json:"accountID,omitempty" tf:"account_id"`

	ActionThreshold []ActionThresholdParameters `json:"actionThreshold" tf:"action_threshold"`

	ActionType string `json:"actionType" tf:"action_type"`

	ApprovalModel string `json:"approvalModel" tf:"approval_model"`

	BudgetName string `json:"budgetName" tf:"budget_name"`

	Definition []DefinitionParameters `json:"definition" tf:"definition"`

	ExecutionRoleARN string `json:"executionRoleARN" tf:"execution_role_arn"`

	NotificationType string `json:"notificationType" tf:"notification_type"`

	Subscriber []SubscriberParameters `json:"subscriber" tf:"subscriber"`
}

type DefinitionObservation struct {
}

type DefinitionParameters struct {
	IamActionDefinition []IamActionDefinitionParameters `json:"iamActionDefinition,omitempty" tf:"iam_action_definition"`

	ScpActionDefinition []ScpActionDefinitionParameters `json:"scpActionDefinition,omitempty" tf:"scp_action_definition"`

	SsmActionDefinition []SsmActionDefinitionParameters `json:"ssmActionDefinition,omitempty" tf:"ssm_action_definition"`
}

type IamActionDefinitionObservation struct {
}

type IamActionDefinitionParameters struct {
	Groups []string `json:"groups,omitempty" tf:"groups"`

	PolicyARN string `json:"policyARN" tf:"policy_arn"`

	Roles []string `json:"roles,omitempty" tf:"roles"`

	Users []string `json:"users,omitempty" tf:"users"`
}

type ScpActionDefinitionObservation struct {
}

type ScpActionDefinitionParameters struct {
	PolicyID string `json:"policyID" tf:"policy_id"`

	TargetIds []string `json:"targetIds" tf:"target_ids"`
}

type SsmActionDefinitionObservation struct {
}

type SsmActionDefinitionParameters struct {
	ActionSubType string `json:"actionSubType" tf:"action_sub_type"`

	InstanceIds []string `json:"instanceIds" tf:"instance_ids"`

	Region string `json:"region" tf:"region"`
}

type SubscriberObservation struct {
}

type SubscriberParameters struct {
	Address string `json:"address" tf:"address"`

	SubscriptionType string `json:"subscriptionType" tf:"subscription_type"`
}

// BudgetsBudgetActionSpec defines the desired state of BudgetsBudgetAction
type BudgetsBudgetActionSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       BudgetsBudgetActionParameters `json:"forProvider"`
}

// BudgetsBudgetActionStatus defines the observed state of BudgetsBudgetAction.
type BudgetsBudgetActionStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          BudgetsBudgetActionObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// BudgetsBudgetAction is the Schema for the BudgetsBudgetActions API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tfaws}
type BudgetsBudgetAction struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              BudgetsBudgetActionSpec   `json:"spec"`
	Status            BudgetsBudgetActionStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// BudgetsBudgetActionList contains a list of BudgetsBudgetActions
type BudgetsBudgetActionList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []BudgetsBudgetAction `json:"items"`
}

// Repository type metadata.
var (
	BudgetsBudgetActionKind             = "BudgetsBudgetAction"
	BudgetsBudgetActionGroupKind        = schema.GroupKind{Group: Group, Kind: BudgetsBudgetActionKind}.String()
	BudgetsBudgetActionKindAPIVersion   = BudgetsBudgetActionKind + "." + GroupVersion.String()
	BudgetsBudgetActionGroupVersionKind = GroupVersion.WithKind(BudgetsBudgetActionKind)
)

func init() {
	SchemeBuilder.Register(&BudgetsBudgetAction{}, &BudgetsBudgetActionList{})
}
