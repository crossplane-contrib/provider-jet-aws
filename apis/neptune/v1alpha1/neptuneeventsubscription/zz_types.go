/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

// +kubebuilder:object:generate=true
// +groupName=neptune.aws.tf.crossplane.io
// +versionName=v1alpha1

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1alpha1 "github.com/crossplane-contrib/provider-tf-aws/apis/neptune/v1alpha1"
)

type NeptuneEventSubscriptionObservation struct {
	Arn string `json:"arn" tf:"arn"`

	CustomerAwsId string `json:"customerAwsId" tf:"customer_aws_id"`
}

type NeptuneEventSubscriptionParameters struct {
	Enabled *bool `json:"enabled,omitempty" tf:"enabled"`

	EventCategories []string `json:"eventCategories,omitempty" tf:"event_categories"`

	Name *string `json:"name,omitempty" tf:"name"`

	NamePrefix *string `json:"namePrefix,omitempty" tf:"name_prefix"`

	SnsTopicArn string `json:"snsTopicArn" tf:"sns_topic_arn"`

	SourceIds []string `json:"sourceIds,omitempty" tf:"source_ids"`

	SourceType *string `json:"sourceType,omitempty" tf:"source_type"`

	Tags map[string]string `json:"tags,omitempty" tf:"tags"`

	TagsAll map[string]string `json:"tagsAll,omitempty" tf:"tags_all"`
}

// NeptuneEventSubscriptionSpec defines the desired state of NeptuneEventSubscription
type NeptuneEventSubscriptionSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       NeptuneEventSubscriptionParameters `json:"forProvider"`
}

// NeptuneEventSubscriptionStatus defines the observed state of NeptuneEventSubscription.
type NeptuneEventSubscriptionStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          NeptuneEventSubscriptionObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// NeptuneEventSubscription is the Schema for the NeptuneEventSubscriptions API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type NeptuneEventSubscription struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              NeptuneEventSubscriptionSpec   `json:"spec"`
	Status            NeptuneEventSubscriptionStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// NeptuneEventSubscriptionList contains a list of NeptuneEventSubscriptions
type NeptuneEventSubscriptionList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []NeptuneEventSubscription `json:"items"`
}

// Repository type metadata.
var (
	NeptuneEventSubscriptionKind             = "NeptuneEventSubscription"
	NeptuneEventSubscriptionGroupKind        = schema.GroupKind{Group: v1alpha1.Group, Kind: NeptuneEventSubscriptionKind}.String()
	NeptuneEventSubscriptionKindAPIVersion   = NeptuneEventSubscriptionKind + "." + v1alpha1.GroupVersion.String()
	NeptuneEventSubscriptionGroupVersionKind = v1alpha1.GroupVersion.WithKind(NeptuneEventSubscriptionKind)
)

func init() {
	v1alpha1.SchemeBuilder.Register(&NeptuneEventSubscription{}, &NeptuneEventSubscriptionList{})
}
