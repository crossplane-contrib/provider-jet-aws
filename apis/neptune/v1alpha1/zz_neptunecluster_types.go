/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type NeptuneClusterObservation struct {
	ARN string `json:"arn" tf:"arn"`

	ClusterMembers []string `json:"clusterMembers" tf:"cluster_members"`

	ClusterResourceID string `json:"clusterResourceID" tf:"cluster_resource_id"`

	Endpoint string `json:"endpoint" tf:"endpoint"`

	HostedZoneID string `json:"hostedZoneID" tf:"hosted_zone_id"`

	ReaderEndpoint string `json:"readerEndpoint" tf:"reader_endpoint"`
}

type NeptuneClusterParameters struct {
	ApplyImmediately *bool `json:"applyImmediately,omitempty" tf:"apply_immediately"`

	AvailabilityZones []string `json:"availabilityZones,omitempty" tf:"availability_zones"`

	BackupRetentionPeriod *int64 `json:"backupRetentionPeriod,omitempty" tf:"backup_retention_period"`

	ClusterIdentifier *string `json:"clusterIdentifier,omitempty" tf:"cluster_identifier"`

	ClusterIdentifierPrefix *string `json:"clusterIdentifierPrefix,omitempty" tf:"cluster_identifier_prefix"`

	CopyTagsToSnapshot *bool `json:"copyTagsToSnapshot,omitempty" tf:"copy_tags_to_snapshot"`

	DeletionProtection *bool `json:"deletionProtection,omitempty" tf:"deletion_protection"`

	EnableCloudwatchLogsExports []string `json:"enableCloudwatchLogsExports,omitempty" tf:"enable_cloudwatch_logs_exports"`

	Engine *string `json:"engine,omitempty" tf:"engine"`

	EngineVersion *string `json:"engineVersion,omitempty" tf:"engine_version"`

	FinalSnapshotIdentifier *string `json:"finalSnapshotIdentifier,omitempty" tf:"final_snapshot_identifier"`

	IamDatabaseAuthenticationEnabled *bool `json:"iamDatabaseAuthenticationEnabled,omitempty" tf:"iam_database_authentication_enabled"`

	IamRoles []string `json:"iamRoles,omitempty" tf:"iam_roles"`

	KmsKeyARN *string `json:"kmsKeyARN,omitempty" tf:"kms_key_arn"`

	NeptuneClusterParameterGroupName *string `json:"neptuneClusterParameterGroupName,omitempty" tf:"neptune_cluster_parameter_group_name"`

	NeptuneSubnetGroupName *string `json:"neptuneSubnetGroupName,omitempty" tf:"neptune_subnet_group_name"`

	Port *int64 `json:"port,omitempty" tf:"port"`

	PreferredBackupWindow *string `json:"preferredBackupWindow,omitempty" tf:"preferred_backup_window"`

	PreferredMaintenanceWindow *string `json:"preferredMaintenanceWindow,omitempty" tf:"preferred_maintenance_window"`

	ReplicationSourceIdentifier *string `json:"replicationSourceIdentifier,omitempty" tf:"replication_source_identifier"`

	SkipFinalSnapshot *bool `json:"skipFinalSnapshot,omitempty" tf:"skip_final_snapshot"`

	SnapshotIdentifier *string `json:"snapshotIdentifier,omitempty" tf:"snapshot_identifier"`

	StorageEncrypted *bool `json:"storageEncrypted,omitempty" tf:"storage_encrypted"`

	Tags map[string]string `json:"tags,omitempty" tf:"tags"`

	TagsAll map[string]string `json:"tagsAll,omitempty" tf:"tags_all"`

	VPCSecurityGroupIds []string `json:"vpcSecurityGroupIds,omitempty" tf:"vpc_security_group_ids"`
}

// NeptuneClusterSpec defines the desired state of NeptuneCluster
type NeptuneClusterSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       NeptuneClusterParameters `json:"forProvider"`
}

// NeptuneClusterStatus defines the observed state of NeptuneCluster.
type NeptuneClusterStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          NeptuneClusterObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// NeptuneCluster is the Schema for the NeptuneClusters API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tfaws}
type NeptuneCluster struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              NeptuneClusterSpec   `json:"spec"`
	Status            NeptuneClusterStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// NeptuneClusterList contains a list of NeptuneClusters
type NeptuneClusterList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []NeptuneCluster `json:"items"`
}

// Repository type metadata.
var (
	NeptuneClusterKind             = "NeptuneCluster"
	NeptuneClusterGroupKind        = schema.GroupKind{Group: Group, Kind: NeptuneClusterKind}.String()
	NeptuneClusterKindAPIVersion   = NeptuneClusterKind + "." + GroupVersion.String()
	NeptuneClusterGroupVersionKind = GroupVersion.WithKind(NeptuneClusterKind)
)

func init() {
	SchemeBuilder.Register(&NeptuneCluster{}, &NeptuneClusterList{})
}
