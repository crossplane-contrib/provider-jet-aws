/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

// +kubebuilder:object:generate=true
// +groupName=waf.aws.tf.crossplane.io
// +versionName=v1alpha1

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1alpha1 "github.com/crossplane-contrib/provider-tf-aws/apis/waf/v1alpha1"
)

type ByteMatchTuplesObservation struct {
}

type ByteMatchTuplesParameters struct {
	FieldToMatch []FieldToMatchParameters `json:"fieldToMatch" tf:"field_to_match"`

	PositionalConstraint string `json:"positionalConstraint" tf:"positional_constraint"`

	TargetString *string `json:"targetString,omitempty" tf:"target_string"`

	TextTransformation string `json:"textTransformation" tf:"text_transformation"`
}

type FieldToMatchObservation struct {
}

type FieldToMatchParameters struct {
	Data *string `json:"data,omitempty" tf:"data"`

	Type string `json:"type" tf:"type"`
}

type WafByteMatchSetObservation struct {
}

type WafByteMatchSetParameters struct {
	ByteMatchTuples []ByteMatchTuplesParameters `json:"byteMatchTuples,omitempty" tf:"byte_match_tuples"`

	Name string `json:"name" tf:"name"`
}

// WafByteMatchSetSpec defines the desired state of WafByteMatchSet
type WafByteMatchSetSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       WafByteMatchSetParameters `json:"forProvider"`
}

// WafByteMatchSetStatus defines the observed state of WafByteMatchSet.
type WafByteMatchSetStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          WafByteMatchSetObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// WafByteMatchSet is the Schema for the WafByteMatchSets API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type WafByteMatchSet struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              WafByteMatchSetSpec   `json:"spec"`
	Status            WafByteMatchSetStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// WafByteMatchSetList contains a list of WafByteMatchSets
type WafByteMatchSetList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []WafByteMatchSet `json:"items"`
}

// Repository type metadata.
var (
	WafByteMatchSetKind             = "WafByteMatchSet"
	WafByteMatchSetGroupKind        = schema.GroupKind{Group: v1alpha1.Group, Kind: WafByteMatchSetKind}.String()
	WafByteMatchSetKindAPIVersion   = WafByteMatchSetKind + "." + v1alpha1.GroupVersion.String()
	WafByteMatchSetGroupVersionKind = v1alpha1.GroupVersion.WithKind(WafByteMatchSetKind)
)

func init() {
	v1alpha1.SchemeBuilder.Register(&WafByteMatchSet{}, &WafByteMatchSetList{})
}
