/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type RegexPatternSetObservation struct {
	Arn *string `json:"arn,omitempty" tf:"arn,omitempty"`
}

type RegexPatternSetParameters struct {

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	RegexPatternStrings []*string `json:"regexPatternStrings,omitempty" tf:"regex_pattern_strings,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +terrajet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`
}

// RegexPatternSetSpec defines the desired state of RegexPatternSet
type RegexPatternSetSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     RegexPatternSetParameters `json:"forProvider"`
}

// RegexPatternSetStatus defines the observed state of RegexPatternSet.
type RegexPatternSetStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        RegexPatternSetObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// RegexPatternSet is the Schema for the RegexPatternSets API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tfaws}
type RegexPatternSet struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              RegexPatternSetSpec   `json:"spec"`
	Status            RegexPatternSetStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// RegexPatternSetList contains a list of RegexPatternSets
type RegexPatternSetList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []RegexPatternSet `json:"items"`
}

// Repository type metadata.
var (
	RegexPatternSetKind             = "RegexPatternSet"
	RegexPatternSetGroupKind        = schema.GroupKind{Group: Group, Kind: RegexPatternSetKind}.String()
	RegexPatternSetKindAPIVersion   = RegexPatternSetKind + "." + GroupVersion.String()
	RegexPatternSetGroupVersionKind = GroupVersion.WithKind(RegexPatternSetKind)
)

func init() {
	SchemeBuilder.Register(&RegexPatternSet{}, &RegexPatternSetList{})
}
