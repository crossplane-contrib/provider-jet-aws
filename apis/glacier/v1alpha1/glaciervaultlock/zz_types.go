/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

// +kubebuilder:object:generate=true
// +groupName=glacier.aws.tf.crossplane.io
// +versionName=v1alpha1

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1alpha1 "github.com/crossplane-contrib/provider-tf-aws/apis/glacier/v1alpha1"
)

type GlacierVaultLockObservation struct {
}

type GlacierVaultLockParameters struct {
	CompleteLock bool `json:"completeLock" tf:"complete_lock"`

	IgnoreDeletionError *bool `json:"ignoreDeletionError,omitempty" tf:"ignore_deletion_error"`

	Policy string `json:"policy" tf:"policy"`

	VaultName string `json:"vaultName" tf:"vault_name"`
}

// GlacierVaultLockSpec defines the desired state of GlacierVaultLock
type GlacierVaultLockSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       GlacierVaultLockParameters `json:"forProvider"`
}

// GlacierVaultLockStatus defines the observed state of GlacierVaultLock.
type GlacierVaultLockStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          GlacierVaultLockObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// GlacierVaultLock is the Schema for the GlacierVaultLocks API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type GlacierVaultLock struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              GlacierVaultLockSpec   `json:"spec"`
	Status            GlacierVaultLockStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// GlacierVaultLockList contains a list of GlacierVaultLocks
type GlacierVaultLockList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []GlacierVaultLock `json:"items"`
}

// Repository type metadata.
var (
	GlacierVaultLockKind             = "GlacierVaultLock"
	GlacierVaultLockGroupKind        = schema.GroupKind{Group: v1alpha1.Group, Kind: GlacierVaultLockKind}.String()
	GlacierVaultLockKindAPIVersion   = GlacierVaultLockKind + "." + v1alpha1.GroupVersion.String()
	GlacierVaultLockGroupVersionKind = v1alpha1.GroupVersion.WithKind(GlacierVaultLockKind)
)

func init() {
	v1alpha1.SchemeBuilder.Register(&GlacierVaultLock{}, &GlacierVaultLockList{})
}
