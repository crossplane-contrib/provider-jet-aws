/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type DiscovererObservation struct {
	Arn *string `json:"arn,omitempty" tf:"arn,omitempty"`

	TagsAll map[string]*string `json:"tagsAll,omitempty" tf:"tags_all,omitempty"`
}

type DiscovererParameters struct {

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +terrajet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`

	// +kubebuilder:validation:Required
	SourceArn *string `json:"sourceArn" tf:"source_arn,omitempty"`

	// +kubebuilder:validation:Optional
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

// DiscovererSpec defines the desired state of Discoverer
type DiscovererSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     DiscovererParameters `json:"forProvider"`
}

// DiscovererStatus defines the observed state of Discoverer.
type DiscovererStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        DiscovererObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Discoverer is the Schema for the Discoverers API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tfaws}
type Discoverer struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DiscovererSpec   `json:"spec"`
	Status            DiscovererStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DiscovererList contains a list of Discoverers
type DiscovererList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Discoverer `json:"items"`
}

// Repository type metadata.
var (
	DiscovererKind             = "Discoverer"
	DiscovererGroupKind        = schema.GroupKind{Group: Group, Kind: DiscovererKind}.String()
	DiscovererKindAPIVersion   = DiscovererKind + "." + GroupVersion.String()
	DiscovererGroupVersionKind = GroupVersion.WithKind(DiscovererKind)
)

func init() {
	SchemeBuilder.Register(&Discoverer{}, &DiscovererList{})
}
