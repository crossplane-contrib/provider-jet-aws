/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type BaiduChannelObservation struct {
}

type BaiduChannelParameters struct {

	// +kubebuilder:validation:Required
	APIKeySecretRef v1.SecretKeySelector `json:"apiKeySecretRef" tf:"-"`

	// +kubebuilder:validation:Required
	ApplicationID *string `json:"applicationId" tf:"application_id,omitempty"`

	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +terrajet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`

	// +kubebuilder:validation:Required
	SecretKeySecretRef v1.SecretKeySelector `json:"secretKeySecretRef" tf:"-"`
}

// BaiduChannelSpec defines the desired state of BaiduChannel
type BaiduChannelSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     BaiduChannelParameters `json:"forProvider"`
}

// BaiduChannelStatus defines the observed state of BaiduChannel.
type BaiduChannelStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        BaiduChannelObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// BaiduChannel is the Schema for the BaiduChannels API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tfaws}
type BaiduChannel struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              BaiduChannelSpec   `json:"spec"`
	Status            BaiduChannelStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// BaiduChannelList contains a list of BaiduChannels
type BaiduChannelList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []BaiduChannel `json:"items"`
}

// Repository type metadata.
var (
	BaiduChannelKind             = "BaiduChannel"
	BaiduChannelGroupKind        = schema.GroupKind{Group: Group, Kind: BaiduChannelKind}.String()
	BaiduChannelKindAPIVersion   = BaiduChannelKind + "." + GroupVersion.String()
	BaiduChannelGroupVersionKind = GroupVersion.WithKind(BaiduChannelKind)
)

func init() {
	SchemeBuilder.Register(&BaiduChannel{}, &BaiduChannelList{})
}
