/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type EmailChannelObservation struct {
	MessagesPerSecond *int64 `json:"messagesPerSecond,omitempty" tf:"messages_per_second,omitempty"`
}

type EmailChannelParameters struct {

	// +kubebuilder:validation:Required
	ApplicationID *string `json:"applicationId" tf:"application_id,omitempty"`

	// +kubebuilder:validation:Optional
	ConfigurationSet *string `json:"configurationSet,omitempty" tf:"configuration_set,omitempty"`

	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// +kubebuilder:validation:Required
	FromAddress *string `json:"fromAddress" tf:"from_address,omitempty"`

	// +kubebuilder:validation:Required
	Identity *string `json:"identity" tf:"identity,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +terrajet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`

	// +kubebuilder:validation:Optional
	RoleArn *string `json:"roleArn,omitempty" tf:"role_arn,omitempty"`
}

// EmailChannelSpec defines the desired state of EmailChannel
type EmailChannelSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     EmailChannelParameters `json:"forProvider"`
}

// EmailChannelStatus defines the observed state of EmailChannel.
type EmailChannelStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        EmailChannelObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// EmailChannel is the Schema for the EmailChannels API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tfaws}
type EmailChannel struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              EmailChannelSpec   `json:"spec"`
	Status            EmailChannelStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// EmailChannelList contains a list of EmailChannels
type EmailChannelList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []EmailChannel `json:"items"`
}

// Repository type metadata.
var (
	EmailChannelKind             = "EmailChannel"
	EmailChannelGroupKind        = schema.GroupKind{Group: Group, Kind: EmailChannelKind}.String()
	EmailChannelKindAPIVersion   = EmailChannelKind + "." + GroupVersion.String()
	EmailChannelGroupVersionKind = GroupVersion.WithKind(EmailChannelKind)
)

func init() {
	SchemeBuilder.Register(&EmailChannel{}, &EmailChannelList{})
}
