/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type PinpointEmailChannelObservation struct {
	MessagesPerSecond int64 `json:"messagesPerSecond" tf:"messages_per_second"`
}

type PinpointEmailChannelParameters struct {
	ApplicationID string `json:"applicationID" tf:"application_id"`

	ConfigurationSet *string `json:"configurationSet,omitempty" tf:"configuration_set"`

	Enabled *bool `json:"enabled,omitempty" tf:"enabled"`

	FromAddress string `json:"fromAddress" tf:"from_address"`

	Identity string `json:"identity" tf:"identity"`

	RoleARN *string `json:"roleARN,omitempty" tf:"role_arn"`
}

// PinpointEmailChannelSpec defines the desired state of PinpointEmailChannel
type PinpointEmailChannelSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       PinpointEmailChannelParameters `json:"forProvider"`
}

// PinpointEmailChannelStatus defines the observed state of PinpointEmailChannel.
type PinpointEmailChannelStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          PinpointEmailChannelObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// PinpointEmailChannel is the Schema for the PinpointEmailChannels API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tfaws}
type PinpointEmailChannel struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              PinpointEmailChannelSpec   `json:"spec"`
	Status            PinpointEmailChannelStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// PinpointEmailChannelList contains a list of PinpointEmailChannels
type PinpointEmailChannelList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []PinpointEmailChannel `json:"items"`
}

// Repository type metadata.
var (
	PinpointEmailChannelKind             = "PinpointEmailChannel"
	PinpointEmailChannelGroupKind        = schema.GroupKind{Group: Group, Kind: PinpointEmailChannelKind}.String()
	PinpointEmailChannelKindAPIVersion   = PinpointEmailChannelKind + "." + GroupVersion.String()
	PinpointEmailChannelGroupVersionKind = GroupVersion.WithKind(PinpointEmailChannelKind)
)

func init() {
	SchemeBuilder.Register(&PinpointEmailChannel{}, &PinpointEmailChannelList{})
}
