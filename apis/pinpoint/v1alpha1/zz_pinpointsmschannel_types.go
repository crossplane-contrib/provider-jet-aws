/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type PinpointSmsChannelObservation struct {
	PromotionalMessagesPerSecond int64 `json:"promotionalMessagesPerSecond" tf:"promotional_messages_per_second"`

	TransactionalMessagesPerSecond int64 `json:"transactionalMessagesPerSecond" tf:"transactional_messages_per_second"`
}

type PinpointSmsChannelParameters struct {
	ApplicationID string `json:"applicationID" tf:"application_id"`

	Enabled *bool `json:"enabled,omitempty" tf:"enabled"`

	SenderID *string `json:"senderID,omitempty" tf:"sender_id"`

	ShortCode *string `json:"shortCode,omitempty" tf:"short_code"`
}

// PinpointSmsChannelSpec defines the desired state of PinpointSmsChannel
type PinpointSmsChannelSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       PinpointSmsChannelParameters `json:"forProvider"`
}

// PinpointSmsChannelStatus defines the observed state of PinpointSmsChannel.
type PinpointSmsChannelStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          PinpointSmsChannelObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// PinpointSmsChannel is the Schema for the PinpointSmsChannels API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tfaws}
type PinpointSmsChannel struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              PinpointSmsChannelSpec   `json:"spec"`
	Status            PinpointSmsChannelStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// PinpointSmsChannelList contains a list of PinpointSmsChannels
type PinpointSmsChannelList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []PinpointSmsChannel `json:"items"`
}

// Repository type metadata.
var (
	PinpointSmsChannelKind             = "PinpointSmsChannel"
	PinpointSmsChannelGroupKind        = schema.GroupKind{Group: Group, Kind: PinpointSmsChannelKind}.String()
	PinpointSmsChannelKindAPIVersion   = PinpointSmsChannelKind + "." + GroupVersion.String()
	PinpointSmsChannelGroupVersionKind = GroupVersion.WithKind(PinpointSmsChannelKind)
)

func init() {
	SchemeBuilder.Register(&PinpointSmsChannel{}, &PinpointSmsChannelList{})
}
