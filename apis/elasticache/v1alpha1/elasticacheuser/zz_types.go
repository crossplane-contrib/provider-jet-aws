/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

// +kubebuilder:object:generate=true
// +groupName=elasticache.aws.tf.crossplane.io
// +versionName=v1alpha1

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1alpha1 "github.com/crossplane-contrib/provider-tf-aws/apis/elasticache/v1alpha1"
)

type ElasticacheUserObservation struct {
}

type ElasticacheUserParameters struct {
	AccessString string `json:"accessString" tf:"access_string"`

	Arn *string `json:"arn,omitempty" tf:"arn"`

	Engine string `json:"engine" tf:"engine"`

	NoPasswordRequired *bool `json:"noPasswordRequired,omitempty" tf:"no_password_required"`

	Passwords []string `json:"passwords,omitempty" tf:"passwords"`

	Tags map[string]string `json:"tags,omitempty" tf:"tags"`

	TagsAll map[string]string `json:"tagsAll,omitempty" tf:"tags_all"`

	UserId string `json:"userId" tf:"user_id"`

	UserName string `json:"userName" tf:"user_name"`
}

// ElasticacheUserSpec defines the desired state of ElasticacheUser
type ElasticacheUserSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       ElasticacheUserParameters `json:"forProvider"`
}

// ElasticacheUserStatus defines the observed state of ElasticacheUser.
type ElasticacheUserStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          ElasticacheUserObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ElasticacheUser is the Schema for the ElasticacheUsers API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type ElasticacheUser struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ElasticacheUserSpec   `json:"spec"`
	Status            ElasticacheUserStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ElasticacheUserList contains a list of ElasticacheUsers
type ElasticacheUserList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ElasticacheUser `json:"items"`
}

// Repository type metadata.
var (
	ElasticacheUserKind             = "ElasticacheUser"
	ElasticacheUserGroupKind        = schema.GroupKind{Group: v1alpha1.Group, Kind: ElasticacheUserKind}.String()
	ElasticacheUserKindAPIVersion   = ElasticacheUserKind + "." + v1alpha1.GroupVersion.String()
	ElasticacheUserGroupVersionKind = v1alpha1.GroupVersion.WithKind(ElasticacheUserKind)
)

func init() {
	v1alpha1.SchemeBuilder.Register(&ElasticacheUser{}, &ElasticacheUserList{})
}
