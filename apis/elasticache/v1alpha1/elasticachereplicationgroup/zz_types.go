/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

// +kubebuilder:object:generate=true
// +groupName=elasticache.aws.tf.crossplane.io
// +versionName=v1alpha1

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1alpha1 "github.com/crossplane-contrib/provider-tf-aws/apis/elasticache/v1alpha1"
)

type ClusterModeObservation struct {
}

type ClusterModeParameters struct {
	NumNodeGroups *int64 `json:"numNodeGroups,omitempty" tf:"num_node_groups"`

	ReplicasPerNodeGroup int64 `json:"replicasPerNodeGroup" tf:"replicas_per_node_group"`
}

type ElasticacheReplicationGroupObservation struct {
	Arn string `json:"arn" tf:"arn"`

	ClusterEnabled bool `json:"clusterEnabled" tf:"cluster_enabled"`

	ConfigurationEndpointAddress string `json:"configurationEndpointAddress" tf:"configuration_endpoint_address"`

	EngineVersionActual string `json:"engineVersionActual" tf:"engine_version_actual"`

	MemberClusters []string `json:"memberClusters" tf:"member_clusters"`

	PrimaryEndpointAddress string `json:"primaryEndpointAddress" tf:"primary_endpoint_address"`

	ReaderEndpointAddress string `json:"readerEndpointAddress" tf:"reader_endpoint_address"`
}

type ElasticacheReplicationGroupParameters struct {
	ApplyImmediately *bool `json:"applyImmediately,omitempty" tf:"apply_immediately"`

	AtRestEncryptionEnabled *bool `json:"atRestEncryptionEnabled,omitempty" tf:"at_rest_encryption_enabled"`

	AuthToken *string `json:"authToken,omitempty" tf:"auth_token"`

	AutoMinorVersionUpgrade *bool `json:"autoMinorVersionUpgrade,omitempty" tf:"auto_minor_version_upgrade"`

	AutomaticFailoverEnabled *bool `json:"automaticFailoverEnabled,omitempty" tf:"automatic_failover_enabled"`

	AvailabilityZones []string `json:"availabilityZones,omitempty" tf:"availability_zones"`

	ClusterMode []ClusterModeParameters `json:"clusterMode,omitempty" tf:"cluster_mode"`

	Engine *string `json:"engine,omitempty" tf:"engine"`

	EngineVersion *string `json:"engineVersion,omitempty" tf:"engine_version"`

	FinalSnapshotIdentifier *string `json:"finalSnapshotIdentifier,omitempty" tf:"final_snapshot_identifier"`

	GlobalReplicationGroupId *string `json:"globalReplicationGroupId,omitempty" tf:"global_replication_group_id"`

	KmsKeyId *string `json:"kmsKeyId,omitempty" tf:"kms_key_id"`

	MaintenanceWindow *string `json:"maintenanceWindow,omitempty" tf:"maintenance_window"`

	MultiAzEnabled *bool `json:"multiAzEnabled,omitempty" tf:"multi_az_enabled"`

	NodeType *string `json:"nodeType,omitempty" tf:"node_type"`

	NotificationTopicArn *string `json:"notificationTopicArn,omitempty" tf:"notification_topic_arn"`

	NumberCacheClusters *int64 `json:"numberCacheClusters,omitempty" tf:"number_cache_clusters"`

	ParameterGroupName *string `json:"parameterGroupName,omitempty" tf:"parameter_group_name"`

	Port *int64 `json:"port,omitempty" tf:"port"`

	ReplicationGroupDescription string `json:"replicationGroupDescription" tf:"replication_group_description"`

	ReplicationGroupId string `json:"replicationGroupId" tf:"replication_group_id"`

	SecurityGroupIds []string `json:"securityGroupIds,omitempty" tf:"security_group_ids"`

	SecurityGroupNames []string `json:"securityGroupNames,omitempty" tf:"security_group_names"`

	SnapshotArns []string `json:"snapshotArns,omitempty" tf:"snapshot_arns"`

	SnapshotName *string `json:"snapshotName,omitempty" tf:"snapshot_name"`

	SnapshotRetentionLimit *int64 `json:"snapshotRetentionLimit,omitempty" tf:"snapshot_retention_limit"`

	SnapshotWindow *string `json:"snapshotWindow,omitempty" tf:"snapshot_window"`

	SubnetGroupName *string `json:"subnetGroupName,omitempty" tf:"subnet_group_name"`

	Tags map[string]string `json:"tags,omitempty" tf:"tags"`

	TagsAll map[string]string `json:"tagsAll,omitempty" tf:"tags_all"`

	TransitEncryptionEnabled *bool `json:"transitEncryptionEnabled,omitempty" tf:"transit_encryption_enabled"`
}

// ElasticacheReplicationGroupSpec defines the desired state of ElasticacheReplicationGroup
type ElasticacheReplicationGroupSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       ElasticacheReplicationGroupParameters `json:"forProvider"`
}

// ElasticacheReplicationGroupStatus defines the observed state of ElasticacheReplicationGroup.
type ElasticacheReplicationGroupStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          ElasticacheReplicationGroupObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ElasticacheReplicationGroup is the Schema for the ElasticacheReplicationGroups API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type ElasticacheReplicationGroup struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ElasticacheReplicationGroupSpec   `json:"spec"`
	Status            ElasticacheReplicationGroupStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ElasticacheReplicationGroupList contains a list of ElasticacheReplicationGroups
type ElasticacheReplicationGroupList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ElasticacheReplicationGroup `json:"items"`
}

// Repository type metadata.
var (
	ElasticacheReplicationGroupKind             = "ElasticacheReplicationGroup"
	ElasticacheReplicationGroupGroupKind        = schema.GroupKind{Group: v1alpha1.Group, Kind: ElasticacheReplicationGroupKind}.String()
	ElasticacheReplicationGroupKindAPIVersion   = ElasticacheReplicationGroupKind + "." + v1alpha1.GroupVersion.String()
	ElasticacheReplicationGroupGroupVersionKind = v1alpha1.GroupVersion.WithKind(ElasticacheReplicationGroupKind)
)

func init() {
	v1alpha1.SchemeBuilder.Register(&ElasticacheReplicationGroup{}, &ElasticacheReplicationGroupList{})
}
