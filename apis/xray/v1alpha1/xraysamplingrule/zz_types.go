/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

// +kubebuilder:object:generate=true
// +groupName=xray.aws.tf.crossplane.io
// +versionName=v1alpha1

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1alpha1 "github.com/crossplane-contrib/provider-tf-aws/apis/xray/v1alpha1"
)

type XraySamplingRuleObservation struct {
	Arn string `json:"arn" tf:"arn"`
}

type XraySamplingRuleParameters struct {
	Attributes map[string]string `json:"attributes,omitempty" tf:"attributes"`

	FixedRate float64 `json:"fixedRate" tf:"fixed_rate"`

	Host string `json:"host" tf:"host"`

	HttpMethod string `json:"httpMethod" tf:"http_method"`

	Priority int64 `json:"priority" tf:"priority"`

	ReservoirSize int64 `json:"reservoirSize" tf:"reservoir_size"`

	ResourceArn string `json:"resourceArn" tf:"resource_arn"`

	RuleName *string `json:"ruleName,omitempty" tf:"rule_name"`

	ServiceName string `json:"serviceName" tf:"service_name"`

	ServiceType string `json:"serviceType" tf:"service_type"`

	Tags map[string]string `json:"tags,omitempty" tf:"tags"`

	TagsAll map[string]string `json:"tagsAll,omitempty" tf:"tags_all"`

	UrlPath string `json:"urlPath" tf:"url_path"`

	Version int64 `json:"version" tf:"version"`
}

// XraySamplingRuleSpec defines the desired state of XraySamplingRule
type XraySamplingRuleSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       XraySamplingRuleParameters `json:"forProvider"`
}

// XraySamplingRuleStatus defines the observed state of XraySamplingRule.
type XraySamplingRuleStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          XraySamplingRuleObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// XraySamplingRule is the Schema for the XraySamplingRules API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type XraySamplingRule struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              XraySamplingRuleSpec   `json:"spec"`
	Status            XraySamplingRuleStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// XraySamplingRuleList contains a list of XraySamplingRules
type XraySamplingRuleList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []XraySamplingRule `json:"items"`
}

// Repository type metadata.
var (
	XraySamplingRuleKind             = "XraySamplingRule"
	XraySamplingRuleGroupKind        = schema.GroupKind{Group: v1alpha1.Group, Kind: XraySamplingRuleKind}.String()
	XraySamplingRuleKindAPIVersion   = XraySamplingRuleKind + "." + v1alpha1.GroupVersion.String()
	XraySamplingRuleGroupVersionKind = v1alpha1.GroupVersion.WithKind(XraySamplingRuleKind)
)

func init() {
	v1alpha1.SchemeBuilder.Register(&XraySamplingRule{}, &XraySamplingRuleList{})
}
