/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type EncryptionConfigObservation struct {
}

type EncryptionConfigParameters struct {

	// +kubebuilder:validation:Optional
	KeyID *string `json:"keyId,omitempty" tf:"key_id,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +terrajet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`

	// +kubebuilder:validation:Required
	Type *string `json:"type" tf:"type,omitempty"`
}

// EncryptionConfigSpec defines the desired state of EncryptionConfig
type EncryptionConfigSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     EncryptionConfigParameters `json:"forProvider"`
}

// EncryptionConfigStatus defines the observed state of EncryptionConfig.
type EncryptionConfigStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        EncryptionConfigObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// EncryptionConfig is the Schema for the EncryptionConfigs API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tfaws}
type EncryptionConfig struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              EncryptionConfigSpec   `json:"spec"`
	Status            EncryptionConfigStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// EncryptionConfigList contains a list of EncryptionConfigs
type EncryptionConfigList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []EncryptionConfig `json:"items"`
}

// Repository type metadata.
var (
	EncryptionConfigKind             = "EncryptionConfig"
	EncryptionConfigGroupKind        = schema.GroupKind{Group: Group, Kind: EncryptionConfigKind}.String()
	EncryptionConfigKindAPIVersion   = EncryptionConfigKind + "." + GroupVersion.String()
	EncryptionConfigGroupVersionKind = GroupVersion.WithKind(EncryptionConfigKind)
)

func init() {
	SchemeBuilder.Register(&EncryptionConfig{}, &EncryptionConfigList{})
}
