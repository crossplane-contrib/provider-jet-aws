/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

// +kubebuilder:object:generate=true
// +groupName=xray.aws.tf.crossplane.io
// +versionName=v1alpha1

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1alpha1 "github.com/crossplane-contrib/provider-tf-aws/apis/xray/v1alpha1"
)

type XrayGroupObservation struct {
	Arn string `json:"arn" tf:"arn"`
}

type XrayGroupParameters struct {
	FilterExpression string `json:"filterExpression" tf:"filter_expression"`

	GroupName string `json:"groupName" tf:"group_name"`

	Tags map[string]string `json:"tags,omitempty" tf:"tags"`

	TagsAll map[string]string `json:"tagsAll,omitempty" tf:"tags_all"`
}

// XrayGroupSpec defines the desired state of XrayGroup
type XrayGroupSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       XrayGroupParameters `json:"forProvider"`
}

// XrayGroupStatus defines the observed state of XrayGroup.
type XrayGroupStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          XrayGroupObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// XrayGroup is the Schema for the XrayGroups API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type XrayGroup struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              XrayGroupSpec   `json:"spec"`
	Status            XrayGroupStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// XrayGroupList contains a list of XrayGroups
type XrayGroupList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []XrayGroup `json:"items"`
}

// Repository type metadata.
var (
	XrayGroupKind             = "XrayGroup"
	XrayGroupGroupKind        = schema.GroupKind{Group: v1alpha1.Group, Kind: XrayGroupKind}.String()
	XrayGroupKindAPIVersion   = XrayGroupKind + "." + v1alpha1.GroupVersion.String()
	XrayGroupGroupVersionKind = v1alpha1.GroupVersion.WithKind(XrayGroupKind)
)

func init() {
	v1alpha1.SchemeBuilder.Register(&XrayGroup{}, &XrayGroupList{})
}
