/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type SamplingRuleObservation struct {
	Arn *string `json:"arn,omitempty" tf:"arn,omitempty"`

	TagsAll map[string]*string `json:"tagsAll,omitempty" tf:"tags_all,omitempty"`
}

type SamplingRuleParameters struct {

	// +kubebuilder:validation:Optional
	Attributes map[string]*string `json:"attributes,omitempty" tf:"attributes,omitempty"`

	// +kubebuilder:validation:Required
	FixedRate *float64 `json:"fixedRate" tf:"fixed_rate,omitempty"`

	// +kubebuilder:validation:Required
	HTTPMethod *string `json:"httpMethod" tf:"http_method,omitempty"`

	// +kubebuilder:validation:Required
	Host *string `json:"host" tf:"host,omitempty"`

	// +kubebuilder:validation:Required
	Priority *int64 `json:"priority" tf:"priority,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +terrajet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`

	// +kubebuilder:validation:Required
	ReservoirSize *int64 `json:"reservoirSize" tf:"reservoir_size,omitempty"`

	// +kubebuilder:validation:Required
	ResourceArn *string `json:"resourceArn" tf:"resource_arn,omitempty"`

	// +kubebuilder:validation:Optional
	RuleName *string `json:"ruleName,omitempty" tf:"rule_name,omitempty"`

	// +kubebuilder:validation:Required
	ServiceName *string `json:"serviceName" tf:"service_name,omitempty"`

	// +kubebuilder:validation:Required
	ServiceType *string `json:"serviceType" tf:"service_type,omitempty"`

	// +kubebuilder:validation:Optional
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// +kubebuilder:validation:Required
	URLPath *string `json:"urlPath" tf:"url_path,omitempty"`

	// +kubebuilder:validation:Required
	Version *int64 `json:"version" tf:"version,omitempty"`
}

// SamplingRuleSpec defines the desired state of SamplingRule
type SamplingRuleSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     SamplingRuleParameters `json:"forProvider"`
}

// SamplingRuleStatus defines the observed state of SamplingRule.
type SamplingRuleStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        SamplingRuleObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// SamplingRule is the Schema for the SamplingRules API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tfaws}
type SamplingRule struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              SamplingRuleSpec   `json:"spec"`
	Status            SamplingRuleStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SamplingRuleList contains a list of SamplingRules
type SamplingRuleList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []SamplingRule `json:"items"`
}

// Repository type metadata.
var (
	SamplingRuleKind             = "SamplingRule"
	SamplingRuleGroupKind        = schema.GroupKind{Group: Group, Kind: SamplingRuleKind}.String()
	SamplingRuleKindAPIVersion   = SamplingRuleKind + "." + GroupVersion.String()
	SamplingRuleGroupVersionKind = GroupVersion.WithKind(SamplingRuleKind)
)

func init() {
	SchemeBuilder.Register(&SamplingRule{}, &SamplingRuleList{})
}
