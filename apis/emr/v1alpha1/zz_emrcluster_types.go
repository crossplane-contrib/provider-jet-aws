/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type BootstrapActionObservation struct {
}

type BootstrapActionParameters struct {
	Args []string `json:"args,omitempty" tf:"args"`

	Name string `json:"name" tf:"name"`

	Path string `json:"path" tf:"path"`
}

type ConfigurationsObservation struct {
}

type ConfigurationsParameters struct {
	Classification *string `json:"classification,omitempty" tf:"classification"`

	Properties map[string]string `json:"properties,omitempty" tf:"properties"`
}

type CoreInstanceFleetObservation struct {
	ID string `json:"id" tf:"id"`

	ProvisionedOnDemandCapacity int64 `json:"provisionedOnDemandCapacity" tf:"provisioned_on_demand_capacity"`

	ProvisionedSpotCapacity int64 `json:"provisionedSpotCapacity" tf:"provisioned_spot_capacity"`
}

type CoreInstanceFleetParameters struct {
	InstanceTypeConfigs []InstanceTypeConfigsParameters `json:"instanceTypeConfigs,omitempty" tf:"instance_type_configs"`

	LaunchSpecifications []LaunchSpecificationsParameters `json:"launchSpecifications,omitempty" tf:"launch_specifications"`

	Name *string `json:"name,omitempty" tf:"name"`

	TargetOnDemandCapacity *int64 `json:"targetOnDemandCapacity,omitempty" tf:"target_on_demand_capacity"`

	TargetSpotCapacity *int64 `json:"targetSpotCapacity,omitempty" tf:"target_spot_capacity"`
}

type CoreInstanceGroupEbsConfigObservation struct {
}

type CoreInstanceGroupEbsConfigParameters struct {
	Iops *int64 `json:"iops,omitempty" tf:"iops"`

	Size int64 `json:"size" tf:"size"`

	Type string `json:"type" tf:"type"`

	VolumesPerInstance *int64 `json:"volumesPerInstance,omitempty" tf:"volumes_per_instance"`
}

type CoreInstanceGroupObservation struct {
	ID string `json:"id" tf:"id"`
}

type CoreInstanceGroupParameters struct {
	AutoscalingPolicy *string `json:"autoscalingPolicy,omitempty" tf:"autoscaling_policy"`

	BidPrice *string `json:"bidPrice,omitempty" tf:"bid_price"`

	EbsConfig []CoreInstanceGroupEbsConfigParameters `json:"ebsConfig,omitempty" tf:"ebs_config"`

	InstanceCount *int64 `json:"instanceCount,omitempty" tf:"instance_count"`

	InstanceType string `json:"instanceType" tf:"instance_type"`

	Name *string `json:"name,omitempty" tf:"name"`
}

type EbsConfigObservation struct {
}

type EbsConfigParameters struct {
	Iops *int64 `json:"iops,omitempty" tf:"iops"`

	Size int64 `json:"size" tf:"size"`

	Type string `json:"type" tf:"type"`

	VolumesPerInstance *int64 `json:"volumesPerInstance,omitempty" tf:"volumes_per_instance"`
}

type Ec2AttributesObservation struct {
}

type Ec2AttributesParameters struct {
	AdditionalMasterSecurityGroups *string `json:"additionalMasterSecurityGroups,omitempty" tf:"additional_master_security_groups"`

	AdditionalSlaveSecurityGroups *string `json:"additionalSlaveSecurityGroups,omitempty" tf:"additional_slave_security_groups"`

	EmrManagedMasterSecurityGroup *string `json:"emrManagedMasterSecurityGroup,omitempty" tf:"emr_managed_master_security_group"`

	EmrManagedSlaveSecurityGroup *string `json:"emrManagedSlaveSecurityGroup,omitempty" tf:"emr_managed_slave_security_group"`

	InstanceProfile string `json:"instanceProfile" tf:"instance_profile"`

	KeyName *string `json:"keyName,omitempty" tf:"key_name"`

	ServiceAccessSecurityGroup *string `json:"serviceAccessSecurityGroup,omitempty" tf:"service_access_security_group"`

	SubnetID *string `json:"subnetID,omitempty" tf:"subnet_id"`

	SubnetIds []string `json:"subnetIds,omitempty" tf:"subnet_ids"`
}

type EmrClusterObservation struct {
	ARN string `json:"arn" tf:"arn"`

	ClusterState string `json:"clusterState" tf:"cluster_state"`

	MasterPublicDNS string `json:"masterPublicDNS" tf:"master_public_dns"`
}

type EmrClusterParameters struct {
	AdditionalInfo *string `json:"additionalInfo,omitempty" tf:"additional_info"`

	Applications []string `json:"applications,omitempty" tf:"applications"`

	AutoscalingRole *string `json:"autoscalingRole,omitempty" tf:"autoscaling_role"`

	BootstrapAction []BootstrapActionParameters `json:"bootstrapAction,omitempty" tf:"bootstrap_action"`

	Configurations *string `json:"configurations,omitempty" tf:"configurations"`

	ConfigurationsJSON *string `json:"configurationsJSON,omitempty" tf:"configurations_json"`

	CoreInstanceFleet []CoreInstanceFleetParameters `json:"coreInstanceFleet,omitempty" tf:"core_instance_fleet"`

	CoreInstanceGroup []CoreInstanceGroupParameters `json:"coreInstanceGroup,omitempty" tf:"core_instance_group"`

	CustomAmiID *string `json:"customAmiID,omitempty" tf:"custom_ami_id"`

	EbsRootVolumeSize *int64 `json:"ebsRootVolumeSize,omitempty" tf:"ebs_root_volume_size"`

	Ec2Attributes []Ec2AttributesParameters `json:"ec2Attributes,omitempty" tf:"ec2_attributes"`

	KeepJobFlowAliveWhenNoSteps *bool `json:"keepJobFlowAliveWhenNoSteps,omitempty" tf:"keep_job_flow_alive_when_no_steps"`

	KerberosAttributes []KerberosAttributesParameters `json:"kerberosAttributes,omitempty" tf:"kerberos_attributes"`

	LogURI *string `json:"logURI,omitempty" tf:"log_uri"`

	MasterInstanceFleet []MasterInstanceFleetParameters `json:"masterInstanceFleet,omitempty" tf:"master_instance_fleet"`

	MasterInstanceGroup []MasterInstanceGroupParameters `json:"masterInstanceGroup,omitempty" tf:"master_instance_group"`

	Name string `json:"name" tf:"name"`

	ReleaseLabel string `json:"releaseLabel" tf:"release_label"`

	ScaleDownBehavior *string `json:"scaleDownBehavior,omitempty" tf:"scale_down_behavior"`

	SecurityConfiguration *string `json:"securityConfiguration,omitempty" tf:"security_configuration"`

	ServiceRole string `json:"serviceRole" tf:"service_role"`

	Step []StepParameters `json:"step,omitempty" tf:"step"`

	StepConcurrencyLevel *int64 `json:"stepConcurrencyLevel,omitempty" tf:"step_concurrency_level"`

	Tags map[string]string `json:"tags,omitempty" tf:"tags"`

	TagsAll map[string]string `json:"tagsAll,omitempty" tf:"tags_all"`

	TerminationProtection *bool `json:"terminationProtection,omitempty" tf:"termination_protection"`

	VisibleToAllUsers *bool `json:"visibleToAllUsers,omitempty" tf:"visible_to_all_users"`
}

type HadoopJarStepObservation struct {
}

type HadoopJarStepParameters struct {
	Args []string `json:"args,omitempty" tf:"args"`

	Jar string `json:"jar" tf:"jar"`

	MainClass *string `json:"mainClass,omitempty" tf:"main_class"`

	Properties map[string]string `json:"properties,omitempty" tf:"properties"`
}

type InstanceTypeConfigsConfigurationsObservation struct {
}

type InstanceTypeConfigsConfigurationsParameters struct {
	Classification *string `json:"classification,omitempty" tf:"classification"`

	Properties map[string]string `json:"properties,omitempty" tf:"properties"`
}

type InstanceTypeConfigsEbsConfigObservation struct {
}

type InstanceTypeConfigsEbsConfigParameters struct {
	Iops *int64 `json:"iops,omitempty" tf:"iops"`

	Size int64 `json:"size" tf:"size"`

	Type string `json:"type" tf:"type"`

	VolumesPerInstance *int64 `json:"volumesPerInstance,omitempty" tf:"volumes_per_instance"`
}

type InstanceTypeConfigsObservation struct {
}

type InstanceTypeConfigsParameters struct {
	BidPrice *string `json:"bidPrice,omitempty" tf:"bid_price"`

	BidPriceAsPercentageOfOnDemandPrice *float64 `json:"bidPriceAsPercentageOfOnDemandPrice,omitempty" tf:"bid_price_as_percentage_of_on_demand_price"`

	Configurations []ConfigurationsParameters `json:"configurations,omitempty" tf:"configurations"`

	EbsConfig []EbsConfigParameters `json:"ebsConfig,omitempty" tf:"ebs_config"`

	InstanceType string `json:"instanceType" tf:"instance_type"`

	WeightedCapacity *int64 `json:"weightedCapacity,omitempty" tf:"weighted_capacity"`
}

type KerberosAttributesObservation struct {
}

type KerberosAttributesParameters struct {
	AdDomainJoinPassword *string `json:"adDomainJoinPassword,omitempty" tf:"ad_domain_join_password"`

	AdDomainJoinUser *string `json:"adDomainJoinUser,omitempty" tf:"ad_domain_join_user"`

	CrossRealmTrustPrincipalPassword *string `json:"crossRealmTrustPrincipalPassword,omitempty" tf:"cross_realm_trust_principal_password"`

	KdcAdminPassword string `json:"kdcAdminPassword" tf:"kdc_admin_password"`

	Realm string `json:"realm" tf:"realm"`
}

type LaunchSpecificationsObservation struct {
}

type LaunchSpecificationsOnDemandSpecificationObservation struct {
}

type LaunchSpecificationsOnDemandSpecificationParameters struct {
	AllocationStrategy string `json:"allocationStrategy" tf:"allocation_strategy"`
}

type LaunchSpecificationsParameters struct {
	OnDemandSpecification []OnDemandSpecificationParameters `json:"onDemandSpecification,omitempty" tf:"on_demand_specification"`

	SpotSpecification []SpotSpecificationParameters `json:"spotSpecification,omitempty" tf:"spot_specification"`
}

type LaunchSpecificationsSpotSpecificationObservation struct {
}

type LaunchSpecificationsSpotSpecificationParameters struct {
	AllocationStrategy string `json:"allocationStrategy" tf:"allocation_strategy"`

	BlockDurationMinutes *int64 `json:"blockDurationMinutes,omitempty" tf:"block_duration_minutes"`

	TimeoutAction string `json:"timeoutAction" tf:"timeout_action"`

	TimeoutDurationMinutes int64 `json:"timeoutDurationMinutes" tf:"timeout_duration_minutes"`
}

type MasterInstanceFleetInstanceTypeConfigsObservation struct {
}

type MasterInstanceFleetInstanceTypeConfigsParameters struct {
	BidPrice *string `json:"bidPrice,omitempty" tf:"bid_price"`

	BidPriceAsPercentageOfOnDemandPrice *float64 `json:"bidPriceAsPercentageOfOnDemandPrice,omitempty" tf:"bid_price_as_percentage_of_on_demand_price"`

	Configurations []InstanceTypeConfigsConfigurationsParameters `json:"configurations,omitempty" tf:"configurations"`

	EbsConfig []InstanceTypeConfigsEbsConfigParameters `json:"ebsConfig,omitempty" tf:"ebs_config"`

	InstanceType string `json:"instanceType" tf:"instance_type"`

	WeightedCapacity *int64 `json:"weightedCapacity,omitempty" tf:"weighted_capacity"`
}

type MasterInstanceFleetLaunchSpecificationsObservation struct {
}

type MasterInstanceFleetLaunchSpecificationsParameters struct {
	OnDemandSpecification []LaunchSpecificationsOnDemandSpecificationParameters `json:"onDemandSpecification,omitempty" tf:"on_demand_specification"`

	SpotSpecification []LaunchSpecificationsSpotSpecificationParameters `json:"spotSpecification,omitempty" tf:"spot_specification"`
}

type MasterInstanceFleetObservation struct {
	ID string `json:"id" tf:"id"`

	ProvisionedOnDemandCapacity int64 `json:"provisionedOnDemandCapacity" tf:"provisioned_on_demand_capacity"`

	ProvisionedSpotCapacity int64 `json:"provisionedSpotCapacity" tf:"provisioned_spot_capacity"`
}

type MasterInstanceFleetParameters struct {
	InstanceTypeConfigs []MasterInstanceFleetInstanceTypeConfigsParameters `json:"instanceTypeConfigs,omitempty" tf:"instance_type_configs"`

	LaunchSpecifications []MasterInstanceFleetLaunchSpecificationsParameters `json:"launchSpecifications,omitempty" tf:"launch_specifications"`

	Name *string `json:"name,omitempty" tf:"name"`

	TargetOnDemandCapacity *int64 `json:"targetOnDemandCapacity,omitempty" tf:"target_on_demand_capacity"`

	TargetSpotCapacity *int64 `json:"targetSpotCapacity,omitempty" tf:"target_spot_capacity"`
}

type MasterInstanceGroupEbsConfigObservation struct {
}

type MasterInstanceGroupEbsConfigParameters struct {
	Iops *int64 `json:"iops,omitempty" tf:"iops"`

	Size int64 `json:"size" tf:"size"`

	Type string `json:"type" tf:"type"`

	VolumesPerInstance *int64 `json:"volumesPerInstance,omitempty" tf:"volumes_per_instance"`
}

type MasterInstanceGroupObservation struct {
	ID string `json:"id" tf:"id"`
}

type MasterInstanceGroupParameters struct {
	BidPrice *string `json:"bidPrice,omitempty" tf:"bid_price"`

	EbsConfig []MasterInstanceGroupEbsConfigParameters `json:"ebsConfig,omitempty" tf:"ebs_config"`

	InstanceCount *int64 `json:"instanceCount,omitempty" tf:"instance_count"`

	InstanceType string `json:"instanceType" tf:"instance_type"`

	Name *string `json:"name,omitempty" tf:"name"`
}

type OnDemandSpecificationObservation struct {
}

type OnDemandSpecificationParameters struct {
	AllocationStrategy string `json:"allocationStrategy" tf:"allocation_strategy"`
}

type SpotSpecificationObservation struct {
}

type SpotSpecificationParameters struct {
	AllocationStrategy string `json:"allocationStrategy" tf:"allocation_strategy"`

	BlockDurationMinutes *int64 `json:"blockDurationMinutes,omitempty" tf:"block_duration_minutes"`

	TimeoutAction string `json:"timeoutAction" tf:"timeout_action"`

	TimeoutDurationMinutes int64 `json:"timeoutDurationMinutes" tf:"timeout_duration_minutes"`
}

type StepObservation struct {
}

type StepParameters struct {
	ActionOnFailure string `json:"actionOnFailure" tf:"action_on_failure"`

	HadoopJarStep []HadoopJarStepParameters `json:"hadoopJarStep" tf:"hadoop_jar_step"`

	Name string `json:"name" tf:"name"`
}

// EmrClusterSpec defines the desired state of EmrCluster
type EmrClusterSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       EmrClusterParameters `json:"forProvider"`
}

// EmrClusterStatus defines the observed state of EmrCluster.
type EmrClusterStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          EmrClusterObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// EmrCluster is the Schema for the EmrClusters API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tfaws}
type EmrCluster struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              EmrClusterSpec   `json:"spec"`
	Status            EmrClusterStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// EmrClusterList contains a list of EmrClusters
type EmrClusterList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []EmrCluster `json:"items"`
}

// Repository type metadata.
var (
	EmrClusterKind             = "EmrCluster"
	EmrClusterGroupKind        = schema.GroupKind{Group: Group, Kind: EmrClusterKind}.String()
	EmrClusterKindAPIVersion   = EmrClusterKind + "." + GroupVersion.String()
	EmrClusterGroupVersionKind = GroupVersion.WithKind(EmrClusterKind)
)

func init() {
	SchemeBuilder.Register(&EmrCluster{}, &EmrClusterList{})
}
