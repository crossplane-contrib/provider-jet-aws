/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type EmrInstanceGroupEbsConfigObservation struct {
}

type EmrInstanceGroupEbsConfigParameters struct {
	Iops *int64 `json:"iops,omitempty" tf:"iops"`

	Size int64 `json:"size" tf:"size"`

	Type string `json:"type" tf:"type"`

	VolumesPerInstance *int64 `json:"volumesPerInstance,omitempty" tf:"volumes_per_instance"`
}

type EmrInstanceGroupObservation struct {
	RunningInstanceCount int64 `json:"runningInstanceCount" tf:"running_instance_count"`

	Status string `json:"status" tf:"status"`
}

type EmrInstanceGroupParameters struct {
	AutoscalingPolicy *string `json:"autoscalingPolicy,omitempty" tf:"autoscaling_policy"`

	BidPrice *string `json:"bidPrice,omitempty" tf:"bid_price"`

	ClusterID string `json:"clusterID" tf:"cluster_id"`

	ConfigurationsJSON *string `json:"configurationsJSON,omitempty" tf:"configurations_json"`

	EbsConfig []EmrInstanceGroupEbsConfigParameters `json:"ebsConfig,omitempty" tf:"ebs_config"`

	EbsOptimized *bool `json:"ebsOptimized,omitempty" tf:"ebs_optimized"`

	InstanceCount *int64 `json:"instanceCount,omitempty" tf:"instance_count"`

	InstanceType string `json:"instanceType" tf:"instance_type"`

	Name *string `json:"name,omitempty" tf:"name"`
}

// EmrInstanceGroupSpec defines the desired state of EmrInstanceGroup
type EmrInstanceGroupSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       EmrInstanceGroupParameters `json:"forProvider"`
}

// EmrInstanceGroupStatus defines the observed state of EmrInstanceGroup.
type EmrInstanceGroupStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          EmrInstanceGroupObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// EmrInstanceGroup is the Schema for the EmrInstanceGroups API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tfaws}
type EmrInstanceGroup struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              EmrInstanceGroupSpec   `json:"spec"`
	Status            EmrInstanceGroupStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// EmrInstanceGroupList contains a list of EmrInstanceGroups
type EmrInstanceGroupList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []EmrInstanceGroup `json:"items"`
}

// Repository type metadata.
var (
	EmrInstanceGroupKind             = "EmrInstanceGroup"
	EmrInstanceGroupGroupKind        = schema.GroupKind{Group: Group, Kind: EmrInstanceGroupKind}.String()
	EmrInstanceGroupKindAPIVersion   = EmrInstanceGroupKind + "." + GroupVersion.String()
	EmrInstanceGroupGroupVersionKind = GroupVersion.WithKind(EmrInstanceGroupKind)
)

func init() {
	SchemeBuilder.Register(&EmrInstanceGroup{}, &EmrInstanceGroupList{})
}
