/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

// +kubebuilder:object:generate=true
// +groupName=emr.aws.tf.crossplane.io
// +versionName=v1alpha1

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1alpha1 "github.com/crossplane-contrib/provider-tf-aws/apis/emr/v1alpha1"
)

type ConfigurationsObservation struct {
}

type ConfigurationsParameters struct {
	Classification *string `json:"classification,omitempty" tf:"classification"`

	Properties map[string]string `json:"properties,omitempty" tf:"properties"`
}

type EbsConfigObservation struct {
}

type EbsConfigParameters struct {
	Iops *int64 `json:"iops,omitempty" tf:"iops"`

	Size int64 `json:"size" tf:"size"`

	Type string `json:"type" tf:"type"`

	VolumesPerInstance *int64 `json:"volumesPerInstance,omitempty" tf:"volumes_per_instance"`
}

type EmrInstanceFleetObservation struct {
	ProvisionedOnDemandCapacity int64 `json:"provisionedOnDemandCapacity" tf:"provisioned_on_demand_capacity"`

	ProvisionedSpotCapacity int64 `json:"provisionedSpotCapacity" tf:"provisioned_spot_capacity"`
}

type EmrInstanceFleetParameters struct {
	ClusterId string `json:"clusterId" tf:"cluster_id"`

	InstanceTypeConfigs []InstanceTypeConfigsParameters `json:"instanceTypeConfigs,omitempty" tf:"instance_type_configs"`

	LaunchSpecifications []LaunchSpecificationsParameters `json:"launchSpecifications,omitempty" tf:"launch_specifications"`

	Name *string `json:"name,omitempty" tf:"name"`

	TargetOnDemandCapacity *int64 `json:"targetOnDemandCapacity,omitempty" tf:"target_on_demand_capacity"`

	TargetSpotCapacity *int64 `json:"targetSpotCapacity,omitempty" tf:"target_spot_capacity"`
}

type InstanceTypeConfigsObservation struct {
}

type InstanceTypeConfigsParameters struct {
	BidPrice *string `json:"bidPrice,omitempty" tf:"bid_price"`

	BidPriceAsPercentageOfOnDemandPrice *float64 `json:"bidPriceAsPercentageOfOnDemandPrice,omitempty" tf:"bid_price_as_percentage_of_on_demand_price"`

	Configurations []ConfigurationsParameters `json:"configurations,omitempty" tf:"configurations"`

	EbsConfig []EbsConfigParameters `json:"ebsConfig,omitempty" tf:"ebs_config"`

	InstanceType string `json:"instanceType" tf:"instance_type"`

	WeightedCapacity *int64 `json:"weightedCapacity,omitempty" tf:"weighted_capacity"`
}

type LaunchSpecificationsObservation struct {
}

type LaunchSpecificationsParameters struct {
	OnDemandSpecification []OnDemandSpecificationParameters `json:"onDemandSpecification,omitempty" tf:"on_demand_specification"`

	SpotSpecification []SpotSpecificationParameters `json:"spotSpecification,omitempty" tf:"spot_specification"`
}

type OnDemandSpecificationObservation struct {
}

type OnDemandSpecificationParameters struct {
	AllocationStrategy string `json:"allocationStrategy" tf:"allocation_strategy"`
}

type SpotSpecificationObservation struct {
}

type SpotSpecificationParameters struct {
	AllocationStrategy string `json:"allocationStrategy" tf:"allocation_strategy"`

	BlockDurationMinutes *int64 `json:"blockDurationMinutes,omitempty" tf:"block_duration_minutes"`

	TimeoutAction string `json:"timeoutAction" tf:"timeout_action"`

	TimeoutDurationMinutes int64 `json:"timeoutDurationMinutes" tf:"timeout_duration_minutes"`
}

// EmrInstanceFleetSpec defines the desired state of EmrInstanceFleet
type EmrInstanceFleetSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       EmrInstanceFleetParameters `json:"forProvider"`
}

// EmrInstanceFleetStatus defines the observed state of EmrInstanceFleet.
type EmrInstanceFleetStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          EmrInstanceFleetObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// EmrInstanceFleet is the Schema for the EmrInstanceFleets API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type EmrInstanceFleet struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              EmrInstanceFleetSpec   `json:"spec"`
	Status            EmrInstanceFleetStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// EmrInstanceFleetList contains a list of EmrInstanceFleets
type EmrInstanceFleetList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []EmrInstanceFleet `json:"items"`
}

// Repository type metadata.
var (
	EmrInstanceFleetKind             = "EmrInstanceFleet"
	EmrInstanceFleetGroupKind        = schema.GroupKind{Group: v1alpha1.Group, Kind: EmrInstanceFleetKind}.String()
	EmrInstanceFleetKindAPIVersion   = EmrInstanceFleetKind + "." + v1alpha1.GroupVersion.String()
	EmrInstanceFleetGroupVersionKind = v1alpha1.GroupVersion.WithKind(EmrInstanceFleetKind)
)

func init() {
	v1alpha1.SchemeBuilder.Register(&EmrInstanceFleet{}, &EmrInstanceFleetList{})
}
