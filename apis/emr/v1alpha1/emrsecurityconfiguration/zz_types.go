/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

// +kubebuilder:object:generate=true
// +groupName=emr.aws.tf.crossplane.io
// +versionName=v1alpha1

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1alpha1 "github.com/crossplane-contrib/provider-tf-aws/apis/emr/v1alpha1"
)

type EmrSecurityConfigurationObservation struct {
	CreationDate string `json:"creationDate" tf:"creation_date"`
}

type EmrSecurityConfigurationParameters struct {
	Configuration string `json:"configuration" tf:"configuration"`

	Name *string `json:"name,omitempty" tf:"name"`

	NamePrefix *string `json:"namePrefix,omitempty" tf:"name_prefix"`
}

// EmrSecurityConfigurationSpec defines the desired state of EmrSecurityConfiguration
type EmrSecurityConfigurationSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       EmrSecurityConfigurationParameters `json:"forProvider"`
}

// EmrSecurityConfigurationStatus defines the observed state of EmrSecurityConfiguration.
type EmrSecurityConfigurationStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          EmrSecurityConfigurationObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// EmrSecurityConfiguration is the Schema for the EmrSecurityConfigurations API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type EmrSecurityConfiguration struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              EmrSecurityConfigurationSpec   `json:"spec"`
	Status            EmrSecurityConfigurationStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// EmrSecurityConfigurationList contains a list of EmrSecurityConfigurations
type EmrSecurityConfigurationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []EmrSecurityConfiguration `json:"items"`
}

// Repository type metadata.
var (
	EmrSecurityConfigurationKind             = "EmrSecurityConfiguration"
	EmrSecurityConfigurationGroupKind        = schema.GroupKind{Group: v1alpha1.Group, Kind: EmrSecurityConfigurationKind}.String()
	EmrSecurityConfigurationKindAPIVersion   = EmrSecurityConfigurationKind + "." + v1alpha1.GroupVersion.String()
	EmrSecurityConfigurationGroupVersionKind = v1alpha1.GroupVersion.WithKind(EmrSecurityConfigurationKind)
)

func init() {
	v1alpha1.SchemeBuilder.Register(&EmrSecurityConfiguration{}, &EmrSecurityConfigurationList{})
}
