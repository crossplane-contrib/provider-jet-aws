/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

// +kubebuilder:object:generate=true
// +groupName=glue.aws.tf.crossplane.io
// +versionName=v1alpha1

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1alpha1 "github.com/crossplane-contrib/provider-tf-aws/apis/glue/v1alpha1"
)

type GlueConnectionObservation struct {
	Arn string `json:"arn" tf:"arn"`
}

type GlueConnectionParameters struct {
	CatalogId *string `json:"catalogId,omitempty" tf:"catalog_id"`

	ConnectionProperties map[string]string `json:"connectionProperties,omitempty" tf:"connection_properties"`

	ConnectionType *string `json:"connectionType,omitempty" tf:"connection_type"`

	Description *string `json:"description,omitempty" tf:"description"`

	MatchCriteria []string `json:"matchCriteria,omitempty" tf:"match_criteria"`

	Name string `json:"name" tf:"name"`

	PhysicalConnectionRequirements []PhysicalConnectionRequirementsParameters `json:"physicalConnectionRequirements,omitempty" tf:"physical_connection_requirements"`
}

type PhysicalConnectionRequirementsObservation struct {
}

type PhysicalConnectionRequirementsParameters struct {
	AvailabilityZone *string `json:"availabilityZone,omitempty" tf:"availability_zone"`

	SecurityGroupIdList []string `json:"securityGroupIdList,omitempty" tf:"security_group_id_list"`

	SubnetId *string `json:"subnetId,omitempty" tf:"subnet_id"`
}

// GlueConnectionSpec defines the desired state of GlueConnection
type GlueConnectionSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       GlueConnectionParameters `json:"forProvider"`
}

// GlueConnectionStatus defines the observed state of GlueConnection.
type GlueConnectionStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          GlueConnectionObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// GlueConnection is the Schema for the GlueConnections API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type GlueConnection struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              GlueConnectionSpec   `json:"spec"`
	Status            GlueConnectionStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// GlueConnectionList contains a list of GlueConnections
type GlueConnectionList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []GlueConnection `json:"items"`
}

// Repository type metadata.
var (
	GlueConnectionKind             = "GlueConnection"
	GlueConnectionGroupKind        = schema.GroupKind{Group: v1alpha1.Group, Kind: GlueConnectionKind}.String()
	GlueConnectionKindAPIVersion   = GlueConnectionKind + "." + v1alpha1.GroupVersion.String()
	GlueConnectionGroupVersionKind = v1alpha1.GroupVersion.WithKind(GlueConnectionKind)
)

func init() {
	v1alpha1.SchemeBuilder.Register(&GlueConnection{}, &GlueConnectionList{})
}
