/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type DevEndpointObservation struct {
	Arn *string `json:"arn,omitempty" tf:"arn,omitempty"`

	AvailabilityZone *string `json:"availabilityZone,omitempty" tf:"availability_zone,omitempty"`

	FailureReason *string `json:"failureReason,omitempty" tf:"failure_reason,omitempty"`

	PrivateAddress *string `json:"privateAddress,omitempty" tf:"private_address,omitempty"`

	PublicAddress *string `json:"publicAddress,omitempty" tf:"public_address,omitempty"`

	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	TagsAll map[string]*string `json:"tagsAll,omitempty" tf:"tags_all,omitempty"`

	VpcID *string `json:"vpcId,omitempty" tf:"vpc_id,omitempty"`

	YarnEndpointAddress *string `json:"yarnEndpointAddress,omitempty" tf:"yarn_endpoint_address,omitempty"`

	ZeppelinRemoteSparkInterpreterPort *int64 `json:"zeppelinRemoteSparkInterpreterPort,omitempty" tf:"zeppelin_remote_spark_interpreter_port,omitempty"`
}

type DevEndpointParameters struct {

	// +kubebuilder:validation:Optional
	Arguments map[string]string `json:"arguments,omitempty" tf:"arguments,omitempty"`

	// +kubebuilder:validation:Optional
	ExtraJarsS3Path *string `json:"extraJarsS3Path,omitempty" tf:"extra_jars_s3_path,omitempty"`

	// +kubebuilder:validation:Optional
	ExtraPythonLibsS3Path *string `json:"extraPythonLibsS3Path,omitempty" tf:"extra_python_libs_s3_path,omitempty"`

	// +kubebuilder:validation:Optional
	GlueVersion *string `json:"glueVersion,omitempty" tf:"glue_version,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	NumberOfNodes *int64 `json:"numberOfNodes,omitempty" tf:"number_of_nodes,omitempty"`

	// +kubebuilder:validation:Optional
	NumberOfWorkers *int64 `json:"numberOfWorkers,omitempty" tf:"number_of_workers,omitempty"`

	// +kubebuilder:validation:Optional
	PublicKey *string `json:"publicKey,omitempty" tf:"public_key,omitempty"`

	// +kubebuilder:validation:Optional
	PublicKeys []*string `json:"publicKeys,omitempty" tf:"public_keys,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +terrajet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`

	// +kubebuilder:validation:Required
	RoleArn *string `json:"roleArn" tf:"role_arn,omitempty"`

	// +kubebuilder:validation:Optional
	SecurityConfiguration *string `json:"securityConfiguration,omitempty" tf:"security_configuration,omitempty"`

	// +kubebuilder:validation:Optional
	SecurityGroupIds []*string `json:"securityGroupIds,omitempty" tf:"security_group_ids,omitempty"`

	// +kubebuilder:validation:Optional
	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id,omitempty"`

	// +kubebuilder:validation:Optional
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// +kubebuilder:validation:Optional
	WorkerType *string `json:"workerType,omitempty" tf:"worker_type,omitempty"`
}

// DevEndpointSpec defines the desired state of DevEndpoint
type DevEndpointSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     DevEndpointParameters `json:"forProvider"`
}

// DevEndpointStatus defines the observed state of DevEndpoint.
type DevEndpointStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        DevEndpointObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// DevEndpoint is the Schema for the DevEndpoints API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tfaws}
type DevEndpoint struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DevEndpointSpec   `json:"spec"`
	Status            DevEndpointStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DevEndpointList contains a list of DevEndpoints
type DevEndpointList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DevEndpoint `json:"items"`
}

// Repository type metadata.
var (
	DevEndpointKind             = "DevEndpoint"
	DevEndpointGroupKind        = schema.GroupKind{Group: Group, Kind: DevEndpointKind}.String()
	DevEndpointKindAPIVersion   = DevEndpointKind + "." + GroupVersion.String()
	DevEndpointGroupVersionKind = GroupVersion.WithKind(DevEndpointKind)
)

func init() {
	SchemeBuilder.Register(&DevEndpoint{}, &DevEndpointList{})
}
