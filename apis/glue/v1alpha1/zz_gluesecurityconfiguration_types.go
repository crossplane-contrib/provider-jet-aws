/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type CloudwatchEncryptionObservation struct {
}

type CloudwatchEncryptionParameters struct {
	CloudwatchEncryptionMode *string `json:"cloudwatchEncryptionMode,omitempty" tf:"cloudwatch_encryption_mode"`

	KmsKeyARN *string `json:"kmsKeyARN,omitempty" tf:"kms_key_arn"`
}

type EncryptionConfigurationObservation struct {
}

type EncryptionConfigurationParameters struct {
	CloudwatchEncryption []CloudwatchEncryptionParameters `json:"cloudwatchEncryption" tf:"cloudwatch_encryption"`

	JobBookmarksEncryption []JobBookmarksEncryptionParameters `json:"jobBookmarksEncryption" tf:"job_bookmarks_encryption"`

	S3Encryption []S3EncryptionParameters `json:"s3Encryption" tf:"s3_encryption"`
}

type GlueSecurityConfigurationObservation struct {
}

type GlueSecurityConfigurationParameters struct {
	EncryptionConfiguration []EncryptionConfigurationParameters `json:"encryptionConfiguration" tf:"encryption_configuration"`

	Name string `json:"name" tf:"name"`
}

type JobBookmarksEncryptionObservation struct {
}

type JobBookmarksEncryptionParameters struct {
	JobBookmarksEncryptionMode *string `json:"jobBookmarksEncryptionMode,omitempty" tf:"job_bookmarks_encryption_mode"`

	KmsKeyARN *string `json:"kmsKeyARN,omitempty" tf:"kms_key_arn"`
}

type S3EncryptionObservation struct {
}

type S3EncryptionParameters struct {
	KmsKeyARN *string `json:"kmsKeyARN,omitempty" tf:"kms_key_arn"`

	S3EncryptionMode *string `json:"s3EncryptionMode,omitempty" tf:"s3_encryption_mode"`
}

// GlueSecurityConfigurationSpec defines the desired state of GlueSecurityConfiguration
type GlueSecurityConfigurationSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       GlueSecurityConfigurationParameters `json:"forProvider"`
}

// GlueSecurityConfigurationStatus defines the observed state of GlueSecurityConfiguration.
type GlueSecurityConfigurationStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          GlueSecurityConfigurationObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// GlueSecurityConfiguration is the Schema for the GlueSecurityConfigurations API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tfaws}
type GlueSecurityConfiguration struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              GlueSecurityConfigurationSpec   `json:"spec"`
	Status            GlueSecurityConfigurationStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// GlueSecurityConfigurationList contains a list of GlueSecurityConfigurations
type GlueSecurityConfigurationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []GlueSecurityConfiguration `json:"items"`
}

// Repository type metadata.
var (
	GlueSecurityConfigurationKind             = "GlueSecurityConfiguration"
	GlueSecurityConfigurationGroupKind        = schema.GroupKind{Group: Group, Kind: GlueSecurityConfigurationKind}.String()
	GlueSecurityConfigurationKindAPIVersion   = GlueSecurityConfigurationKind + "." + GroupVersion.String()
	GlueSecurityConfigurationGroupVersionKind = GroupVersion.WithKind(GlueSecurityConfigurationKind)
)

func init() {
	SchemeBuilder.Register(&GlueSecurityConfiguration{}, &GlueSecurityConfigurationList{})
}
