/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ConnectionPasswordEncryptionObservation struct {
}

type ConnectionPasswordEncryptionParameters struct {

	// +kubebuilder:validation:Optional
	AwsKmsKeyID *string `json:"awsKmsKeyId,omitempty" tf:"aws_kms_key_id,omitempty"`

	// +kubebuilder:validation:Required
	ReturnConnectionPasswordEncrypted *bool `json:"returnConnectionPasswordEncrypted" tf:"return_connection_password_encrypted,omitempty"`
}

type DataCatalogEncryptionSettingsObservation struct {
}

type DataCatalogEncryptionSettingsParameters struct {

	// +kubebuilder:validation:Required
	ConnectionPasswordEncryption []ConnectionPasswordEncryptionParameters `json:"connectionPasswordEncryption" tf:"connection_password_encryption,omitempty"`

	// +kubebuilder:validation:Required
	EncryptionAtRest []EncryptionAtRestParameters `json:"encryptionAtRest" tf:"encryption_at_rest,omitempty"`
}

type EncryptionAtRestObservation struct {
}

type EncryptionAtRestParameters struct {

	// +kubebuilder:validation:Required
	CatalogEncryptionMode *string `json:"catalogEncryptionMode" tf:"catalog_encryption_mode,omitempty"`

	// +kubebuilder:validation:Optional
	SseAwsKmsKeyID *string `json:"sseAwsKmsKeyId,omitempty" tf:"sse_aws_kms_key_id,omitempty"`
}

// DataCatalogEncryptionSettingsSpec defines the desired state of DataCatalogEncryptionSettings
type DataCatalogEncryptionSettingsSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     DataCatalogEncryptionSettingsParameters `json:"forProvider"`
}

// DataCatalogEncryptionSettingsStatus defines the observed state of DataCatalogEncryptionSettings.
type DataCatalogEncryptionSettingsStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        DataCatalogEncryptionSettingsObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// DataCatalogEncryptionSettings is the Schema for the DataCatalogEncryptionSettingss API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tfaws}
type DataCatalogEncryptionSettings struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DataCatalogEncryptionSettingsSpec   `json:"spec"`
	Status            DataCatalogEncryptionSettingsStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DataCatalogEncryptionSettingsList contains a list of DataCatalogEncryptionSettingss
type DataCatalogEncryptionSettingsList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DataCatalogEncryptionSettings `json:"items"`
}

// Repository type metadata.
var (
	DataCatalogEncryptionSettingsKind             = "DataCatalogEncryptionSettings"
	DataCatalogEncryptionSettingsGroupKind        = schema.GroupKind{Group: Group, Kind: DataCatalogEncryptionSettingsKind}.String()
	DataCatalogEncryptionSettingsKindAPIVersion   = DataCatalogEncryptionSettingsKind + "." + GroupVersion.String()
	DataCatalogEncryptionSettingsGroupVersionKind = GroupVersion.WithKind(DataCatalogEncryptionSettingsKind)
)

func init() {
	SchemeBuilder.Register(&DataCatalogEncryptionSettings{}, &DataCatalogEncryptionSettingsList{})
}
