/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

// +kubebuilder:object:generate=true
// +groupName=glue.aws.tf.crossplane.io
// +versionName=v1alpha1

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1alpha1 "github.com/crossplane-contrib/provider-tf-aws/apis/glue/v1alpha1"
)

type GlueRegistryObservation struct {
	Arn string `json:"arn" tf:"arn"`
}

type GlueRegistryParameters struct {
	Description *string `json:"description,omitempty" tf:"description"`

	RegistryName string `json:"registryName" tf:"registry_name"`

	Tags map[string]string `json:"tags,omitempty" tf:"tags"`

	TagsAll map[string]string `json:"tagsAll,omitempty" tf:"tags_all"`
}

// GlueRegistrySpec defines the desired state of GlueRegistry
type GlueRegistrySpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       GlueRegistryParameters `json:"forProvider"`
}

// GlueRegistryStatus defines the observed state of GlueRegistry.
type GlueRegistryStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          GlueRegistryObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// GlueRegistry is the Schema for the GlueRegistrys API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type GlueRegistry struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              GlueRegistrySpec   `json:"spec"`
	Status            GlueRegistryStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// GlueRegistryList contains a list of GlueRegistrys
type GlueRegistryList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []GlueRegistry `json:"items"`
}

// Repository type metadata.
var (
	GlueRegistryKind             = "GlueRegistry"
	GlueRegistryGroupKind        = schema.GroupKind{Group: v1alpha1.Group, Kind: GlueRegistryKind}.String()
	GlueRegistryKindAPIVersion   = GlueRegistryKind + "." + v1alpha1.GroupVersion.String()
	GlueRegistryGroupVersionKind = v1alpha1.GroupVersion.WithKind(GlueRegistryKind)
)

func init() {
	v1alpha1.SchemeBuilder.Register(&GlueRegistry{}, &GlueRegistryList{})
}
