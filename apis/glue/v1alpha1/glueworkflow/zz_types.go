/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

// +kubebuilder:object:generate=true
// +groupName=glue.aws.tf.crossplane.io
// +versionName=v1alpha1

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1alpha1 "github.com/crossplane-contrib/provider-tf-aws/apis/glue/v1alpha1"
)

type GlueWorkflowObservation struct {
	Arn string `json:"arn" tf:"arn"`
}

type GlueWorkflowParameters struct {
	DefaultRunProperties map[string]string `json:"defaultRunProperties,omitempty" tf:"default_run_properties"`

	Description *string `json:"description,omitempty" tf:"description"`

	MaxConcurrentRuns *int64 `json:"maxConcurrentRuns,omitempty" tf:"max_concurrent_runs"`

	Name *string `json:"name,omitempty" tf:"name"`

	Tags map[string]string `json:"tags,omitempty" tf:"tags"`

	TagsAll map[string]string `json:"tagsAll,omitempty" tf:"tags_all"`
}

// GlueWorkflowSpec defines the desired state of GlueWorkflow
type GlueWorkflowSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       GlueWorkflowParameters `json:"forProvider"`
}

// GlueWorkflowStatus defines the observed state of GlueWorkflow.
type GlueWorkflowStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          GlueWorkflowObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// GlueWorkflow is the Schema for the GlueWorkflows API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type GlueWorkflow struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              GlueWorkflowSpec   `json:"spec"`
	Status            GlueWorkflowStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// GlueWorkflowList contains a list of GlueWorkflows
type GlueWorkflowList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []GlueWorkflow `json:"items"`
}

// Repository type metadata.
var (
	GlueWorkflowKind             = "GlueWorkflow"
	GlueWorkflowGroupKind        = schema.GroupKind{Group: v1alpha1.Group, Kind: GlueWorkflowKind}.String()
	GlueWorkflowKindAPIVersion   = GlueWorkflowKind + "." + v1alpha1.GroupVersion.String()
	GlueWorkflowGroupVersionKind = v1alpha1.GroupVersion.WithKind(GlueWorkflowKind)
)

func init() {
	v1alpha1.SchemeBuilder.Register(&GlueWorkflow{}, &GlueWorkflowList{})
}
