/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ActionsNotificationPropertyObservation struct {
}

type ActionsNotificationPropertyParameters struct {

	// +kubebuilder:validation:Optional
	NotifyDelayAfter *int64 `json:"notifyDelayAfter,omitempty" tf:"notify_delay_after,omitempty"`
}

type ActionsObservation struct {
}

type ActionsParameters struct {

	// +kubebuilder:validation:Optional
	Arguments map[string]*string `json:"arguments,omitempty" tf:"arguments,omitempty"`

	// +kubebuilder:validation:Optional
	CrawlerName *string `json:"crawlerName,omitempty" tf:"crawler_name,omitempty"`

	// +kubebuilder:validation:Optional
	JobName *string `json:"jobName,omitempty" tf:"job_name,omitempty"`

	// +kubebuilder:validation:Optional
	NotificationProperty []ActionsNotificationPropertyParameters `json:"notificationProperty,omitempty" tf:"notification_property,omitempty"`

	// +kubebuilder:validation:Optional
	SecurityConfiguration *string `json:"securityConfiguration,omitempty" tf:"security_configuration,omitempty"`

	// +kubebuilder:validation:Optional
	Timeout *int64 `json:"timeout,omitempty" tf:"timeout,omitempty"`
}

type ConditionsObservation struct {
}

type ConditionsParameters struct {

	// +kubebuilder:validation:Optional
	CrawlState *string `json:"crawlState,omitempty" tf:"crawl_state,omitempty"`

	// +kubebuilder:validation:Optional
	CrawlerName *string `json:"crawlerName,omitempty" tf:"crawler_name,omitempty"`

	// +kubebuilder:validation:Optional
	JobName *string `json:"jobName,omitempty" tf:"job_name,omitempty"`

	// +kubebuilder:validation:Optional
	LogicalOperator *string `json:"logicalOperator,omitempty" tf:"logical_operator,omitempty"`

	// +kubebuilder:validation:Optional
	State *string `json:"state,omitempty" tf:"state,omitempty"`
}

type PredicateObservation struct {
}

type PredicateParameters struct {

	// +kubebuilder:validation:Required
	Conditions []ConditionsParameters `json:"conditions" tf:"conditions,omitempty"`

	// +kubebuilder:validation:Optional
	Logical *string `json:"logical,omitempty" tf:"logical,omitempty"`
}

type TriggerObservation struct {
	Arn *string `json:"arn,omitempty" tf:"arn,omitempty"`

	State *string `json:"state,omitempty" tf:"state,omitempty"`

	TagsAll map[string]*string `json:"tagsAll,omitempty" tf:"tags_all,omitempty"`
}

type TriggerParameters struct {

	// +kubebuilder:validation:Required
	Actions []ActionsParameters `json:"actions" tf:"actions,omitempty"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	Predicate []PredicateParameters `json:"predicate,omitempty" tf:"predicate,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +terrajet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`

	// +kubebuilder:validation:Optional
	Schedule *string `json:"schedule,omitempty" tf:"schedule,omitempty"`

	// +kubebuilder:validation:Optional
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// +kubebuilder:validation:Required
	Type *string `json:"type" tf:"type,omitempty"`

	// +kubebuilder:validation:Optional
	WorkflowName *string `json:"workflowName,omitempty" tf:"workflow_name,omitempty"`
}

// TriggerSpec defines the desired state of Trigger
type TriggerSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     TriggerParameters `json:"forProvider"`
}

// TriggerStatus defines the observed state of Trigger.
type TriggerStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        TriggerObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Trigger is the Schema for the Triggers API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tfaws}
type Trigger struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              TriggerSpec   `json:"spec"`
	Status            TriggerStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// TriggerList contains a list of Triggers
type TriggerList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Trigger `json:"items"`
}

// Repository type metadata.
var (
	TriggerKind             = "Trigger"
	TriggerGroupKind        = schema.GroupKind{Group: Group, Kind: TriggerKind}.String()
	TriggerKindAPIVersion   = TriggerKind + "." + GroupVersion.String()
	TriggerGroupVersionKind = GroupVersion.WithKind(TriggerKind)
)

func init() {
	SchemeBuilder.Register(&Trigger{}, &TriggerList{})
}
