/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type PartitionObservation struct {
	CreationTime *string `json:"creationTime,omitempty" tf:"creation_time,omitempty"`

	LastAccessedTime *string `json:"lastAccessedTime,omitempty" tf:"last_accessed_time,omitempty"`

	LastAnalyzedTime *string `json:"lastAnalyzedTime,omitempty" tf:"last_analyzed_time,omitempty"`
}

type PartitionParameters struct {

	// +kubebuilder:validation:Optional
	CatalogID *string `json:"catalogId,omitempty" tf:"catalog_id,omitempty"`

	// +kubebuilder:validation:Required
	DatabaseName *string `json:"databaseName" tf:"database_name,omitempty"`

	// +kubebuilder:validation:Optional
	Parameters map[string]*string `json:"parameters,omitempty" tf:"parameters,omitempty"`

	// +kubebuilder:validation:Required
	PartitionValues []*string `json:"partitionValues" tf:"partition_values,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +terrajet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`

	// +kubebuilder:validation:Optional
	StorageDescriptor []PartitionStorageDescriptorParameters `json:"storageDescriptor,omitempty" tf:"storage_descriptor,omitempty"`

	// +kubebuilder:validation:Required
	TableName *string `json:"tableName" tf:"table_name,omitempty"`
}

type PartitionStorageDescriptorObservation struct {
}

type PartitionStorageDescriptorParameters struct {

	// +kubebuilder:validation:Optional
	BucketColumns []*string `json:"bucketColumns,omitempty" tf:"bucket_columns,omitempty"`

	// +kubebuilder:validation:Optional
	Columns []StorageDescriptorColumnsParameters `json:"columns,omitempty" tf:"columns,omitempty"`

	// +kubebuilder:validation:Optional
	Compressed *bool `json:"compressed,omitempty" tf:"compressed,omitempty"`

	// +kubebuilder:validation:Optional
	InputFormat *string `json:"inputFormat,omitempty" tf:"input_format,omitempty"`

	// +kubebuilder:validation:Optional
	Location *string `json:"location,omitempty" tf:"location,omitempty"`

	// +kubebuilder:validation:Optional
	NumberOfBuckets *int64 `json:"numberOfBuckets,omitempty" tf:"number_of_buckets,omitempty"`

	// +kubebuilder:validation:Optional
	OutputFormat *string `json:"outputFormat,omitempty" tf:"output_format,omitempty"`

	// +kubebuilder:validation:Optional
	Parameters map[string]*string `json:"parameters,omitempty" tf:"parameters,omitempty"`

	// +kubebuilder:validation:Optional
	SerDeInfo []StorageDescriptorSerDeInfoParameters `json:"serDeInfo,omitempty" tf:"ser_de_info,omitempty"`

	// +kubebuilder:validation:Optional
	SkewedInfo []StorageDescriptorSkewedInfoParameters `json:"skewedInfo,omitempty" tf:"skewed_info,omitempty"`

	// +kubebuilder:validation:Optional
	SortColumns []StorageDescriptorSortColumnsParameters `json:"sortColumns,omitempty" tf:"sort_columns,omitempty"`

	// +kubebuilder:validation:Optional
	StoredAsSubDirectories *bool `json:"storedAsSubDirectories,omitempty" tf:"stored_as_sub_directories,omitempty"`
}

type StorageDescriptorColumnsObservation struct {
}

type StorageDescriptorColumnsParameters struct {

	// +kubebuilder:validation:Optional
	Comment *string `json:"comment,omitempty" tf:"comment,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type StorageDescriptorSerDeInfoObservation struct {
}

type StorageDescriptorSerDeInfoParameters struct {

	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	Parameters map[string]*string `json:"parameters,omitempty" tf:"parameters,omitempty"`

	// +kubebuilder:validation:Optional
	SerializationLibrary *string `json:"serializationLibrary,omitempty" tf:"serialization_library,omitempty"`
}

type StorageDescriptorSkewedInfoObservation struct {
}

type StorageDescriptorSkewedInfoParameters struct {

	// +kubebuilder:validation:Optional
	SkewedColumnNames []*string `json:"skewedColumnNames,omitempty" tf:"skewed_column_names,omitempty"`

	// +kubebuilder:validation:Optional
	SkewedColumnValueLocationMaps map[string]*string `json:"skewedColumnValueLocationMaps,omitempty" tf:"skewed_column_value_location_maps,omitempty"`

	// +kubebuilder:validation:Optional
	SkewedColumnValues []*string `json:"skewedColumnValues,omitempty" tf:"skewed_column_values,omitempty"`
}

type StorageDescriptorSortColumnsObservation struct {
}

type StorageDescriptorSortColumnsParameters struct {

	// +kubebuilder:validation:Required
	Column *string `json:"column" tf:"column,omitempty"`

	// +kubebuilder:validation:Required
	SortOrder *int64 `json:"sortOrder" tf:"sort_order,omitempty"`
}

// PartitionSpec defines the desired state of Partition
type PartitionSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     PartitionParameters `json:"forProvider"`
}

// PartitionStatus defines the observed state of Partition.
type PartitionStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        PartitionObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Partition is the Schema for the Partitions API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tfaws}
type Partition struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              PartitionSpec   `json:"spec"`
	Status            PartitionStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// PartitionList contains a list of Partitions
type PartitionList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Partition `json:"items"`
}

// Repository type metadata.
var (
	PartitionKind             = "Partition"
	PartitionGroupKind        = schema.GroupKind{Group: Group, Kind: PartitionKind}.String()
	PartitionKindAPIVersion   = PartitionKind + "." + GroupVersion.String()
	PartitionGroupVersionKind = GroupVersion.WithKind(PartitionKind)
)

func init() {
	SchemeBuilder.Register(&Partition{}, &PartitionList{})
}
