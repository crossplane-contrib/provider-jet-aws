/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type BatchJobQueueObservation struct {
	ARN string `json:"arn" tf:"arn"`
}

type BatchJobQueueParameters struct {
	ComputeEnvironments []string `json:"computeEnvironments" tf:"compute_environments"`

	Name string `json:"name" tf:"name"`

	Priority int64 `json:"priority" tf:"priority"`

	State string `json:"state" tf:"state"`

	Tags map[string]string `json:"tags,omitempty" tf:"tags"`

	TagsAll map[string]string `json:"tagsAll,omitempty" tf:"tags_all"`
}

// BatchJobQueueSpec defines the desired state of BatchJobQueue
type BatchJobQueueSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       BatchJobQueueParameters `json:"forProvider"`
}

// BatchJobQueueStatus defines the observed state of BatchJobQueue.
type BatchJobQueueStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          BatchJobQueueObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// BatchJobQueue is the Schema for the BatchJobQueues API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tfaws}
type BatchJobQueue struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              BatchJobQueueSpec   `json:"spec"`
	Status            BatchJobQueueStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// BatchJobQueueList contains a list of BatchJobQueues
type BatchJobQueueList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []BatchJobQueue `json:"items"`
}

// Repository type metadata.
var (
	BatchJobQueueKind             = "BatchJobQueue"
	BatchJobQueueGroupKind        = schema.GroupKind{Group: Group, Kind: BatchJobQueueKind}.String()
	BatchJobQueueKindAPIVersion   = BatchJobQueueKind + "." + GroupVersion.String()
	BatchJobQueueGroupVersionKind = GroupVersion.WithKind(BatchJobQueueKind)
)

func init() {
	SchemeBuilder.Register(&BatchJobQueue{}, &BatchJobQueueList{})
}
