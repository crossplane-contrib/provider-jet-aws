/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

// +kubebuilder:object:generate=true
// +groupName=batch.aws.tf.crossplane.io
// +versionName=v1alpha1

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1alpha1 "github.com/crossplane-contrib/provider-tf-aws/apis/batch/v1alpha1"
)

type BatchComputeEnvironmentObservation struct {
	Arn string `json:"arn" tf:"arn"`

	EcsClusterArn string `json:"ecsClusterArn" tf:"ecs_cluster_arn"`

	Status string `json:"status" tf:"status"`

	StatusReason string `json:"statusReason" tf:"status_reason"`
}

type BatchComputeEnvironmentParameters struct {
	ComputeEnvironmentName *string `json:"computeEnvironmentName,omitempty" tf:"compute_environment_name"`

	ComputeEnvironmentNamePrefix *string `json:"computeEnvironmentNamePrefix,omitempty" tf:"compute_environment_name_prefix"`

	ComputeResources []ComputeResourcesParameters `json:"computeResources,omitempty" tf:"compute_resources"`

	ServiceRole *string `json:"serviceRole,omitempty" tf:"service_role"`

	State *string `json:"state,omitempty" tf:"state"`

	Tags map[string]string `json:"tags,omitempty" tf:"tags"`

	TagsAll map[string]string `json:"tagsAll,omitempty" tf:"tags_all"`

	Type string `json:"type" tf:"type"`
}

type ComputeResourcesObservation struct {
}

type ComputeResourcesParameters struct {
	AllocationStrategy *string `json:"allocationStrategy,omitempty" tf:"allocation_strategy"`

	BidPercentage *int64 `json:"bidPercentage,omitempty" tf:"bid_percentage"`

	DesiredVcpus *int64 `json:"desiredVcpus,omitempty" tf:"desired_vcpus"`

	Ec2KeyPair *string `json:"ec2KeyPair,omitempty" tf:"ec2_key_pair"`

	ImageId *string `json:"imageId,omitempty" tf:"image_id"`

	InstanceRole *string `json:"instanceRole,omitempty" tf:"instance_role"`

	InstanceType []string `json:"instanceType,omitempty" tf:"instance_type"`

	LaunchTemplate []LaunchTemplateParameters `json:"launchTemplate,omitempty" tf:"launch_template"`

	MaxVcpus int64 `json:"maxVcpus" tf:"max_vcpus"`

	MinVcpus *int64 `json:"minVcpus,omitempty" tf:"min_vcpus"`

	SecurityGroupIds []string `json:"securityGroupIds" tf:"security_group_ids"`

	SpotIamFleetRole *string `json:"spotIamFleetRole,omitempty" tf:"spot_iam_fleet_role"`

	Subnets []string `json:"subnets" tf:"subnets"`

	Tags map[string]string `json:"tags,omitempty" tf:"tags"`

	Type string `json:"type" tf:"type"`
}

type LaunchTemplateObservation struct {
}

type LaunchTemplateParameters struct {
	LaunchTemplateId *string `json:"launchTemplateId,omitempty" tf:"launch_template_id"`

	LaunchTemplateName *string `json:"launchTemplateName,omitempty" tf:"launch_template_name"`

	Version *string `json:"version,omitempty" tf:"version"`
}

// BatchComputeEnvironmentSpec defines the desired state of BatchComputeEnvironment
type BatchComputeEnvironmentSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       BatchComputeEnvironmentParameters `json:"forProvider"`
}

// BatchComputeEnvironmentStatus defines the observed state of BatchComputeEnvironment.
type BatchComputeEnvironmentStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          BatchComputeEnvironmentObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// BatchComputeEnvironment is the Schema for the BatchComputeEnvironments API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type BatchComputeEnvironment struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              BatchComputeEnvironmentSpec   `json:"spec"`
	Status            BatchComputeEnvironmentStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// BatchComputeEnvironmentList contains a list of BatchComputeEnvironments
type BatchComputeEnvironmentList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []BatchComputeEnvironment `json:"items"`
}

// Repository type metadata.
var (
	BatchComputeEnvironmentKind             = "BatchComputeEnvironment"
	BatchComputeEnvironmentGroupKind        = schema.GroupKind{Group: v1alpha1.Group, Kind: BatchComputeEnvironmentKind}.String()
	BatchComputeEnvironmentKindAPIVersion   = BatchComputeEnvironmentKind + "." + v1alpha1.GroupVersion.String()
	BatchComputeEnvironmentGroupVersionKind = v1alpha1.GroupVersion.WithKind(BatchComputeEnvironmentKind)
)

func init() {
	v1alpha1.SchemeBuilder.Register(&BatchComputeEnvironment{}, &BatchComputeEnvironmentList{})
}
