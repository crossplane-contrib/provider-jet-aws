/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

// +kubebuilder:object:generate=true
// +groupName=batch.aws.tf.crossplane.io
// +versionName=v1alpha1

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1alpha1 "github.com/crossplane-contrib/provider-tf-aws/apis/batch/v1alpha1"
)

type BatchJobDefinitionObservation struct {
	Arn string `json:"arn" tf:"arn"`

	Revision int64 `json:"revision" tf:"revision"`
}

type BatchJobDefinitionParameters struct {
	ContainerProperties *string `json:"containerProperties,omitempty" tf:"container_properties"`

	Name string `json:"name" tf:"name"`

	Parameters map[string]string `json:"parameters,omitempty" tf:"parameters"`

	PlatformCapabilities []string `json:"platformCapabilities,omitempty" tf:"platform_capabilities"`

	PropagateTags *bool `json:"propagateTags,omitempty" tf:"propagate_tags"`

	RetryStrategy []RetryStrategyParameters `json:"retryStrategy,omitempty" tf:"retry_strategy"`

	Tags map[string]string `json:"tags,omitempty" tf:"tags"`

	TagsAll map[string]string `json:"tagsAll,omitempty" tf:"tags_all"`

	Timeout []TimeoutParameters `json:"timeout,omitempty" tf:"timeout"`

	Type string `json:"type" tf:"type"`
}

type EvaluateOnExitObservation struct {
}

type EvaluateOnExitParameters struct {
	Action string `json:"action" tf:"action"`

	OnExitCode *string `json:"onExitCode,omitempty" tf:"on_exit_code"`

	OnReason *string `json:"onReason,omitempty" tf:"on_reason"`

	OnStatusReason *string `json:"onStatusReason,omitempty" tf:"on_status_reason"`
}

type RetryStrategyObservation struct {
}

type RetryStrategyParameters struct {
	Attempts *int64 `json:"attempts,omitempty" tf:"attempts"`

	EvaluateOnExit []EvaluateOnExitParameters `json:"evaluateOnExit,omitempty" tf:"evaluate_on_exit"`
}

type TimeoutObservation struct {
}

type TimeoutParameters struct {
	AttemptDurationSeconds *int64 `json:"attemptDurationSeconds,omitempty" tf:"attempt_duration_seconds"`
}

// BatchJobDefinitionSpec defines the desired state of BatchJobDefinition
type BatchJobDefinitionSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       BatchJobDefinitionParameters `json:"forProvider"`
}

// BatchJobDefinitionStatus defines the observed state of BatchJobDefinition.
type BatchJobDefinitionStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          BatchJobDefinitionObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// BatchJobDefinition is the Schema for the BatchJobDefinitions API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type BatchJobDefinition struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              BatchJobDefinitionSpec   `json:"spec"`
	Status            BatchJobDefinitionStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// BatchJobDefinitionList contains a list of BatchJobDefinitions
type BatchJobDefinitionList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []BatchJobDefinition `json:"items"`
}

// Repository type metadata.
var (
	BatchJobDefinitionKind             = "BatchJobDefinition"
	BatchJobDefinitionGroupKind        = schema.GroupKind{Group: v1alpha1.Group, Kind: BatchJobDefinitionKind}.String()
	BatchJobDefinitionKindAPIVersion   = BatchJobDefinitionKind + "." + v1alpha1.GroupVersion.String()
	BatchJobDefinitionGroupVersionKind = v1alpha1.GroupVersion.WithKind(BatchJobDefinitionKind)
)

func init() {
	v1alpha1.SchemeBuilder.Register(&BatchJobDefinition{}, &BatchJobDefinitionList{})
}
