/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type EvaluateOnExitObservation struct {
}

type EvaluateOnExitParameters struct {

	// +kubebuilder:validation:Required
	Action *string `json:"action" tf:"action,omitempty"`

	// +kubebuilder:validation:Optional
	OnExitCode *string `json:"onExitCode,omitempty" tf:"on_exit_code,omitempty"`

	// +kubebuilder:validation:Optional
	OnReason *string `json:"onReason,omitempty" tf:"on_reason,omitempty"`

	// +kubebuilder:validation:Optional
	OnStatusReason *string `json:"onStatusReason,omitempty" tf:"on_status_reason,omitempty"`
}

type JobDefinitionObservation struct {
	Arn *string `json:"arn,omitempty" tf:"arn,omitempty"`

	Revision *int64 `json:"revision,omitempty" tf:"revision,omitempty"`

	TagsAll map[string]*string `json:"tagsAll,omitempty" tf:"tags_all,omitempty"`
}

type JobDefinitionParameters struct {

	// +kubebuilder:validation:Optional
	ContainerProperties *string `json:"containerProperties,omitempty" tf:"container_properties,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	Parameters map[string]*string `json:"parameters,omitempty" tf:"parameters,omitempty"`

	// +kubebuilder:validation:Optional
	PlatformCapabilities []*string `json:"platformCapabilities,omitempty" tf:"platform_capabilities,omitempty"`

	// +kubebuilder:validation:Optional
	PropagateTags *bool `json:"propagateTags,omitempty" tf:"propagate_tags,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +terrajet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`

	// +kubebuilder:validation:Optional
	RetryStrategy []RetryStrategyParameters `json:"retryStrategy,omitempty" tf:"retry_strategy,omitempty"`

	// +kubebuilder:validation:Optional
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// +kubebuilder:validation:Optional
	Timeout []TimeoutParameters `json:"timeout,omitempty" tf:"timeout,omitempty"`

	// +kubebuilder:validation:Required
	Type *string `json:"type" tf:"type,omitempty"`
}

type RetryStrategyObservation struct {
}

type RetryStrategyParameters struct {

	// +kubebuilder:validation:Optional
	Attempts *int64 `json:"attempts,omitempty" tf:"attempts,omitempty"`

	// +kubebuilder:validation:Optional
	EvaluateOnExit []EvaluateOnExitParameters `json:"evaluateOnExit,omitempty" tf:"evaluate_on_exit,omitempty"`
}

type TimeoutObservation struct {
}

type TimeoutParameters struct {

	// +kubebuilder:validation:Optional
	AttemptDurationSeconds *int64 `json:"attemptDurationSeconds,omitempty" tf:"attempt_duration_seconds,omitempty"`
}

// JobDefinitionSpec defines the desired state of JobDefinition
type JobDefinitionSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     JobDefinitionParameters `json:"forProvider"`
}

// JobDefinitionStatus defines the observed state of JobDefinition.
type JobDefinitionStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        JobDefinitionObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// JobDefinition is the Schema for the JobDefinitions API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tfaws}
type JobDefinition struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              JobDefinitionSpec   `json:"spec"`
	Status            JobDefinitionStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// JobDefinitionList contains a list of JobDefinitions
type JobDefinitionList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []JobDefinition `json:"items"`
}

// Repository type metadata.
var (
	JobDefinitionKind             = "JobDefinition"
	JobDefinitionGroupKind        = schema.GroupKind{Group: Group, Kind: JobDefinitionKind}.String()
	JobDefinitionKindAPIVersion   = JobDefinitionKind + "." + GroupVersion.String()
	JobDefinitionGroupVersionKind = GroupVersion.WithKind(JobDefinitionKind)
)

func init() {
	SchemeBuilder.Register(&JobDefinition{}, &JobDefinitionList{})
}
