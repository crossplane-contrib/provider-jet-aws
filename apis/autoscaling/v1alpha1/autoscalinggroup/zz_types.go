/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

// +kubebuilder:object:generate=true
// +groupName=autoscaling.aws.tf.crossplane.io
// +versionName=v1alpha1

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1alpha1 "github.com/crossplane-contrib/provider-tf-aws/apis/autoscaling/v1alpha1"
)

type AutoscalingGroupObservation struct {
	Arn string `json:"arn" tf:"arn"`
}

type AutoscalingGroupParameters struct {
	AvailabilityZones []string `json:"availabilityZones,omitempty" tf:"availability_zones"`

	CapacityRebalance *bool `json:"capacityRebalance,omitempty" tf:"capacity_rebalance"`

	DefaultCooldown *int64 `json:"defaultCooldown,omitempty" tf:"default_cooldown"`

	DesiredCapacity *int64 `json:"desiredCapacity,omitempty" tf:"desired_capacity"`

	EnabledMetrics []string `json:"enabledMetrics,omitempty" tf:"enabled_metrics"`

	ForceDelete *bool `json:"forceDelete,omitempty" tf:"force_delete"`

	ForceDeleteWarmPool *bool `json:"forceDeleteWarmPool,omitempty" tf:"force_delete_warm_pool"`

	HealthCheckGracePeriod *int64 `json:"healthCheckGracePeriod,omitempty" tf:"health_check_grace_period"`

	HealthCheckType *string `json:"healthCheckType,omitempty" tf:"health_check_type"`

	InitialLifecycleHook []InitialLifecycleHookParameters `json:"initialLifecycleHook,omitempty" tf:"initial_lifecycle_hook"`

	InstanceRefresh []InstanceRefreshParameters `json:"instanceRefresh,omitempty" tf:"instance_refresh"`

	LaunchConfiguration *string `json:"launchConfiguration,omitempty" tf:"launch_configuration"`

	LaunchTemplate []LaunchTemplateParameters `json:"launchTemplate,omitempty" tf:"launch_template"`

	LoadBalancers []string `json:"loadBalancers,omitempty" tf:"load_balancers"`

	MaxInstanceLifetime *int64 `json:"maxInstanceLifetime,omitempty" tf:"max_instance_lifetime"`

	MaxSize int64 `json:"maxSize" tf:"max_size"`

	MetricsGranularity *string `json:"metricsGranularity,omitempty" tf:"metrics_granularity"`

	MinElbCapacity *int64 `json:"minElbCapacity,omitempty" tf:"min_elb_capacity"`

	MinSize int64 `json:"minSize" tf:"min_size"`

	MixedInstancesPolicy []MixedInstancesPolicyParameters `json:"mixedInstancesPolicy,omitempty" tf:"mixed_instances_policy"`

	Name *string `json:"name,omitempty" tf:"name"`

	NamePrefix *string `json:"namePrefix,omitempty" tf:"name_prefix"`

	PlacementGroup *string `json:"placementGroup,omitempty" tf:"placement_group"`

	ProtectFromScaleIn *bool `json:"protectFromScaleIn,omitempty" tf:"protect_from_scale_in"`

	ServiceLinkedRoleArn *string `json:"serviceLinkedRoleArn,omitempty" tf:"service_linked_role_arn"`

	SuspendedProcesses []string `json:"suspendedProcesses,omitempty" tf:"suspended_processes"`

	Tag []TagParameters `json:"tag,omitempty" tf:"tag"`

	Tags []map[string]string `json:"tags,omitempty" tf:"tags"`

	TargetGroupArns []string `json:"targetGroupArns,omitempty" tf:"target_group_arns"`

	TerminationPolicies []string `json:"terminationPolicies,omitempty" tf:"termination_policies"`

	VpcZoneIdentifier []string `json:"vpcZoneIdentifier,omitempty" tf:"vpc_zone_identifier"`

	WaitForCapacityTimeout *string `json:"waitForCapacityTimeout,omitempty" tf:"wait_for_capacity_timeout"`

	WaitForElbCapacity *int64 `json:"waitForElbCapacity,omitempty" tf:"wait_for_elb_capacity"`

	WarmPool []WarmPoolParameters `json:"warmPool,omitempty" tf:"warm_pool"`
}

type InitialLifecycleHookObservation struct {
}

type InitialLifecycleHookParameters struct {
	DefaultResult *string `json:"defaultResult,omitempty" tf:"default_result"`

	HeartbeatTimeout *int64 `json:"heartbeatTimeout,omitempty" tf:"heartbeat_timeout"`

	LifecycleTransition string `json:"lifecycleTransition" tf:"lifecycle_transition"`

	Name string `json:"name" tf:"name"`

	NotificationMetadata *string `json:"notificationMetadata,omitempty" tf:"notification_metadata"`

	NotificationTargetArn *string `json:"notificationTargetArn,omitempty" tf:"notification_target_arn"`

	RoleArn *string `json:"roleArn,omitempty" tf:"role_arn"`
}

type InstanceRefreshObservation struct {
}

type InstanceRefreshParameters struct {
	Preferences []PreferencesParameters `json:"preferences,omitempty" tf:"preferences"`

	Strategy string `json:"strategy" tf:"strategy"`

	Triggers []string `json:"triggers,omitempty" tf:"triggers"`
}

type InstancesDistributionObservation struct {
}

type InstancesDistributionParameters struct {
	OnDemandAllocationStrategy *string `json:"onDemandAllocationStrategy,omitempty" tf:"on_demand_allocation_strategy"`

	OnDemandBaseCapacity *int64 `json:"onDemandBaseCapacity,omitempty" tf:"on_demand_base_capacity"`

	OnDemandPercentageAboveBaseCapacity *int64 `json:"onDemandPercentageAboveBaseCapacity,omitempty" tf:"on_demand_percentage_above_base_capacity"`

	SpotAllocationStrategy *string `json:"spotAllocationStrategy,omitempty" tf:"spot_allocation_strategy"`

	SpotInstancePools *int64 `json:"spotInstancePools,omitempty" tf:"spot_instance_pools"`

	SpotMaxPrice *string `json:"spotMaxPrice,omitempty" tf:"spot_max_price"`
}

type LaunchTemplateObservation struct {
}

type LaunchTemplateParameters struct {
	Id *string `json:"id,omitempty" tf:"id"`

	Name *string `json:"name,omitempty" tf:"name"`

	Version *string `json:"version,omitempty" tf:"version"`
}

type MixedInstancesPolicyObservation struct {
}

type MixedInstancesPolicyParameters struct {
	InstancesDistribution []InstancesDistributionParameters `json:"instancesDistribution,omitempty" tf:"instances_distribution"`

	LaunchTemplate []LaunchTemplateParameters `json:"launchTemplate" tf:"launch_template"`
}

type PreferencesObservation struct {
}

type PreferencesParameters struct {
	InstanceWarmup *string `json:"instanceWarmup,omitempty" tf:"instance_warmup"`

	MinHealthyPercentage *int64 `json:"minHealthyPercentage,omitempty" tf:"min_healthy_percentage"`
}

type TagObservation struct {
}

type TagParameters struct {
	Key string `json:"key" tf:"key"`

	PropagateAtLaunch bool `json:"propagateAtLaunch" tf:"propagate_at_launch"`

	Value string `json:"value" tf:"value"`
}

type WarmPoolObservation struct {
}

type WarmPoolParameters struct {
	MaxGroupPreparedCapacity *int64 `json:"maxGroupPreparedCapacity,omitempty" tf:"max_group_prepared_capacity"`

	MinSize *int64 `json:"minSize,omitempty" tf:"min_size"`

	PoolState *string `json:"poolState,omitempty" tf:"pool_state"`
}

// AutoscalingGroupSpec defines the desired state of AutoscalingGroup
type AutoscalingGroupSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       AutoscalingGroupParameters `json:"forProvider"`
}

// AutoscalingGroupStatus defines the observed state of AutoscalingGroup.
type AutoscalingGroupStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          AutoscalingGroupObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// AutoscalingGroup is the Schema for the AutoscalingGroups API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type AutoscalingGroup struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              AutoscalingGroupSpec   `json:"spec"`
	Status            AutoscalingGroupStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// AutoscalingGroupList contains a list of AutoscalingGroups
type AutoscalingGroupList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []AutoscalingGroup `json:"items"`
}

// Repository type metadata.
var (
	AutoscalingGroupKind             = "AutoscalingGroup"
	AutoscalingGroupGroupKind        = schema.GroupKind{Group: v1alpha1.Group, Kind: AutoscalingGroupKind}.String()
	AutoscalingGroupKindAPIVersion   = AutoscalingGroupKind + "." + v1alpha1.GroupVersion.String()
	AutoscalingGroupGroupVersionKind = v1alpha1.GroupVersion.WithKind(AutoscalingGroupKind)
)

func init() {
	v1alpha1.SchemeBuilder.Register(&AutoscalingGroup{}, &AutoscalingGroupList{})
}
