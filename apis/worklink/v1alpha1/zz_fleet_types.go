/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type FleetObservation struct {
	Arn *string `json:"arn,omitempty" tf:"arn,omitempty"`

	CompanyCode *string `json:"companyCode,omitempty" tf:"company_code,omitempty"`

	CreatedTime *string `json:"createdTime,omitempty" tf:"created_time,omitempty"`

	LastUpdatedTime *string `json:"lastUpdatedTime,omitempty" tf:"last_updated_time,omitempty"`
}

type FleetParameters struct {

	// +kubebuilder:validation:Optional
	AuditStreamArn *string `json:"auditStreamArn,omitempty" tf:"audit_stream_arn,omitempty"`

	// +kubebuilder:validation:Optional
	DeviceCaCertificate *string `json:"deviceCaCertificate,omitempty" tf:"device_ca_certificate,omitempty"`

	// +kubebuilder:validation:Optional
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// +kubebuilder:validation:Optional
	IdentityProvider []IdentityProviderParameters `json:"identityProvider,omitempty" tf:"identity_provider,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	Network []NetworkParameters `json:"network,omitempty" tf:"network,omitempty"`

	// +kubebuilder:validation:Optional
	OptimizeForEndUserLocation *bool `json:"optimizeForEndUserLocation,omitempty" tf:"optimize_for_end_user_location,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +terrajet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`
}

type IdentityProviderObservation struct {
}

type IdentityProviderParameters struct {

	// +kubebuilder:validation:Required
	SamlMetadata *string `json:"samlMetadata" tf:"saml_metadata,omitempty"`

	// +kubebuilder:validation:Required
	Type *string `json:"type" tf:"type,omitempty"`
}

type NetworkObservation struct {
}

type NetworkParameters struct {

	// +kubebuilder:validation:Required
	SecurityGroupIds []*string `json:"securityGroupIds" tf:"security_group_ids,omitempty"`

	// +kubebuilder:validation:Required
	SubnetIds []*string `json:"subnetIds" tf:"subnet_ids,omitempty"`

	// +kubebuilder:validation:Required
	VpcID *string `json:"vpcId" tf:"vpc_id,omitempty"`
}

// FleetSpec defines the desired state of Fleet
type FleetSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     FleetParameters `json:"forProvider"`
}

// FleetStatus defines the observed state of Fleet.
type FleetStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        FleetObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Fleet is the Schema for the Fleets API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tfaws}
type Fleet struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              FleetSpec   `json:"spec"`
	Status            FleetStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// FleetList contains a list of Fleets
type FleetList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Fleet `json:"items"`
}

// Repository type metadata.
var (
	FleetKind             = "Fleet"
	FleetGroupKind        = schema.GroupKind{Group: Group, Kind: FleetKind}.String()
	FleetKindAPIVersion   = FleetKind + "." + GroupVersion.String()
	FleetGroupVersionKind = GroupVersion.WithKind(FleetKind)
)

func init() {
	SchemeBuilder.Register(&Fleet{}, &FleetList{})
}
