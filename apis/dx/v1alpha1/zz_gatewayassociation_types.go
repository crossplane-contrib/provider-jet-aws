/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type GatewayAssociationObservation struct {
	AssociatedGatewayType *string `json:"associatedGatewayType,omitempty" tf:"associated_gateway_type,omitempty"`

	DxGatewayAssociationID *string `json:"dxGatewayAssociationId,omitempty" tf:"dx_gateway_association_id,omitempty"`

	DxGatewayOwnerAccountID *string `json:"dxGatewayOwnerAccountId,omitempty" tf:"dx_gateway_owner_account_id,omitempty"`
}

type GatewayAssociationParameters struct {

	// +kubebuilder:validation:Optional
	AllowedPrefixes []*string `json:"allowedPrefixes,omitempty" tf:"allowed_prefixes,omitempty"`

	// +kubebuilder:validation:Optional
	AssociatedGatewayID *string `json:"associatedGatewayId,omitempty" tf:"associated_gateway_id,omitempty"`

	// +kubebuilder:validation:Optional
	AssociatedGatewayOwnerAccountID *string `json:"associatedGatewayOwnerAccountId,omitempty" tf:"associated_gateway_owner_account_id,omitempty"`

	// +kubebuilder:validation:Required
	DxGatewayID *string `json:"dxGatewayId" tf:"dx_gateway_id,omitempty"`

	// +kubebuilder:validation:Optional
	ProposalID *string `json:"proposalId,omitempty" tf:"proposal_id,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +terrajet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`

	// +kubebuilder:validation:Optional
	VpnGatewayID *string `json:"vpnGatewayId,omitempty" tf:"vpn_gateway_id,omitempty"`
}

// GatewayAssociationSpec defines the desired state of GatewayAssociation
type GatewayAssociationSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     GatewayAssociationParameters `json:"forProvider"`
}

// GatewayAssociationStatus defines the observed state of GatewayAssociation.
type GatewayAssociationStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        GatewayAssociationObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// GatewayAssociation is the Schema for the GatewayAssociations API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tfaws}
type GatewayAssociation struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              GatewayAssociationSpec   `json:"spec"`
	Status            GatewayAssociationStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// GatewayAssociationList contains a list of GatewayAssociations
type GatewayAssociationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []GatewayAssociation `json:"items"`
}

// Repository type metadata.
var (
	GatewayAssociationKind             = "GatewayAssociation"
	GatewayAssociationGroupKind        = schema.GroupKind{Group: Group, Kind: GatewayAssociationKind}.String()
	GatewayAssociationKindAPIVersion   = GatewayAssociationKind + "." + GroupVersion.String()
	GatewayAssociationGroupVersionKind = GroupVersion.WithKind(GatewayAssociationKind)
)

func init() {
	SchemeBuilder.Register(&GatewayAssociation{}, &GatewayAssociationList{})
}
