/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type DxHostedTransitVirtualInterfaceAccepterObservation struct {
	ARN string `json:"arn" tf:"arn"`
}

type DxHostedTransitVirtualInterfaceAccepterParameters struct {
	DxGatewayID string `json:"dxGatewayID" tf:"dx_gateway_id"`

	Tags map[string]string `json:"tags,omitempty" tf:"tags"`

	TagsAll map[string]string `json:"tagsAll,omitempty" tf:"tags_all"`

	VirtualInterfaceID string `json:"virtualInterfaceID" tf:"virtual_interface_id"`
}

// DxHostedTransitVirtualInterfaceAccepterSpec defines the desired state of DxHostedTransitVirtualInterfaceAccepter
type DxHostedTransitVirtualInterfaceAccepterSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       DxHostedTransitVirtualInterfaceAccepterParameters `json:"forProvider"`
}

// DxHostedTransitVirtualInterfaceAccepterStatus defines the observed state of DxHostedTransitVirtualInterfaceAccepter.
type DxHostedTransitVirtualInterfaceAccepterStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          DxHostedTransitVirtualInterfaceAccepterObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// DxHostedTransitVirtualInterfaceAccepter is the Schema for the DxHostedTransitVirtualInterfaceAccepters API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tfaws}
type DxHostedTransitVirtualInterfaceAccepter struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DxHostedTransitVirtualInterfaceAccepterSpec   `json:"spec"`
	Status            DxHostedTransitVirtualInterfaceAccepterStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DxHostedTransitVirtualInterfaceAccepterList contains a list of DxHostedTransitVirtualInterfaceAccepters
type DxHostedTransitVirtualInterfaceAccepterList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DxHostedTransitVirtualInterfaceAccepter `json:"items"`
}

// Repository type metadata.
var (
	DxHostedTransitVirtualInterfaceAccepterKind             = "DxHostedTransitVirtualInterfaceAccepter"
	DxHostedTransitVirtualInterfaceAccepterGroupKind        = schema.GroupKind{Group: Group, Kind: DxHostedTransitVirtualInterfaceAccepterKind}.String()
	DxHostedTransitVirtualInterfaceAccepterKindAPIVersion   = DxHostedTransitVirtualInterfaceAccepterKind + "." + GroupVersion.String()
	DxHostedTransitVirtualInterfaceAccepterGroupVersionKind = GroupVersion.WithKind(DxHostedTransitVirtualInterfaceAccepterKind)
)

func init() {
	SchemeBuilder.Register(&DxHostedTransitVirtualInterfaceAccepter{}, &DxHostedTransitVirtualInterfaceAccepterList{})
}
