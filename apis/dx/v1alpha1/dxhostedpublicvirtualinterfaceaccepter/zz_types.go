/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

// +kubebuilder:object:generate=true
// +groupName=dx.aws.tf.crossplane.io
// +versionName=v1alpha1

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1alpha1 "github.com/crossplane-contrib/provider-tf-aws/apis/dx/v1alpha1"
)

type DxHostedPublicVirtualInterfaceAccepterObservation struct {
	Arn string `json:"arn" tf:"arn"`
}

type DxHostedPublicVirtualInterfaceAccepterParameters struct {
	Tags map[string]string `json:"tags,omitempty" tf:"tags"`

	TagsAll map[string]string `json:"tagsAll,omitempty" tf:"tags_all"`

	VirtualInterfaceId string `json:"virtualInterfaceId" tf:"virtual_interface_id"`
}

// DxHostedPublicVirtualInterfaceAccepterSpec defines the desired state of DxHostedPublicVirtualInterfaceAccepter
type DxHostedPublicVirtualInterfaceAccepterSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       DxHostedPublicVirtualInterfaceAccepterParameters `json:"forProvider"`
}

// DxHostedPublicVirtualInterfaceAccepterStatus defines the observed state of DxHostedPublicVirtualInterfaceAccepter.
type DxHostedPublicVirtualInterfaceAccepterStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          DxHostedPublicVirtualInterfaceAccepterObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// DxHostedPublicVirtualInterfaceAccepter is the Schema for the DxHostedPublicVirtualInterfaceAccepters API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type DxHostedPublicVirtualInterfaceAccepter struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DxHostedPublicVirtualInterfaceAccepterSpec   `json:"spec"`
	Status            DxHostedPublicVirtualInterfaceAccepterStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DxHostedPublicVirtualInterfaceAccepterList contains a list of DxHostedPublicVirtualInterfaceAccepters
type DxHostedPublicVirtualInterfaceAccepterList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DxHostedPublicVirtualInterfaceAccepter `json:"items"`
}

// Repository type metadata.
var (
	DxHostedPublicVirtualInterfaceAccepterKind             = "DxHostedPublicVirtualInterfaceAccepter"
	DxHostedPublicVirtualInterfaceAccepterGroupKind        = schema.GroupKind{Group: v1alpha1.Group, Kind: DxHostedPublicVirtualInterfaceAccepterKind}.String()
	DxHostedPublicVirtualInterfaceAccepterKindAPIVersion   = DxHostedPublicVirtualInterfaceAccepterKind + "." + v1alpha1.GroupVersion.String()
	DxHostedPublicVirtualInterfaceAccepterGroupVersionKind = v1alpha1.GroupVersion.WithKind(DxHostedPublicVirtualInterfaceAccepterKind)
)

func init() {
	v1alpha1.SchemeBuilder.Register(&DxHostedPublicVirtualInterfaceAccepter{}, &DxHostedPublicVirtualInterfaceAccepterList{})
}
