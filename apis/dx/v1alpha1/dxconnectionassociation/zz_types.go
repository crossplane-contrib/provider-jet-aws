/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

// +kubebuilder:object:generate=true
// +groupName=dx.aws.tf.crossplane.io
// +versionName=v1alpha1

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1alpha1 "github.com/crossplane-contrib/provider-tf-aws/apis/dx/v1alpha1"
)

type DxConnectionAssociationObservation struct {
}

type DxConnectionAssociationParameters struct {
	ConnectionId string `json:"connectionId" tf:"connection_id"`

	LagId string `json:"lagId" tf:"lag_id"`
}

// DxConnectionAssociationSpec defines the desired state of DxConnectionAssociation
type DxConnectionAssociationSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       DxConnectionAssociationParameters `json:"forProvider"`
}

// DxConnectionAssociationStatus defines the observed state of DxConnectionAssociation.
type DxConnectionAssociationStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          DxConnectionAssociationObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// DxConnectionAssociation is the Schema for the DxConnectionAssociations API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type DxConnectionAssociation struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DxConnectionAssociationSpec   `json:"spec"`
	Status            DxConnectionAssociationStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DxConnectionAssociationList contains a list of DxConnectionAssociations
type DxConnectionAssociationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DxConnectionAssociation `json:"items"`
}

// Repository type metadata.
var (
	DxConnectionAssociationKind             = "DxConnectionAssociation"
	DxConnectionAssociationGroupKind        = schema.GroupKind{Group: v1alpha1.Group, Kind: DxConnectionAssociationKind}.String()
	DxConnectionAssociationKindAPIVersion   = DxConnectionAssociationKind + "." + v1alpha1.GroupVersion.String()
	DxConnectionAssociationGroupVersionKind = v1alpha1.GroupVersion.WithKind(DxConnectionAssociationKind)
)

func init() {
	v1alpha1.SchemeBuilder.Register(&DxConnectionAssociation{}, &DxConnectionAssociationList{})
}
