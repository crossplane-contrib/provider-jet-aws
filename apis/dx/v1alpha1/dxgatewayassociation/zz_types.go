/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

// +kubebuilder:object:generate=true
// +groupName=dx.aws.tf.crossplane.io
// +versionName=v1alpha1

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1alpha1 "github.com/crossplane-contrib/provider-tf-aws/apis/dx/v1alpha1"
)

type DxGatewayAssociationObservation struct {
	AssociatedGatewayType string `json:"associatedGatewayType" tf:"associated_gateway_type"`

	DxGatewayAssociationId string `json:"dxGatewayAssociationId" tf:"dx_gateway_association_id"`

	DxGatewayOwnerAccountId string `json:"dxGatewayOwnerAccountId" tf:"dx_gateway_owner_account_id"`
}

type DxGatewayAssociationParameters struct {
	AllowedPrefixes []string `json:"allowedPrefixes,omitempty" tf:"allowed_prefixes"`

	AssociatedGatewayId *string `json:"associatedGatewayId,omitempty" tf:"associated_gateway_id"`

	AssociatedGatewayOwnerAccountId *string `json:"associatedGatewayOwnerAccountId,omitempty" tf:"associated_gateway_owner_account_id"`

	DxGatewayId string `json:"dxGatewayId" tf:"dx_gateway_id"`

	ProposalId *string `json:"proposalId,omitempty" tf:"proposal_id"`

	VpnGatewayId *string `json:"vpnGatewayId,omitempty" tf:"vpn_gateway_id"`
}

// DxGatewayAssociationSpec defines the desired state of DxGatewayAssociation
type DxGatewayAssociationSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       DxGatewayAssociationParameters `json:"forProvider"`
}

// DxGatewayAssociationStatus defines the observed state of DxGatewayAssociation.
type DxGatewayAssociationStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          DxGatewayAssociationObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// DxGatewayAssociation is the Schema for the DxGatewayAssociations API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type DxGatewayAssociation struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DxGatewayAssociationSpec   `json:"spec"`
	Status            DxGatewayAssociationStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DxGatewayAssociationList contains a list of DxGatewayAssociations
type DxGatewayAssociationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DxGatewayAssociation `json:"items"`
}

// Repository type metadata.
var (
	DxGatewayAssociationKind             = "DxGatewayAssociation"
	DxGatewayAssociationGroupKind        = schema.GroupKind{Group: v1alpha1.Group, Kind: DxGatewayAssociationKind}.String()
	DxGatewayAssociationKindAPIVersion   = DxGatewayAssociationKind + "." + v1alpha1.GroupVersion.String()
	DxGatewayAssociationGroupVersionKind = v1alpha1.GroupVersion.WithKind(DxGatewayAssociationKind)
)

func init() {
	v1alpha1.SchemeBuilder.Register(&DxGatewayAssociation{}, &DxGatewayAssociationList{})
}
