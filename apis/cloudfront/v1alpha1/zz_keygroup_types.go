/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type KeyGroupObservation struct {
	Etag *string `json:"etag,omitempty" tf:"etag,omitempty"`
}

type KeyGroupParameters struct {

	// +kubebuilder:validation:Optional
	Comment *string `json:"comment,omitempty" tf:"comment,omitempty"`

	// +kubebuilder:validation:Required
	Items []*string `json:"items" tf:"items,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +terrajet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`
}

// KeyGroupSpec defines the desired state of KeyGroup
type KeyGroupSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     KeyGroupParameters `json:"forProvider"`
}

// KeyGroupStatus defines the observed state of KeyGroup.
type KeyGroupStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        KeyGroupObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// KeyGroup is the Schema for the KeyGroups API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tfaws}
type KeyGroup struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              KeyGroupSpec   `json:"spec"`
	Status            KeyGroupStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// KeyGroupList contains a list of KeyGroups
type KeyGroupList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []KeyGroup `json:"items"`
}

// Repository type metadata.
var (
	KeyGroupKind             = "KeyGroup"
	KeyGroupGroupKind        = schema.GroupKind{Group: Group, Kind: KeyGroupKind}.String()
	KeyGroupKindAPIVersion   = KeyGroupKind + "." + GroupVersion.String()
	KeyGroupGroupVersionKind = GroupVersion.WithKind(KeyGroupKind)
)

func init() {
	SchemeBuilder.Register(&KeyGroup{}, &KeyGroupList{})
}
