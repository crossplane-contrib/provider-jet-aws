/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

// +kubebuilder:object:generate=true
// +groupName=cloudfront.aws.tf.crossplane.io
// +versionName=v1alpha1

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1alpha1 "github.com/crossplane-contrib/provider-tf-aws/apis/cloudfront/v1alpha1"
)

type CloudfrontFunctionObservation struct {
	Arn string `json:"arn" tf:"arn"`

	Etag string `json:"etag" tf:"etag"`

	Status string `json:"status" tf:"status"`
}

type CloudfrontFunctionParameters struct {
	Code string `json:"code" tf:"code"`

	Comment *string `json:"comment,omitempty" tf:"comment"`

	Name string `json:"name" tf:"name"`

	Publish *bool `json:"publish,omitempty" tf:"publish"`

	Runtime string `json:"runtime" tf:"runtime"`
}

// CloudfrontFunctionSpec defines the desired state of CloudfrontFunction
type CloudfrontFunctionSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       CloudfrontFunctionParameters `json:"forProvider"`
}

// CloudfrontFunctionStatus defines the observed state of CloudfrontFunction.
type CloudfrontFunctionStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          CloudfrontFunctionObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// CloudfrontFunction is the Schema for the CloudfrontFunctions API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type CloudfrontFunction struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              CloudfrontFunctionSpec   `json:"spec"`
	Status            CloudfrontFunctionStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// CloudfrontFunctionList contains a list of CloudfrontFunctions
type CloudfrontFunctionList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []CloudfrontFunction `json:"items"`
}

// Repository type metadata.
var (
	CloudfrontFunctionKind             = "CloudfrontFunction"
	CloudfrontFunctionGroupKind        = schema.GroupKind{Group: v1alpha1.Group, Kind: CloudfrontFunctionKind}.String()
	CloudfrontFunctionKindAPIVersion   = CloudfrontFunctionKind + "." + v1alpha1.GroupVersion.String()
	CloudfrontFunctionGroupVersionKind = v1alpha1.GroupVersion.WithKind(CloudfrontFunctionKind)
)

func init() {
	v1alpha1.SchemeBuilder.Register(&CloudfrontFunction{}, &CloudfrontFunctionList{})
}
