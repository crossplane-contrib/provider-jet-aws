/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

// +kubebuilder:object:generate=true
// +groupName=cloudfront.aws.tf.crossplane.io
// +versionName=v1alpha1

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1alpha1 "github.com/crossplane-contrib/provider-tf-aws/apis/cloudfront/v1alpha1"
)

type CloudfrontKeyGroupObservation struct {
	Etag string `json:"etag" tf:"etag"`
}

type CloudfrontKeyGroupParameters struct {
	Comment *string `json:"comment,omitempty" tf:"comment"`

	Items []string `json:"items" tf:"items"`

	Name string `json:"name" tf:"name"`
}

// CloudfrontKeyGroupSpec defines the desired state of CloudfrontKeyGroup
type CloudfrontKeyGroupSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       CloudfrontKeyGroupParameters `json:"forProvider"`
}

// CloudfrontKeyGroupStatus defines the observed state of CloudfrontKeyGroup.
type CloudfrontKeyGroupStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          CloudfrontKeyGroupObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// CloudfrontKeyGroup is the Schema for the CloudfrontKeyGroups API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type CloudfrontKeyGroup struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              CloudfrontKeyGroupSpec   `json:"spec"`
	Status            CloudfrontKeyGroupStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// CloudfrontKeyGroupList contains a list of CloudfrontKeyGroups
type CloudfrontKeyGroupList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []CloudfrontKeyGroup `json:"items"`
}

// Repository type metadata.
var (
	CloudfrontKeyGroupKind             = "CloudfrontKeyGroup"
	CloudfrontKeyGroupGroupKind        = schema.GroupKind{Group: v1alpha1.Group, Kind: CloudfrontKeyGroupKind}.String()
	CloudfrontKeyGroupKindAPIVersion   = CloudfrontKeyGroupKind + "." + v1alpha1.GroupVersion.String()
	CloudfrontKeyGroupGroupVersionKind = v1alpha1.GroupVersion.WithKind(CloudfrontKeyGroupKind)
)

func init() {
	v1alpha1.SchemeBuilder.Register(&CloudfrontKeyGroup{}, &CloudfrontKeyGroupList{})
}
