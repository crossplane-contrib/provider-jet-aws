/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

// +kubebuilder:object:generate=true
// +groupName=cloudfront.aws.tf.crossplane.io
// +versionName=v1alpha1

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1alpha1 "github.com/crossplane-contrib/provider-tf-aws/apis/cloudfront/v1alpha1"
)

type CloudfrontMonitoringSubscriptionObservation struct {
}

type CloudfrontMonitoringSubscriptionParameters struct {
	DistributionId string `json:"distributionId" tf:"distribution_id"`

	MonitoringSubscription []MonitoringSubscriptionParameters `json:"monitoringSubscription" tf:"monitoring_subscription"`
}

type MonitoringSubscriptionObservation struct {
}

type MonitoringSubscriptionParameters struct {
	RealtimeMetricsSubscriptionConfig []RealtimeMetricsSubscriptionConfigParameters `json:"realtimeMetricsSubscriptionConfig" tf:"realtime_metrics_subscription_config"`
}

type RealtimeMetricsSubscriptionConfigObservation struct {
}

type RealtimeMetricsSubscriptionConfigParameters struct {
	RealtimeMetricsSubscriptionStatus string `json:"realtimeMetricsSubscriptionStatus" tf:"realtime_metrics_subscription_status"`
}

// CloudfrontMonitoringSubscriptionSpec defines the desired state of CloudfrontMonitoringSubscription
type CloudfrontMonitoringSubscriptionSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       CloudfrontMonitoringSubscriptionParameters `json:"forProvider"`
}

// CloudfrontMonitoringSubscriptionStatus defines the observed state of CloudfrontMonitoringSubscription.
type CloudfrontMonitoringSubscriptionStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          CloudfrontMonitoringSubscriptionObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// CloudfrontMonitoringSubscription is the Schema for the CloudfrontMonitoringSubscriptions API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type CloudfrontMonitoringSubscription struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              CloudfrontMonitoringSubscriptionSpec   `json:"spec"`
	Status            CloudfrontMonitoringSubscriptionStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// CloudfrontMonitoringSubscriptionList contains a list of CloudfrontMonitoringSubscriptions
type CloudfrontMonitoringSubscriptionList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []CloudfrontMonitoringSubscription `json:"items"`
}

// Repository type metadata.
var (
	CloudfrontMonitoringSubscriptionKind             = "CloudfrontMonitoringSubscription"
	CloudfrontMonitoringSubscriptionGroupKind        = schema.GroupKind{Group: v1alpha1.Group, Kind: CloudfrontMonitoringSubscriptionKind}.String()
	CloudfrontMonitoringSubscriptionKindAPIVersion   = CloudfrontMonitoringSubscriptionKind + "." + v1alpha1.GroupVersion.String()
	CloudfrontMonitoringSubscriptionGroupVersionKind = v1alpha1.GroupVersion.WithKind(CloudfrontMonitoringSubscriptionKind)
)

func init() {
	v1alpha1.SchemeBuilder.Register(&CloudfrontMonitoringSubscription{}, &CloudfrontMonitoringSubscriptionList{})
}
