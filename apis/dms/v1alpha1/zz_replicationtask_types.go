/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ReplicationTaskObservation struct {
	ReplicationTaskArn *string `json:"replicationTaskArn,omitempty" tf:"replication_task_arn,omitempty"`

	TagsAll map[string]*string `json:"tagsAll,omitempty" tf:"tags_all,omitempty"`
}

type ReplicationTaskParameters struct {

	// +kubebuilder:validation:Optional
	CdcStartTime *string `json:"cdcStartTime,omitempty" tf:"cdc_start_time,omitempty"`

	// +kubebuilder:validation:Required
	MigrationType *string `json:"migrationType" tf:"migration_type,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +terrajet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`

	// +kubebuilder:validation:Required
	ReplicationInstanceArn *string `json:"replicationInstanceArn" tf:"replication_instance_arn,omitempty"`

	// +kubebuilder:validation:Required
	ReplicationTaskID *string `json:"replicationTaskId" tf:"replication_task_id,omitempty"`

	// +kubebuilder:validation:Optional
	ReplicationTaskSettings *string `json:"replicationTaskSettings,omitempty" tf:"replication_task_settings,omitempty"`

	// +kubebuilder:validation:Required
	SourceEndpointArn *string `json:"sourceEndpointArn" tf:"source_endpoint_arn,omitempty"`

	// +kubebuilder:validation:Required
	TableMappings *string `json:"tableMappings" tf:"table_mappings,omitempty"`

	// +kubebuilder:validation:Optional
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// +kubebuilder:validation:Required
	TargetEndpointArn *string `json:"targetEndpointArn" tf:"target_endpoint_arn,omitempty"`
}

// ReplicationTaskSpec defines the desired state of ReplicationTask
type ReplicationTaskSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ReplicationTaskParameters `json:"forProvider"`
}

// ReplicationTaskStatus defines the observed state of ReplicationTask.
type ReplicationTaskStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ReplicationTaskObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ReplicationTask is the Schema for the ReplicationTasks API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tfaws}
type ReplicationTask struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ReplicationTaskSpec   `json:"spec"`
	Status            ReplicationTaskStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ReplicationTaskList contains a list of ReplicationTasks
type ReplicationTaskList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ReplicationTask `json:"items"`
}

// Repository type metadata.
var (
	ReplicationTaskKind             = "ReplicationTask"
	ReplicationTaskGroupKind        = schema.GroupKind{Group: Group, Kind: ReplicationTaskKind}.String()
	ReplicationTaskKindAPIVersion   = ReplicationTaskKind + "." + GroupVersion.String()
	ReplicationTaskGroupVersionKind = GroupVersion.WithKind(ReplicationTaskKind)
)

func init() {
	SchemeBuilder.Register(&ReplicationTask{}, &ReplicationTaskList{})
}
