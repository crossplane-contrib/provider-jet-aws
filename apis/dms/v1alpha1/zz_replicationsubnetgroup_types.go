/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ReplicationSubnetGroupObservation struct {
	ReplicationSubnetGroupArn *string `json:"replicationSubnetGroupArn,omitempty" tf:"replication_subnet_group_arn,omitempty"`

	TagsAll map[string]*string `json:"tagsAll,omitempty" tf:"tags_all,omitempty"`

	VpcID *string `json:"vpcId,omitempty" tf:"vpc_id,omitempty"`
}

type ReplicationSubnetGroupParameters struct {

	// Region is the region you'd like your resource to be created in.
	// +terrajet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`

	// +kubebuilder:validation:Required
	ReplicationSubnetGroupDescription *string `json:"replicationSubnetGroupDescription" tf:"replication_subnet_group_description,omitempty"`

	// +kubebuilder:validation:Required
	ReplicationSubnetGroupID *string `json:"replicationSubnetGroupId" tf:"replication_subnet_group_id,omitempty"`

	// +kubebuilder:validation:Required
	SubnetIds []*string `json:"subnetIds" tf:"subnet_ids,omitempty"`

	// +kubebuilder:validation:Optional
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

// ReplicationSubnetGroupSpec defines the desired state of ReplicationSubnetGroup
type ReplicationSubnetGroupSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ReplicationSubnetGroupParameters `json:"forProvider"`
}

// ReplicationSubnetGroupStatus defines the observed state of ReplicationSubnetGroup.
type ReplicationSubnetGroupStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ReplicationSubnetGroupObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ReplicationSubnetGroup is the Schema for the ReplicationSubnetGroups API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tfaws}
type ReplicationSubnetGroup struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ReplicationSubnetGroupSpec   `json:"spec"`
	Status            ReplicationSubnetGroupStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ReplicationSubnetGroupList contains a list of ReplicationSubnetGroups
type ReplicationSubnetGroupList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ReplicationSubnetGroup `json:"items"`
}

// Repository type metadata.
var (
	ReplicationSubnetGroupKind             = "ReplicationSubnetGroup"
	ReplicationSubnetGroupGroupKind        = schema.GroupKind{Group: Group, Kind: ReplicationSubnetGroupKind}.String()
	ReplicationSubnetGroupKindAPIVersion   = ReplicationSubnetGroupKind + "." + GroupVersion.String()
	ReplicationSubnetGroupGroupVersionKind = GroupVersion.WithKind(ReplicationSubnetGroupKind)
)

func init() {
	SchemeBuilder.Register(&ReplicationSubnetGroup{}, &ReplicationSubnetGroupList{})
}
