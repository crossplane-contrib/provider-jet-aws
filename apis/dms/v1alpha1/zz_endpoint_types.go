/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ElasticsearchSettingsObservation struct {
}

type ElasticsearchSettingsParameters struct {

	// +kubebuilder:validation:Required
	EndpointURI *string `json:"endpointUri" tf:"endpoint_uri,omitempty"`

	// +kubebuilder:validation:Optional
	ErrorRetryDuration *int64 `json:"errorRetryDuration,omitempty" tf:"error_retry_duration,omitempty"`

	// +kubebuilder:validation:Optional
	FullLoadErrorPercentage *int64 `json:"fullLoadErrorPercentage,omitempty" tf:"full_load_error_percentage,omitempty"`

	// +kubebuilder:validation:Required
	ServiceAccessRoleArn *string `json:"serviceAccessRoleArn" tf:"service_access_role_arn,omitempty"`
}

type EndpointObservation struct {
	EndpointArn *string `json:"endpointArn,omitempty" tf:"endpoint_arn,omitempty"`

	TagsAll map[string]*string `json:"tagsAll,omitempty" tf:"tags_all,omitempty"`
}

type EndpointParameters struct {

	// +kubebuilder:validation:Optional
	CertificateArn *string `json:"certificateArn,omitempty" tf:"certificate_arn,omitempty"`

	// +kubebuilder:validation:Optional
	DatabaseName *string `json:"databaseName,omitempty" tf:"database_name,omitempty"`

	// +kubebuilder:validation:Optional
	ElasticsearchSettings []ElasticsearchSettingsParameters `json:"elasticsearchSettings,omitempty" tf:"elasticsearch_settings,omitempty"`

	// +kubebuilder:validation:Required
	EndpointID *string `json:"endpointId" tf:"endpoint_id,omitempty"`

	// +kubebuilder:validation:Required
	EndpointType *string `json:"endpointType" tf:"endpoint_type,omitempty"`

	// +kubebuilder:validation:Required
	EngineName *string `json:"engineName" tf:"engine_name,omitempty"`

	// +kubebuilder:validation:Optional
	ExtraConnectionAttributes *string `json:"extraConnectionAttributes,omitempty" tf:"extra_connection_attributes,omitempty"`

	// +kubebuilder:validation:Optional
	KafkaSettings []KafkaSettingsParameters `json:"kafkaSettings,omitempty" tf:"kafka_settings,omitempty"`

	// +kubebuilder:validation:Optional
	KinesisSettings []KinesisSettingsParameters `json:"kinesisSettings,omitempty" tf:"kinesis_settings,omitempty"`

	// +kubebuilder:validation:Optional
	KmsKeyArn *string `json:"kmsKeyArn,omitempty" tf:"kms_key_arn,omitempty"`

	// +kubebuilder:validation:Optional
	MongodbSettings []MongodbSettingsParameters `json:"mongodbSettings,omitempty" tf:"mongodb_settings,omitempty"`

	// +kubebuilder:validation:Optional
	PasswordSecretRef v1.SecretKeySelector `json:"passwordSecretRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	Port *int64 `json:"port,omitempty" tf:"port,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +terrajet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`

	// +kubebuilder:validation:Optional
	S3Settings []S3SettingsParameters `json:"s3Settings,omitempty" tf:"s3_settings,omitempty"`

	// +kubebuilder:validation:Optional
	ServerName *string `json:"serverName,omitempty" tf:"server_name,omitempty"`

	// +kubebuilder:validation:Optional
	ServiceAccessRole *string `json:"serviceAccessRole,omitempty" tf:"service_access_role,omitempty"`

	// +kubebuilder:validation:Optional
	SslMode *string `json:"sslMode,omitempty" tf:"ssl_mode,omitempty"`

	// +kubebuilder:validation:Optional
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// +kubebuilder:validation:Optional
	Username *string `json:"username,omitempty" tf:"username,omitempty"`
}

type KafkaSettingsObservation struct {
}

type KafkaSettingsParameters struct {

	// +kubebuilder:validation:Required
	Broker *string `json:"broker" tf:"broker,omitempty"`

	// +kubebuilder:validation:Optional
	Topic *string `json:"topic,omitempty" tf:"topic,omitempty"`
}

type KinesisSettingsObservation struct {
}

type KinesisSettingsParameters struct {

	// +kubebuilder:validation:Optional
	MessageFormat *string `json:"messageFormat,omitempty" tf:"message_format,omitempty"`

	// +kubebuilder:validation:Optional
	ServiceAccessRoleArn *string `json:"serviceAccessRoleArn,omitempty" tf:"service_access_role_arn,omitempty"`

	// +kubebuilder:validation:Optional
	StreamArn *string `json:"streamArn,omitempty" tf:"stream_arn,omitempty"`
}

type MongodbSettingsObservation struct {
}

type MongodbSettingsParameters struct {

	// +kubebuilder:validation:Optional
	AuthMechanism *string `json:"authMechanism,omitempty" tf:"auth_mechanism,omitempty"`

	// +kubebuilder:validation:Optional
	AuthSource *string `json:"authSource,omitempty" tf:"auth_source,omitempty"`

	// +kubebuilder:validation:Optional
	AuthType *string `json:"authType,omitempty" tf:"auth_type,omitempty"`

	// +kubebuilder:validation:Optional
	DocsToInvestigate *string `json:"docsToInvestigate,omitempty" tf:"docs_to_investigate,omitempty"`

	// +kubebuilder:validation:Optional
	ExtractDocID *string `json:"extractDocId,omitempty" tf:"extract_doc_id,omitempty"`

	// +kubebuilder:validation:Optional
	NestingLevel *string `json:"nestingLevel,omitempty" tf:"nesting_level,omitempty"`
}

type S3SettingsObservation struct {
}

type S3SettingsParameters struct {

	// +kubebuilder:validation:Optional
	BucketFolder *string `json:"bucketFolder,omitempty" tf:"bucket_folder,omitempty"`

	// +kubebuilder:validation:Optional
	BucketName *string `json:"bucketName,omitempty" tf:"bucket_name,omitempty"`

	// +kubebuilder:validation:Optional
	CompressionType *string `json:"compressionType,omitempty" tf:"compression_type,omitempty"`

	// +kubebuilder:validation:Optional
	CsvDelimiter *string `json:"csvDelimiter,omitempty" tf:"csv_delimiter,omitempty"`

	// +kubebuilder:validation:Optional
	CsvRowDelimiter *string `json:"csvRowDelimiter,omitempty" tf:"csv_row_delimiter,omitempty"`

	// +kubebuilder:validation:Optional
	DatePartitionEnabled *bool `json:"datePartitionEnabled,omitempty" tf:"date_partition_enabled,omitempty"`

	// +kubebuilder:validation:Optional
	ExternalTableDefinition *string `json:"externalTableDefinition,omitempty" tf:"external_table_definition,omitempty"`

	// +kubebuilder:validation:Optional
	ServiceAccessRoleArn *string `json:"serviceAccessRoleArn,omitempty" tf:"service_access_role_arn,omitempty"`
}

// EndpointSpec defines the desired state of Endpoint
type EndpointSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     EndpointParameters `json:"forProvider"`
}

// EndpointStatus defines the observed state of Endpoint.
type EndpointStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        EndpointObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Endpoint is the Schema for the Endpoints API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tfaws}
type Endpoint struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              EndpointSpec   `json:"spec"`
	Status            EndpointStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// EndpointList contains a list of Endpoints
type EndpointList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Endpoint `json:"items"`
}

// Repository type metadata.
var (
	EndpointKind             = "Endpoint"
	EndpointGroupKind        = schema.GroupKind{Group: Group, Kind: EndpointKind}.String()
	EndpointKindAPIVersion   = EndpointKind + "." + GroupVersion.String()
	EndpointGroupVersionKind = GroupVersion.WithKind(EndpointKind)
)

func init() {
	SchemeBuilder.Register(&Endpoint{}, &EndpointList{})
}
