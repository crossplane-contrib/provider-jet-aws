/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

// +kubebuilder:object:generate=true
// +groupName=dms.aws.tf.crossplane.io
// +versionName=v1alpha1

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1alpha1 "github.com/crossplane-contrib/provider-tf-aws/apis/dms/v1alpha1"
)

type DmsEndpointObservation struct {
	EndpointArn string `json:"endpointArn" tf:"endpoint_arn"`
}

type DmsEndpointParameters struct {
	CertificateArn *string `json:"certificateArn,omitempty" tf:"certificate_arn"`

	DatabaseName *string `json:"databaseName,omitempty" tf:"database_name"`

	ElasticsearchSettings []ElasticsearchSettingsParameters `json:"elasticsearchSettings,omitempty" tf:"elasticsearch_settings"`

	EndpointId string `json:"endpointId" tf:"endpoint_id"`

	EndpointType string `json:"endpointType" tf:"endpoint_type"`

	EngineName string `json:"engineName" tf:"engine_name"`

	ExtraConnectionAttributes *string `json:"extraConnectionAttributes,omitempty" tf:"extra_connection_attributes"`

	KafkaSettings []KafkaSettingsParameters `json:"kafkaSettings,omitempty" tf:"kafka_settings"`

	KinesisSettings []KinesisSettingsParameters `json:"kinesisSettings,omitempty" tf:"kinesis_settings"`

	KmsKeyArn *string `json:"kmsKeyArn,omitempty" tf:"kms_key_arn"`

	MongodbSettings []MongodbSettingsParameters `json:"mongodbSettings,omitempty" tf:"mongodb_settings"`

	Password *string `json:"password,omitempty" tf:"password"`

	Port *int64 `json:"port,omitempty" tf:"port"`

	S3Settings []S3SettingsParameters `json:"s3Settings,omitempty" tf:"s3_settings"`

	ServerName *string `json:"serverName,omitempty" tf:"server_name"`

	ServiceAccessRole *string `json:"serviceAccessRole,omitempty" tf:"service_access_role"`

	SslMode *string `json:"sslMode,omitempty" tf:"ssl_mode"`

	Tags map[string]string `json:"tags,omitempty" tf:"tags"`

	TagsAll map[string]string `json:"tagsAll,omitempty" tf:"tags_all"`

	Username *string `json:"username,omitempty" tf:"username"`
}

type ElasticsearchSettingsObservation struct {
}

type ElasticsearchSettingsParameters struct {
	EndpointUri string `json:"endpointUri" tf:"endpoint_uri"`

	ErrorRetryDuration *int64 `json:"errorRetryDuration,omitempty" tf:"error_retry_duration"`

	FullLoadErrorPercentage *int64 `json:"fullLoadErrorPercentage,omitempty" tf:"full_load_error_percentage"`

	ServiceAccessRoleArn string `json:"serviceAccessRoleArn" tf:"service_access_role_arn"`
}

type KafkaSettingsObservation struct {
}

type KafkaSettingsParameters struct {
	Broker string `json:"broker" tf:"broker"`

	Topic *string `json:"topic,omitempty" tf:"topic"`
}

type KinesisSettingsObservation struct {
}

type KinesisSettingsParameters struct {
	MessageFormat *string `json:"messageFormat,omitempty" tf:"message_format"`

	ServiceAccessRoleArn *string `json:"serviceAccessRoleArn,omitempty" tf:"service_access_role_arn"`

	StreamArn *string `json:"streamArn,omitempty" tf:"stream_arn"`
}

type MongodbSettingsObservation struct {
}

type MongodbSettingsParameters struct {
	AuthMechanism *string `json:"authMechanism,omitempty" tf:"auth_mechanism"`

	AuthSource *string `json:"authSource,omitempty" tf:"auth_source"`

	AuthType *string `json:"authType,omitempty" tf:"auth_type"`

	DocsToInvestigate *string `json:"docsToInvestigate,omitempty" tf:"docs_to_investigate"`

	ExtractDocId *string `json:"extractDocId,omitempty" tf:"extract_doc_id"`

	NestingLevel *string `json:"nestingLevel,omitempty" tf:"nesting_level"`
}

type S3SettingsObservation struct {
}

type S3SettingsParameters struct {
	BucketFolder *string `json:"bucketFolder,omitempty" tf:"bucket_folder"`

	BucketName *string `json:"bucketName,omitempty" tf:"bucket_name"`

	CompressionType *string `json:"compressionType,omitempty" tf:"compression_type"`

	CsvDelimiter *string `json:"csvDelimiter,omitempty" tf:"csv_delimiter"`

	CsvRowDelimiter *string `json:"csvRowDelimiter,omitempty" tf:"csv_row_delimiter"`

	DatePartitionEnabled *bool `json:"datePartitionEnabled,omitempty" tf:"date_partition_enabled"`

	ExternalTableDefinition *string `json:"externalTableDefinition,omitempty" tf:"external_table_definition"`

	ServiceAccessRoleArn *string `json:"serviceAccessRoleArn,omitempty" tf:"service_access_role_arn"`
}

// DmsEndpointSpec defines the desired state of DmsEndpoint
type DmsEndpointSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       DmsEndpointParameters `json:"forProvider"`
}

// DmsEndpointStatus defines the observed state of DmsEndpoint.
type DmsEndpointStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          DmsEndpointObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// DmsEndpoint is the Schema for the DmsEndpoints API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type DmsEndpoint struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DmsEndpointSpec   `json:"spec"`
	Status            DmsEndpointStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DmsEndpointList contains a list of DmsEndpoints
type DmsEndpointList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DmsEndpoint `json:"items"`
}

// Repository type metadata.
var (
	DmsEndpointKind             = "DmsEndpoint"
	DmsEndpointGroupKind        = schema.GroupKind{Group: v1alpha1.Group, Kind: DmsEndpointKind}.String()
	DmsEndpointKindAPIVersion   = DmsEndpointKind + "." + v1alpha1.GroupVersion.String()
	DmsEndpointGroupVersionKind = v1alpha1.GroupVersion.WithKind(DmsEndpointKind)
)

func init() {
	v1alpha1.SchemeBuilder.Register(&DmsEndpoint{}, &DmsEndpointList{})
}
