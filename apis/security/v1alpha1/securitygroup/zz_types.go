/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

// +kubebuilder:object:generate=true
// +groupName=security.aws.tf.crossplane.io
// +versionName=v1alpha1

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1alpha1 "github.com/crossplane-contrib/provider-tf-aws/apis/security/v1alpha1"
)

type EgressObservation struct {
}

type EgressParameters struct {
	CidrBlocks []string `json:"cidrBlocks,omitempty" tf:"cidr_blocks"`

	Description *string `json:"description,omitempty" tf:"description"`

	FromPort int64 `json:"fromPort" tf:"from_port"`

	Ipv6CidrBlocks []string `json:"ipv6CidrBlocks,omitempty" tf:"ipv6_cidr_blocks"`

	PrefixListIds []string `json:"prefixListIds,omitempty" tf:"prefix_list_ids"`

	Protocol string `json:"protocol" tf:"protocol"`

	SecurityGroups []string `json:"securityGroups,omitempty" tf:"security_groups"`

	Self *bool `json:"self,omitempty" tf:"self"`

	ToPort int64 `json:"toPort" tf:"to_port"`
}

type IngressObservation struct {
}

type IngressParameters struct {
	CidrBlocks []string `json:"cidrBlocks,omitempty" tf:"cidr_blocks"`

	Description *string `json:"description,omitempty" tf:"description"`

	FromPort int64 `json:"fromPort" tf:"from_port"`

	Ipv6CidrBlocks []string `json:"ipv6CidrBlocks,omitempty" tf:"ipv6_cidr_blocks"`

	PrefixListIds []string `json:"prefixListIds,omitempty" tf:"prefix_list_ids"`

	Protocol string `json:"protocol" tf:"protocol"`

	SecurityGroups []string `json:"securityGroups,omitempty" tf:"security_groups"`

	Self *bool `json:"self,omitempty" tf:"self"`

	ToPort int64 `json:"toPort" tf:"to_port"`
}

type SecurityGroupObservation struct {
	Arn string `json:"arn" tf:"arn"`

	OwnerId string `json:"ownerId" tf:"owner_id"`
}

type SecurityGroupParameters struct {
	Description *string `json:"description,omitempty" tf:"description"`

	Egress []EgressParameters `json:"egress,omitempty" tf:"egress"`

	Ingress []IngressParameters `json:"ingress,omitempty" tf:"ingress"`

	Name *string `json:"name,omitempty" tf:"name"`

	NamePrefix *string `json:"namePrefix,omitempty" tf:"name_prefix"`

	RevokeRulesOnDelete *bool `json:"revokeRulesOnDelete,omitempty" tf:"revoke_rules_on_delete"`

	Tags map[string]string `json:"tags,omitempty" tf:"tags"`

	TagsAll map[string]string `json:"tagsAll,omitempty" tf:"tags_all"`

	VpcId *string `json:"vpcId,omitempty" tf:"vpc_id"`
}

// SecurityGroupSpec defines the desired state of SecurityGroup
type SecurityGroupSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       SecurityGroupParameters `json:"forProvider"`
}

// SecurityGroupStatus defines the observed state of SecurityGroup.
type SecurityGroupStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          SecurityGroupObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// SecurityGroup is the Schema for the SecurityGroups API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type SecurityGroup struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              SecurityGroupSpec   `json:"spec"`
	Status            SecurityGroupStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SecurityGroupList contains a list of SecurityGroups
type SecurityGroupList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []SecurityGroup `json:"items"`
}

// Repository type metadata.
var (
	SecurityGroupKind             = "SecurityGroup"
	SecurityGroupGroupKind        = schema.GroupKind{Group: v1alpha1.Group, Kind: SecurityGroupKind}.String()
	SecurityGroupKindAPIVersion   = SecurityGroupKind + "." + v1alpha1.GroupVersion.String()
	SecurityGroupGroupVersionKind = v1alpha1.GroupVersion.WithKind(SecurityGroupKind)
)

func init() {
	v1alpha1.SchemeBuilder.Register(&SecurityGroup{}, &SecurityGroupList{})
}
