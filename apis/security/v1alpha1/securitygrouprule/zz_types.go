/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

// +kubebuilder:object:generate=true
// +groupName=security.aws.tf.crossplane.io
// +versionName=v1alpha1

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1alpha1 "github.com/crossplane-contrib/provider-tf-aws/apis/security/v1alpha1"
)

type SecurityGroupRuleObservation struct {
}

type SecurityGroupRuleParameters struct {
	CidrBlocks []string `json:"cidrBlocks,omitempty" tf:"cidr_blocks"`

	Description *string `json:"description,omitempty" tf:"description"`

	FromPort int64 `json:"fromPort" tf:"from_port"`

	Ipv6CidrBlocks []string `json:"ipv6CidrBlocks,omitempty" tf:"ipv6_cidr_blocks"`

	PrefixListIds []string `json:"prefixListIds,omitempty" tf:"prefix_list_ids"`

	Protocol string `json:"protocol" tf:"protocol"`

	SecurityGroupId string `json:"securityGroupId" tf:"security_group_id"`

	Self *bool `json:"self,omitempty" tf:"self"`

	SourceSecurityGroupId *string `json:"sourceSecurityGroupId,omitempty" tf:"source_security_group_id"`

	ToPort int64 `json:"toPort" tf:"to_port"`

	Type string `json:"type" tf:"type"`
}

// SecurityGroupRuleSpec defines the desired state of SecurityGroupRule
type SecurityGroupRuleSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       SecurityGroupRuleParameters `json:"forProvider"`
}

// SecurityGroupRuleStatus defines the observed state of SecurityGroupRule.
type SecurityGroupRuleStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          SecurityGroupRuleObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// SecurityGroupRule is the Schema for the SecurityGroupRules API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type SecurityGroupRule struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              SecurityGroupRuleSpec   `json:"spec"`
	Status            SecurityGroupRuleStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SecurityGroupRuleList contains a list of SecurityGroupRules
type SecurityGroupRuleList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []SecurityGroupRule `json:"items"`
}

// Repository type metadata.
var (
	SecurityGroupRuleKind             = "SecurityGroupRule"
	SecurityGroupRuleGroupKind        = schema.GroupKind{Group: v1alpha1.Group, Kind: SecurityGroupRuleKind}.String()
	SecurityGroupRuleKindAPIVersion   = SecurityGroupRuleKind + "." + v1alpha1.GroupVersion.String()
	SecurityGroupRuleGroupVersionKind = v1alpha1.GroupVersion.WithKind(SecurityGroupRuleKind)
)

func init() {
	v1alpha1.SchemeBuilder.Register(&SecurityGroupRule{}, &SecurityGroupRuleList{})
}
