/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

// +kubebuilder:object:generate=true
// +groupName=codeartifact.aws.tf.crossplane.io
// +versionName=v1alpha1

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1alpha1 "github.com/crossplane-contrib/provider-tf-aws/apis/codeartifact/v1alpha1"
)

type CodeartifactDomainObservation struct {
	Arn string `json:"arn" tf:"arn"`

	AssetSizeBytes int64 `json:"assetSizeBytes" tf:"asset_size_bytes"`

	CreatedTime string `json:"createdTime" tf:"created_time"`

	Owner string `json:"owner" tf:"owner"`

	RepositoryCount int64 `json:"repositoryCount" tf:"repository_count"`
}

type CodeartifactDomainParameters struct {
	Domain string `json:"domain" tf:"domain"`

	EncryptionKey *string `json:"encryptionKey,omitempty" tf:"encryption_key"`

	Tags map[string]string `json:"tags,omitempty" tf:"tags"`

	TagsAll map[string]string `json:"tagsAll,omitempty" tf:"tags_all"`
}

// CodeartifactDomainSpec defines the desired state of CodeartifactDomain
type CodeartifactDomainSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       CodeartifactDomainParameters `json:"forProvider"`
}

// CodeartifactDomainStatus defines the observed state of CodeartifactDomain.
type CodeartifactDomainStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          CodeartifactDomainObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// CodeartifactDomain is the Schema for the CodeartifactDomains API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type CodeartifactDomain struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              CodeartifactDomainSpec   `json:"spec"`
	Status            CodeartifactDomainStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// CodeartifactDomainList contains a list of CodeartifactDomains
type CodeartifactDomainList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []CodeartifactDomain `json:"items"`
}

// Repository type metadata.
var (
	CodeartifactDomainKind             = "CodeartifactDomain"
	CodeartifactDomainGroupKind        = schema.GroupKind{Group: v1alpha1.Group, Kind: CodeartifactDomainKind}.String()
	CodeartifactDomainKindAPIVersion   = CodeartifactDomainKind + "." + v1alpha1.GroupVersion.String()
	CodeartifactDomainGroupVersionKind = v1alpha1.GroupVersion.WithKind(CodeartifactDomainKind)
)

func init() {
	v1alpha1.SchemeBuilder.Register(&CodeartifactDomain{}, &CodeartifactDomainList{})
}
