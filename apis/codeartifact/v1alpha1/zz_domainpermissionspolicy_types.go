/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type DomainPermissionsPolicyObservation struct {
	ResourceArn *string `json:"resourceArn,omitempty" tf:"resource_arn,omitempty"`
}

type DomainPermissionsPolicyParameters struct {

	// +kubebuilder:validation:Required
	Domain *string `json:"domain" tf:"domain,omitempty"`

	// +kubebuilder:validation:Optional
	DomainOwner *string `json:"domainOwner,omitempty" tf:"domain_owner,omitempty"`

	// +kubebuilder:validation:Required
	PolicyDocument *string `json:"policyDocument" tf:"policy_document,omitempty"`

	// +kubebuilder:validation:Optional
	PolicyRevision *string `json:"policyRevision,omitempty" tf:"policy_revision,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +terrajet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`
}

// DomainPermissionsPolicySpec defines the desired state of DomainPermissionsPolicy
type DomainPermissionsPolicySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     DomainPermissionsPolicyParameters `json:"forProvider"`
}

// DomainPermissionsPolicyStatus defines the observed state of DomainPermissionsPolicy.
type DomainPermissionsPolicyStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        DomainPermissionsPolicyObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// DomainPermissionsPolicy is the Schema for the DomainPermissionsPolicys API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tfaws}
type DomainPermissionsPolicy struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DomainPermissionsPolicySpec   `json:"spec"`
	Status            DomainPermissionsPolicyStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DomainPermissionsPolicyList contains a list of DomainPermissionsPolicys
type DomainPermissionsPolicyList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DomainPermissionsPolicy `json:"items"`
}

// Repository type metadata.
var (
	DomainPermissionsPolicyKind             = "DomainPermissionsPolicy"
	DomainPermissionsPolicyGroupKind        = schema.GroupKind{Group: Group, Kind: DomainPermissionsPolicyKind}.String()
	DomainPermissionsPolicyKindAPIVersion   = DomainPermissionsPolicyKind + "." + GroupVersion.String()
	DomainPermissionsPolicyGroupVersionKind = GroupVersion.WithKind(DomainPermissionsPolicyKind)
)

func init() {
	SchemeBuilder.Register(&DomainPermissionsPolicy{}, &DomainPermissionsPolicyList{})
}
