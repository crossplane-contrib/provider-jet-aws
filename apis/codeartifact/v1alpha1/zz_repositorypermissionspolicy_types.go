/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type RepositoryPermissionsPolicyObservation struct {
	ResourceArn *string `json:"resourceArn,omitempty" tf:"resource_arn,omitempty"`
}

type RepositoryPermissionsPolicyParameters struct {

	// +kubebuilder:validation:Required
	Domain *string `json:"domain" tf:"domain,omitempty"`

	// +kubebuilder:validation:Optional
	DomainOwner *string `json:"domainOwner,omitempty" tf:"domain_owner,omitempty"`

	// +kubebuilder:validation:Required
	PolicyDocument *string `json:"policyDocument" tf:"policy_document,omitempty"`

	// +kubebuilder:validation:Optional
	PolicyRevision *string `json:"policyRevision,omitempty" tf:"policy_revision,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +terrajet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`

	// +kubebuilder:validation:Required
	Repository *string `json:"repository" tf:"repository,omitempty"`
}

// RepositoryPermissionsPolicySpec defines the desired state of RepositoryPermissionsPolicy
type RepositoryPermissionsPolicySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     RepositoryPermissionsPolicyParameters `json:"forProvider"`
}

// RepositoryPermissionsPolicyStatus defines the observed state of RepositoryPermissionsPolicy.
type RepositoryPermissionsPolicyStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        RepositoryPermissionsPolicyObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// RepositoryPermissionsPolicy is the Schema for the RepositoryPermissionsPolicys API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tfaws}
type RepositoryPermissionsPolicy struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              RepositoryPermissionsPolicySpec   `json:"spec"`
	Status            RepositoryPermissionsPolicyStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// RepositoryPermissionsPolicyList contains a list of RepositoryPermissionsPolicys
type RepositoryPermissionsPolicyList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []RepositoryPermissionsPolicy `json:"items"`
}

// Repository type metadata.
var (
	RepositoryPermissionsPolicyKind             = "RepositoryPermissionsPolicy"
	RepositoryPermissionsPolicyGroupKind        = schema.GroupKind{Group: Group, Kind: RepositoryPermissionsPolicyKind}.String()
	RepositoryPermissionsPolicyKindAPIVersion   = RepositoryPermissionsPolicyKind + "." + GroupVersion.String()
	RepositoryPermissionsPolicyGroupVersionKind = GroupVersion.WithKind(RepositoryPermissionsPolicyKind)
)

func init() {
	SchemeBuilder.Register(&RepositoryPermissionsPolicy{}, &RepositoryPermissionsPolicyList{})
}
