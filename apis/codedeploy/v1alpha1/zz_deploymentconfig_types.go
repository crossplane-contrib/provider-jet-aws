/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type DeploymentConfigObservation struct {
	DeploymentConfigID *string `json:"deploymentConfigId,omitempty" tf:"deployment_config_id,omitempty"`
}

type DeploymentConfigParameters struct {

	// +kubebuilder:validation:Optional
	ComputePlatform *string `json:"computePlatform,omitempty" tf:"compute_platform,omitempty"`

	// +kubebuilder:validation:Required
	DeploymentConfigName *string `json:"deploymentConfigName" tf:"deployment_config_name,omitempty"`

	// +kubebuilder:validation:Optional
	MinimumHealthyHosts []MinimumHealthyHostsParameters `json:"minimumHealthyHosts,omitempty" tf:"minimum_healthy_hosts,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +terrajet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`

	// +kubebuilder:validation:Optional
	TrafficRoutingConfig []TrafficRoutingConfigParameters `json:"trafficRoutingConfig,omitempty" tf:"traffic_routing_config,omitempty"`
}

type MinimumHealthyHostsObservation struct {
}

type MinimumHealthyHostsParameters struct {

	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// +kubebuilder:validation:Optional
	Value *int64 `json:"value,omitempty" tf:"value,omitempty"`
}

type TimeBasedCanaryObservation struct {
}

type TimeBasedCanaryParameters struct {

	// +kubebuilder:validation:Optional
	Interval *int64 `json:"interval,omitempty" tf:"interval,omitempty"`

	// +kubebuilder:validation:Optional
	Percentage *int64 `json:"percentage,omitempty" tf:"percentage,omitempty"`
}

type TimeBasedLinearObservation struct {
}

type TimeBasedLinearParameters struct {

	// +kubebuilder:validation:Optional
	Interval *int64 `json:"interval,omitempty" tf:"interval,omitempty"`

	// +kubebuilder:validation:Optional
	Percentage *int64 `json:"percentage,omitempty" tf:"percentage,omitempty"`
}

type TrafficRoutingConfigObservation struct {
}

type TrafficRoutingConfigParameters struct {

	// +kubebuilder:validation:Optional
	TimeBasedCanary []TimeBasedCanaryParameters `json:"timeBasedCanary,omitempty" tf:"time_based_canary,omitempty"`

	// +kubebuilder:validation:Optional
	TimeBasedLinear []TimeBasedLinearParameters `json:"timeBasedLinear,omitempty" tf:"time_based_linear,omitempty"`

	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

// DeploymentConfigSpec defines the desired state of DeploymentConfig
type DeploymentConfigSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     DeploymentConfigParameters `json:"forProvider"`
}

// DeploymentConfigStatus defines the observed state of DeploymentConfig.
type DeploymentConfigStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        DeploymentConfigObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// DeploymentConfig is the Schema for the DeploymentConfigs API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tfaws}
type DeploymentConfig struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DeploymentConfigSpec   `json:"spec"`
	Status            DeploymentConfigStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DeploymentConfigList contains a list of DeploymentConfigs
type DeploymentConfigList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DeploymentConfig `json:"items"`
}

// Repository type metadata.
var (
	DeploymentConfigKind             = "DeploymentConfig"
	DeploymentConfigGroupKind        = schema.GroupKind{Group: Group, Kind: DeploymentConfigKind}.String()
	DeploymentConfigKindAPIVersion   = DeploymentConfigKind + "." + GroupVersion.String()
	DeploymentConfigGroupVersionKind = GroupVersion.WithKind(DeploymentConfigKind)
)

func init() {
	SchemeBuilder.Register(&DeploymentConfig{}, &DeploymentConfigList{})
}
