/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

// +kubebuilder:object:generate=true
// +groupName=iot.aws.tf.crossplane.io
// +versionName=v1alpha1

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1alpha1 "github.com/crossplane-contrib/provider-tf-aws/apis/iot/v1alpha1"
)

type IotRoleAliasObservation struct {
	Arn string `json:"arn" tf:"arn"`
}

type IotRoleAliasParameters struct {
	Alias string `json:"alias" tf:"alias"`

	CredentialDuration *int64 `json:"credentialDuration,omitempty" tf:"credential_duration"`

	RoleArn string `json:"roleArn" tf:"role_arn"`
}

// IotRoleAliasSpec defines the desired state of IotRoleAlias
type IotRoleAliasSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       IotRoleAliasParameters `json:"forProvider"`
}

// IotRoleAliasStatus defines the observed state of IotRoleAlias.
type IotRoleAliasStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          IotRoleAliasObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// IotRoleAlias is the Schema for the IotRoleAliass API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type IotRoleAlias struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              IotRoleAliasSpec   `json:"spec"`
	Status            IotRoleAliasStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// IotRoleAliasList contains a list of IotRoleAliass
type IotRoleAliasList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []IotRoleAlias `json:"items"`
}

// Repository type metadata.
var (
	IotRoleAliasKind             = "IotRoleAlias"
	IotRoleAliasGroupKind        = schema.GroupKind{Group: v1alpha1.Group, Kind: IotRoleAliasKind}.String()
	IotRoleAliasKindAPIVersion   = IotRoleAliasKind + "." + v1alpha1.GroupVersion.String()
	IotRoleAliasGroupVersionKind = v1alpha1.GroupVersion.WithKind(IotRoleAliasKind)
)

func init() {
	v1alpha1.SchemeBuilder.Register(&IotRoleAlias{}, &IotRoleAliasList{})
}
