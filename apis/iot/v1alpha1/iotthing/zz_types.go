/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

// +kubebuilder:object:generate=true
// +groupName=iot.aws.tf.crossplane.io
// +versionName=v1alpha1

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1alpha1 "github.com/crossplane-contrib/provider-tf-aws/apis/iot/v1alpha1"
)

type IotThingObservation struct {
	Arn string `json:"arn" tf:"arn"`

	DefaultClientId string `json:"defaultClientId" tf:"default_client_id"`

	Version int64 `json:"version" tf:"version"`
}

type IotThingParameters struct {
	Attributes map[string]string `json:"attributes,omitempty" tf:"attributes"`

	Name string `json:"name" tf:"name"`

	ThingTypeName *string `json:"thingTypeName,omitempty" tf:"thing_type_name"`
}

// IotThingSpec defines the desired state of IotThing
type IotThingSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       IotThingParameters `json:"forProvider"`
}

// IotThingStatus defines the observed state of IotThing.
type IotThingStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          IotThingObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// IotThing is the Schema for the IotThings API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type IotThing struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              IotThingSpec   `json:"spec"`
	Status            IotThingStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// IotThingList contains a list of IotThings
type IotThingList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []IotThing `json:"items"`
}

// Repository type metadata.
var (
	IotThingKind             = "IotThing"
	IotThingGroupKind        = schema.GroupKind{Group: v1alpha1.Group, Kind: IotThingKind}.String()
	IotThingKindAPIVersion   = IotThingKind + "." + v1alpha1.GroupVersion.String()
	IotThingGroupVersionKind = v1alpha1.GroupVersion.WithKind(IotThingKind)
)

func init() {
	v1alpha1.SchemeBuilder.Register(&IotThing{}, &IotThingList{})
}
