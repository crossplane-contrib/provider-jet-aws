/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type PropertiesObservation struct {
}

type PropertiesParameters struct {

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Optional
	SearchableAttributes []*string `json:"searchableAttributes,omitempty" tf:"searchable_attributes,omitempty"`
}

type ThingTypeObservation struct {
	Arn *string `json:"arn,omitempty" tf:"arn,omitempty"`
}

type ThingTypeParameters struct {

	// +kubebuilder:validation:Optional
	Deprecated *bool `json:"deprecated,omitempty" tf:"deprecated,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	Properties []PropertiesParameters `json:"properties,omitempty" tf:"properties,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +terrajet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`
}

// ThingTypeSpec defines the desired state of ThingType
type ThingTypeSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ThingTypeParameters `json:"forProvider"`
}

// ThingTypeStatus defines the observed state of ThingType.
type ThingTypeStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ThingTypeObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ThingType is the Schema for the ThingTypes API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tfaws}
type ThingType struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ThingTypeSpec   `json:"spec"`
	Status            ThingTypeStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ThingTypeList contains a list of ThingTypes
type ThingTypeList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ThingType `json:"items"`
}

// Repository type metadata.
var (
	ThingTypeKind             = "ThingType"
	ThingTypeGroupKind        = schema.GroupKind{Group: Group, Kind: ThingTypeKind}.String()
	ThingTypeKindAPIVersion   = ThingTypeKind + "." + GroupVersion.String()
	ThingTypeGroupVersionKind = GroupVersion.WithKind(ThingTypeKind)
)

func init() {
	SchemeBuilder.Register(&ThingType{}, &ThingTypeList{})
}
