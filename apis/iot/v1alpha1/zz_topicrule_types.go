/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type CloudwatchAlarmObservation struct {
}

type CloudwatchAlarmParameters struct {

	// +kubebuilder:validation:Required
	AlarmName *string `json:"alarmName" tf:"alarm_name,omitempty"`

	// +kubebuilder:validation:Required
	RoleArn *string `json:"roleArn" tf:"role_arn,omitempty"`

	// +kubebuilder:validation:Required
	StateReason *string `json:"stateReason" tf:"state_reason,omitempty"`

	// +kubebuilder:validation:Required
	StateValue *string `json:"stateValue" tf:"state_value,omitempty"`
}

type CloudwatchMetricObservation struct {
}

type CloudwatchMetricParameters struct {

	// +kubebuilder:validation:Required
	MetricName *string `json:"metricName" tf:"metric_name,omitempty"`

	// +kubebuilder:validation:Required
	MetricNamespace *string `json:"metricNamespace" tf:"metric_namespace,omitempty"`

	// +kubebuilder:validation:Optional
	MetricTimestamp *string `json:"metricTimestamp,omitempty" tf:"metric_timestamp,omitempty"`

	// +kubebuilder:validation:Required
	MetricUnit *string `json:"metricUnit" tf:"metric_unit,omitempty"`

	// +kubebuilder:validation:Required
	MetricValue *string `json:"metricValue" tf:"metric_value,omitempty"`

	// +kubebuilder:validation:Required
	RoleArn *string `json:"roleArn" tf:"role_arn,omitempty"`
}

type DynamodbObservation struct {
}

type DynamodbParameters struct {

	// +kubebuilder:validation:Required
	HashKeyField *string `json:"hashKeyField" tf:"hash_key_field,omitempty"`

	// +kubebuilder:validation:Optional
	HashKeyType *string `json:"hashKeyType,omitempty" tf:"hash_key_type,omitempty"`

	// +kubebuilder:validation:Required
	HashKeyValue *string `json:"hashKeyValue" tf:"hash_key_value,omitempty"`

	// +kubebuilder:validation:Optional
	Operation *string `json:"operation,omitempty" tf:"operation,omitempty"`

	// +kubebuilder:validation:Optional
	PayloadField *string `json:"payloadField,omitempty" tf:"payload_field,omitempty"`

	// +kubebuilder:validation:Optional
	RangeKeyField *string `json:"rangeKeyField,omitempty" tf:"range_key_field,omitempty"`

	// +kubebuilder:validation:Optional
	RangeKeyType *string `json:"rangeKeyType,omitempty" tf:"range_key_type,omitempty"`

	// +kubebuilder:validation:Optional
	RangeKeyValue *string `json:"rangeKeyValue,omitempty" tf:"range_key_value,omitempty"`

	// +kubebuilder:validation:Required
	RoleArn *string `json:"roleArn" tf:"role_arn,omitempty"`

	// +kubebuilder:validation:Required
	TableName *string `json:"tableName" tf:"table_name,omitempty"`
}

type Dynamodbv2Observation struct {
}

type Dynamodbv2Parameters struct {

	// +kubebuilder:validation:Optional
	PutItem []PutItemParameters `json:"putItem,omitempty" tf:"put_item,omitempty"`

	// +kubebuilder:validation:Required
	RoleArn *string `json:"roleArn" tf:"role_arn,omitempty"`
}

type Dynamodbv2PutItemObservation struct {
}

type Dynamodbv2PutItemParameters struct {

	// +kubebuilder:validation:Required
	TableName *string `json:"tableName" tf:"table_name,omitempty"`
}

type ElasticsearchObservation struct {
}

type ElasticsearchParameters struct {

	// +kubebuilder:validation:Required
	Endpoint *string `json:"endpoint" tf:"endpoint,omitempty"`

	// +kubebuilder:validation:Required
	ID *string `json:"id" tf:"id,omitempty"`

	// +kubebuilder:validation:Required
	Index *string `json:"index" tf:"index,omitempty"`

	// +kubebuilder:validation:Required
	RoleArn *string `json:"roleArn" tf:"role_arn,omitempty"`

	// +kubebuilder:validation:Required
	Type *string `json:"type" tf:"type,omitempty"`
}

type ErrorActionCloudwatchAlarmObservation struct {
}

type ErrorActionCloudwatchAlarmParameters struct {

	// +kubebuilder:validation:Required
	AlarmName *string `json:"alarmName" tf:"alarm_name,omitempty"`

	// +kubebuilder:validation:Required
	RoleArn *string `json:"roleArn" tf:"role_arn,omitempty"`

	// +kubebuilder:validation:Required
	StateReason *string `json:"stateReason" tf:"state_reason,omitempty"`

	// +kubebuilder:validation:Required
	StateValue *string `json:"stateValue" tf:"state_value,omitempty"`
}

type ErrorActionCloudwatchMetricObservation struct {
}

type ErrorActionCloudwatchMetricParameters struct {

	// +kubebuilder:validation:Required
	MetricName *string `json:"metricName" tf:"metric_name,omitempty"`

	// +kubebuilder:validation:Required
	MetricNamespace *string `json:"metricNamespace" tf:"metric_namespace,omitempty"`

	// +kubebuilder:validation:Optional
	MetricTimestamp *string `json:"metricTimestamp,omitempty" tf:"metric_timestamp,omitempty"`

	// +kubebuilder:validation:Required
	MetricUnit *string `json:"metricUnit" tf:"metric_unit,omitempty"`

	// +kubebuilder:validation:Required
	MetricValue *string `json:"metricValue" tf:"metric_value,omitempty"`

	// +kubebuilder:validation:Required
	RoleArn *string `json:"roleArn" tf:"role_arn,omitempty"`
}

type ErrorActionDynamodbObservation struct {
}

type ErrorActionDynamodbParameters struct {

	// +kubebuilder:validation:Required
	HashKeyField *string `json:"hashKeyField" tf:"hash_key_field,omitempty"`

	// +kubebuilder:validation:Optional
	HashKeyType *string `json:"hashKeyType,omitempty" tf:"hash_key_type,omitempty"`

	// +kubebuilder:validation:Required
	HashKeyValue *string `json:"hashKeyValue" tf:"hash_key_value,omitempty"`

	// +kubebuilder:validation:Optional
	Operation *string `json:"operation,omitempty" tf:"operation,omitempty"`

	// +kubebuilder:validation:Optional
	PayloadField *string `json:"payloadField,omitempty" tf:"payload_field,omitempty"`

	// +kubebuilder:validation:Optional
	RangeKeyField *string `json:"rangeKeyField,omitempty" tf:"range_key_field,omitempty"`

	// +kubebuilder:validation:Optional
	RangeKeyType *string `json:"rangeKeyType,omitempty" tf:"range_key_type,omitempty"`

	// +kubebuilder:validation:Optional
	RangeKeyValue *string `json:"rangeKeyValue,omitempty" tf:"range_key_value,omitempty"`

	// +kubebuilder:validation:Required
	RoleArn *string `json:"roleArn" tf:"role_arn,omitempty"`

	// +kubebuilder:validation:Required
	TableName *string `json:"tableName" tf:"table_name,omitempty"`
}

type ErrorActionDynamodbv2Observation struct {
}

type ErrorActionDynamodbv2Parameters struct {

	// +kubebuilder:validation:Optional
	PutItem []Dynamodbv2PutItemParameters `json:"putItem,omitempty" tf:"put_item,omitempty"`

	// +kubebuilder:validation:Required
	RoleArn *string `json:"roleArn" tf:"role_arn,omitempty"`
}

type ErrorActionElasticsearchObservation struct {
}

type ErrorActionElasticsearchParameters struct {

	// +kubebuilder:validation:Required
	Endpoint *string `json:"endpoint" tf:"endpoint,omitempty"`

	// +kubebuilder:validation:Required
	ID *string `json:"id" tf:"id,omitempty"`

	// +kubebuilder:validation:Required
	Index *string `json:"index" tf:"index,omitempty"`

	// +kubebuilder:validation:Required
	RoleArn *string `json:"roleArn" tf:"role_arn,omitempty"`

	// +kubebuilder:validation:Required
	Type *string `json:"type" tf:"type,omitempty"`
}

type ErrorActionObservation struct {
}

type ErrorActionParameters struct {

	// +kubebuilder:validation:Optional
	CloudwatchAlarm []ErrorActionCloudwatchAlarmParameters `json:"cloudwatchAlarm,omitempty" tf:"cloudwatch_alarm,omitempty"`

	// +kubebuilder:validation:Optional
	CloudwatchMetric []ErrorActionCloudwatchMetricParameters `json:"cloudwatchMetric,omitempty" tf:"cloudwatch_metric,omitempty"`

	// +kubebuilder:validation:Optional
	Dynamodb []ErrorActionDynamodbParameters `json:"dynamodb,omitempty" tf:"dynamodb,omitempty"`

	// +kubebuilder:validation:Optional
	Dynamodbv2 []ErrorActionDynamodbv2Parameters `json:"dynamodbv2,omitempty" tf:"dynamodbv2,omitempty"`

	// +kubebuilder:validation:Optional
	Elasticsearch []ErrorActionElasticsearchParameters `json:"elasticsearch,omitempty" tf:"elasticsearch,omitempty"`

	// +kubebuilder:validation:Optional
	Firehose []FirehoseParameters `json:"firehose,omitempty" tf:"firehose,omitempty"`

	// +kubebuilder:validation:Optional
	IotAnalytics []IotAnalyticsParameters `json:"iotAnalytics,omitempty" tf:"iot_analytics,omitempty"`

	// +kubebuilder:validation:Optional
	IotEvents []IotEventsParameters `json:"iotEvents,omitempty" tf:"iot_events,omitempty"`

	// +kubebuilder:validation:Optional
	Kinesis []KinesisParameters `json:"kinesis,omitempty" tf:"kinesis,omitempty"`

	// +kubebuilder:validation:Optional
	Lambda []LambdaParameters `json:"lambda,omitempty" tf:"lambda,omitempty"`

	// +kubebuilder:validation:Optional
	Republish []RepublishParameters `json:"republish,omitempty" tf:"republish,omitempty"`

	// +kubebuilder:validation:Optional
	S3 []S3Parameters `json:"s3,omitempty" tf:"s3,omitempty"`

	// +kubebuilder:validation:Optional
	Sns []SnsParameters `json:"sns,omitempty" tf:"sns,omitempty"`

	// +kubebuilder:validation:Optional
	Sqs []SqsParameters `json:"sqs,omitempty" tf:"sqs,omitempty"`

	// +kubebuilder:validation:Optional
	StepFunctions []StepFunctionsParameters `json:"stepFunctions,omitempty" tf:"step_functions,omitempty"`
}

type FirehoseObservation struct {
}

type FirehoseParameters struct {

	// +kubebuilder:validation:Required
	DeliveryStreamName *string `json:"deliveryStreamName" tf:"delivery_stream_name,omitempty"`

	// +kubebuilder:validation:Required
	RoleArn *string `json:"roleArn" tf:"role_arn,omitempty"`

	// +kubebuilder:validation:Optional
	Separator *string `json:"separator,omitempty" tf:"separator,omitempty"`
}

type IotAnalyticsObservation struct {
}

type IotAnalyticsParameters struct {

	// +kubebuilder:validation:Required
	ChannelName *string `json:"channelName" tf:"channel_name,omitempty"`

	// +kubebuilder:validation:Required
	RoleArn *string `json:"roleArn" tf:"role_arn,omitempty"`
}

type IotEventsObservation struct {
}

type IotEventsParameters struct {

	// +kubebuilder:validation:Required
	InputName *string `json:"inputName" tf:"input_name,omitempty"`

	// +kubebuilder:validation:Optional
	MessageID *string `json:"messageId,omitempty" tf:"message_id,omitempty"`

	// +kubebuilder:validation:Required
	RoleArn *string `json:"roleArn" tf:"role_arn,omitempty"`
}

type KinesisObservation struct {
}

type KinesisParameters struct {

	// +kubebuilder:validation:Optional
	PartitionKey *string `json:"partitionKey,omitempty" tf:"partition_key,omitempty"`

	// +kubebuilder:validation:Required
	RoleArn *string `json:"roleArn" tf:"role_arn,omitempty"`

	// +kubebuilder:validation:Required
	StreamName *string `json:"streamName" tf:"stream_name,omitempty"`
}

type LambdaObservation struct {
}

type LambdaParameters struct {

	// +kubebuilder:validation:Required
	FunctionArn *string `json:"functionArn" tf:"function_arn,omitempty"`
}

type PutItemObservation struct {
}

type PutItemParameters struct {

	// +kubebuilder:validation:Required
	TableName *string `json:"tableName" tf:"table_name,omitempty"`
}

type RepublishObservation struct {
}

type RepublishParameters struct {

	// +kubebuilder:validation:Optional
	Qos *int64 `json:"qos,omitempty" tf:"qos,omitempty"`

	// +kubebuilder:validation:Required
	RoleArn *string `json:"roleArn" tf:"role_arn,omitempty"`

	// +kubebuilder:validation:Required
	Topic *string `json:"topic" tf:"topic,omitempty"`
}

type S3Observation struct {
}

type S3Parameters struct {

	// +kubebuilder:validation:Required
	BucketName *string `json:"bucketName" tf:"bucket_name,omitempty"`

	// +kubebuilder:validation:Required
	Key *string `json:"key" tf:"key,omitempty"`

	// +kubebuilder:validation:Required
	RoleArn *string `json:"roleArn" tf:"role_arn,omitempty"`
}

type SnsObservation struct {
}

type SnsParameters struct {

	// +kubebuilder:validation:Optional
	MessageFormat *string `json:"messageFormat,omitempty" tf:"message_format,omitempty"`

	// +kubebuilder:validation:Required
	RoleArn *string `json:"roleArn" tf:"role_arn,omitempty"`

	// +kubebuilder:validation:Required
	TargetArn *string `json:"targetArn" tf:"target_arn,omitempty"`
}

type SqsObservation struct {
}

type SqsParameters struct {

	// +kubebuilder:validation:Required
	QueueURL *string `json:"queueUrl" tf:"queue_url,omitempty"`

	// +kubebuilder:validation:Required
	RoleArn *string `json:"roleArn" tf:"role_arn,omitempty"`

	// +kubebuilder:validation:Required
	UseBase64 *bool `json:"useBase64" tf:"use_base64,omitempty"`
}

type StepFunctionsObservation struct {
}

type StepFunctionsParameters struct {

	// +kubebuilder:validation:Optional
	ExecutionNamePrefix *string `json:"executionNamePrefix,omitempty" tf:"execution_name_prefix,omitempty"`

	// +kubebuilder:validation:Required
	RoleArn *string `json:"roleArn" tf:"role_arn,omitempty"`

	// +kubebuilder:validation:Required
	StateMachineName *string `json:"stateMachineName" tf:"state_machine_name,omitempty"`
}

type TopicRuleFirehoseObservation struct {
}

type TopicRuleFirehoseParameters struct {

	// +kubebuilder:validation:Required
	DeliveryStreamName *string `json:"deliveryStreamName" tf:"delivery_stream_name,omitempty"`

	// +kubebuilder:validation:Required
	RoleArn *string `json:"roleArn" tf:"role_arn,omitempty"`

	// +kubebuilder:validation:Optional
	Separator *string `json:"separator,omitempty" tf:"separator,omitempty"`
}

type TopicRuleIotAnalyticsObservation struct {
}

type TopicRuleIotAnalyticsParameters struct {

	// +kubebuilder:validation:Required
	ChannelName *string `json:"channelName" tf:"channel_name,omitempty"`

	// +kubebuilder:validation:Required
	RoleArn *string `json:"roleArn" tf:"role_arn,omitempty"`
}

type TopicRuleIotEventsObservation struct {
}

type TopicRuleIotEventsParameters struct {

	// +kubebuilder:validation:Required
	InputName *string `json:"inputName" tf:"input_name,omitempty"`

	// +kubebuilder:validation:Optional
	MessageID *string `json:"messageId,omitempty" tf:"message_id,omitempty"`

	// +kubebuilder:validation:Required
	RoleArn *string `json:"roleArn" tf:"role_arn,omitempty"`
}

type TopicRuleKinesisObservation struct {
}

type TopicRuleKinesisParameters struct {

	// +kubebuilder:validation:Optional
	PartitionKey *string `json:"partitionKey,omitempty" tf:"partition_key,omitempty"`

	// +kubebuilder:validation:Required
	RoleArn *string `json:"roleArn" tf:"role_arn,omitempty"`

	// +kubebuilder:validation:Required
	StreamName *string `json:"streamName" tf:"stream_name,omitempty"`
}

type TopicRuleLambdaObservation struct {
}

type TopicRuleLambdaParameters struct {

	// +kubebuilder:validation:Required
	FunctionArn *string `json:"functionArn" tf:"function_arn,omitempty"`
}

type TopicRuleObservation struct {
	Arn *string `json:"arn,omitempty" tf:"arn,omitempty"`

	TagsAll map[string]*string `json:"tagsAll,omitempty" tf:"tags_all,omitempty"`
}

type TopicRuleParameters struct {

	// +kubebuilder:validation:Optional
	CloudwatchAlarm []CloudwatchAlarmParameters `json:"cloudwatchAlarm,omitempty" tf:"cloudwatch_alarm,omitempty"`

	// +kubebuilder:validation:Optional
	CloudwatchMetric []CloudwatchMetricParameters `json:"cloudwatchMetric,omitempty" tf:"cloudwatch_metric,omitempty"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Optional
	Dynamodb []DynamodbParameters `json:"dynamodb,omitempty" tf:"dynamodb,omitempty"`

	// +kubebuilder:validation:Optional
	Dynamodbv2 []Dynamodbv2Parameters `json:"dynamodbv2,omitempty" tf:"dynamodbv2,omitempty"`

	// +kubebuilder:validation:Optional
	Elasticsearch []ElasticsearchParameters `json:"elasticsearch,omitempty" tf:"elasticsearch,omitempty"`

	// +kubebuilder:validation:Required
	Enabled *bool `json:"enabled" tf:"enabled,omitempty"`

	// +kubebuilder:validation:Optional
	ErrorAction []ErrorActionParameters `json:"errorAction,omitempty" tf:"error_action,omitempty"`

	// +kubebuilder:validation:Optional
	Firehose []TopicRuleFirehoseParameters `json:"firehose,omitempty" tf:"firehose,omitempty"`

	// +kubebuilder:validation:Optional
	IotAnalytics []TopicRuleIotAnalyticsParameters `json:"iotAnalytics,omitempty" tf:"iot_analytics,omitempty"`

	// +kubebuilder:validation:Optional
	IotEvents []TopicRuleIotEventsParameters `json:"iotEvents,omitempty" tf:"iot_events,omitempty"`

	// +kubebuilder:validation:Optional
	Kinesis []TopicRuleKinesisParameters `json:"kinesis,omitempty" tf:"kinesis,omitempty"`

	// +kubebuilder:validation:Optional
	Lambda []TopicRuleLambdaParameters `json:"lambda,omitempty" tf:"lambda,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +terrajet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`

	// +kubebuilder:validation:Optional
	Republish []TopicRuleRepublishParameters `json:"republish,omitempty" tf:"republish,omitempty"`

	// +kubebuilder:validation:Optional
	S3 []TopicRuleS3Parameters `json:"s3,omitempty" tf:"s3,omitempty"`

	// +kubebuilder:validation:Required
	SQL *string `json:"sql" tf:"sql,omitempty"`

	// +kubebuilder:validation:Required
	SQLVersion *string `json:"sqlVersion" tf:"sql_version,omitempty"`

	// +kubebuilder:validation:Optional
	Sns []TopicRuleSnsParameters `json:"sns,omitempty" tf:"sns,omitempty"`

	// +kubebuilder:validation:Optional
	Sqs []TopicRuleSqsParameters `json:"sqs,omitempty" tf:"sqs,omitempty"`

	// +kubebuilder:validation:Optional
	StepFunctions []TopicRuleStepFunctionsParameters `json:"stepFunctions,omitempty" tf:"step_functions,omitempty"`

	// +kubebuilder:validation:Optional
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

type TopicRuleRepublishObservation struct {
}

type TopicRuleRepublishParameters struct {

	// +kubebuilder:validation:Optional
	Qos *int64 `json:"qos,omitempty" tf:"qos,omitempty"`

	// +kubebuilder:validation:Required
	RoleArn *string `json:"roleArn" tf:"role_arn,omitempty"`

	// +kubebuilder:validation:Required
	Topic *string `json:"topic" tf:"topic,omitempty"`
}

type TopicRuleS3Observation struct {
}

type TopicRuleS3Parameters struct {

	// +kubebuilder:validation:Required
	BucketName *string `json:"bucketName" tf:"bucket_name,omitempty"`

	// +kubebuilder:validation:Required
	Key *string `json:"key" tf:"key,omitempty"`

	// +kubebuilder:validation:Required
	RoleArn *string `json:"roleArn" tf:"role_arn,omitempty"`
}

type TopicRuleSnsObservation struct {
}

type TopicRuleSnsParameters struct {

	// +kubebuilder:validation:Optional
	MessageFormat *string `json:"messageFormat,omitempty" tf:"message_format,omitempty"`

	// +kubebuilder:validation:Required
	RoleArn *string `json:"roleArn" tf:"role_arn,omitempty"`

	// +kubebuilder:validation:Required
	TargetArn *string `json:"targetArn" tf:"target_arn,omitempty"`
}

type TopicRuleSqsObservation struct {
}

type TopicRuleSqsParameters struct {

	// +kubebuilder:validation:Required
	QueueURL *string `json:"queueUrl" tf:"queue_url,omitempty"`

	// +kubebuilder:validation:Required
	RoleArn *string `json:"roleArn" tf:"role_arn,omitempty"`

	// +kubebuilder:validation:Required
	UseBase64 *bool `json:"useBase64" tf:"use_base64,omitempty"`
}

type TopicRuleStepFunctionsObservation struct {
}

type TopicRuleStepFunctionsParameters struct {

	// +kubebuilder:validation:Optional
	ExecutionNamePrefix *string `json:"executionNamePrefix,omitempty" tf:"execution_name_prefix,omitempty"`

	// +kubebuilder:validation:Required
	RoleArn *string `json:"roleArn" tf:"role_arn,omitempty"`

	// +kubebuilder:validation:Required
	StateMachineName *string `json:"stateMachineName" tf:"state_machine_name,omitempty"`
}

// TopicRuleSpec defines the desired state of TopicRule
type TopicRuleSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     TopicRuleParameters `json:"forProvider"`
}

// TopicRuleStatus defines the observed state of TopicRule.
type TopicRuleStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        TopicRuleObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// TopicRule is the Schema for the TopicRules API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tfaws}
type TopicRule struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              TopicRuleSpec   `json:"spec"`
	Status            TopicRuleStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// TopicRuleList contains a list of TopicRules
type TopicRuleList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []TopicRule `json:"items"`
}

// Repository type metadata.
var (
	TopicRuleKind             = "TopicRule"
	TopicRuleGroupKind        = schema.GroupKind{Group: Group, Kind: TopicRuleKind}.String()
	TopicRuleKindAPIVersion   = TopicRuleKind + "." + GroupVersion.String()
	TopicRuleGroupVersionKind = GroupVersion.WithKind(TopicRuleKind)
)

func init() {
	SchemeBuilder.Register(&TopicRule{}, &TopicRuleList{})
}
