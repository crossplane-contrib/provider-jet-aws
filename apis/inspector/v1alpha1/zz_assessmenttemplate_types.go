/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AssessmentTemplateObservation struct {
	Arn *string `json:"arn,omitempty" tf:"arn,omitempty"`

	TagsAll map[string]*string `json:"tagsAll,omitempty" tf:"tags_all,omitempty"`
}

type AssessmentTemplateParameters struct {

	// +kubebuilder:validation:Required
	Duration *int64 `json:"duration" tf:"duration,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +terrajet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`

	// +kubebuilder:validation:Required
	RulesPackageArns []*string `json:"rulesPackageArns" tf:"rules_package_arns,omitempty"`

	// +kubebuilder:validation:Optional
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// +kubebuilder:validation:Required
	TargetArn *string `json:"targetArn" tf:"target_arn,omitempty"`
}

// AssessmentTemplateSpec defines the desired state of AssessmentTemplate
type AssessmentTemplateSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     AssessmentTemplateParameters `json:"forProvider"`
}

// AssessmentTemplateStatus defines the observed state of AssessmentTemplate.
type AssessmentTemplateStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        AssessmentTemplateObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// AssessmentTemplate is the Schema for the AssessmentTemplates API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tfaws}
type AssessmentTemplate struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              AssessmentTemplateSpec   `json:"spec"`
	Status            AssessmentTemplateStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// AssessmentTemplateList contains a list of AssessmentTemplates
type AssessmentTemplateList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []AssessmentTemplate `json:"items"`
}

// Repository type metadata.
var (
	AssessmentTemplateKind             = "AssessmentTemplate"
	AssessmentTemplateGroupKind        = schema.GroupKind{Group: Group, Kind: AssessmentTemplateKind}.String()
	AssessmentTemplateKindAPIVersion   = AssessmentTemplateKind + "." + GroupVersion.String()
	AssessmentTemplateGroupVersionKind = GroupVersion.WithKind(AssessmentTemplateKind)
)

func init() {
	SchemeBuilder.Register(&AssessmentTemplate{}, &AssessmentTemplateList{})
}
