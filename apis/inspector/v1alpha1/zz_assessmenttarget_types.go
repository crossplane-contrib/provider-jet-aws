/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AssessmentTargetObservation struct {
	Arn *string `json:"arn,omitempty" tf:"arn,omitempty"`
}

type AssessmentTargetParameters struct {

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +terrajet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`

	// +kubebuilder:validation:Optional
	ResourceGroupArn *string `json:"resourceGroupArn,omitempty" tf:"resource_group_arn,omitempty"`
}

// AssessmentTargetSpec defines the desired state of AssessmentTarget
type AssessmentTargetSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     AssessmentTargetParameters `json:"forProvider"`
}

// AssessmentTargetStatus defines the observed state of AssessmentTarget.
type AssessmentTargetStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        AssessmentTargetObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// AssessmentTarget is the Schema for the AssessmentTargets API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tfaws}
type AssessmentTarget struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              AssessmentTargetSpec   `json:"spec"`
	Status            AssessmentTargetStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// AssessmentTargetList contains a list of AssessmentTargets
type AssessmentTargetList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []AssessmentTarget `json:"items"`
}

// Repository type metadata.
var (
	AssessmentTargetKind             = "AssessmentTarget"
	AssessmentTargetGroupKind        = schema.GroupKind{Group: Group, Kind: AssessmentTargetKind}.String()
	AssessmentTargetKindAPIVersion   = AssessmentTargetKind + "." + GroupVersion.String()
	AssessmentTargetGroupVersionKind = GroupVersion.WithKind(AssessmentTargetKind)
)

func init() {
	SchemeBuilder.Register(&AssessmentTarget{}, &AssessmentTargetList{})
}
