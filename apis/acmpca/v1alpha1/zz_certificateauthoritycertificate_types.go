/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type CertificateAuthorityCertificateObservation struct {
}

type CertificateAuthorityCertificateParameters struct {

	// +kubebuilder:validation:Required
	Certificate *string `json:"certificate" tf:"certificate,omitempty"`

	// +kubebuilder:validation:Required
	CertificateAuthorityArn *string `json:"certificateAuthorityArn" tf:"certificate_authority_arn,omitempty"`

	// +kubebuilder:validation:Optional
	CertificateChain *string `json:"certificateChain,omitempty" tf:"certificate_chain,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +terrajet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`
}

// CertificateAuthorityCertificateSpec defines the desired state of CertificateAuthorityCertificate
type CertificateAuthorityCertificateSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     CertificateAuthorityCertificateParameters `json:"forProvider"`
}

// CertificateAuthorityCertificateStatus defines the observed state of CertificateAuthorityCertificate.
type CertificateAuthorityCertificateStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        CertificateAuthorityCertificateObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// CertificateAuthorityCertificate is the Schema for the CertificateAuthorityCertificates API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tfaws}
type CertificateAuthorityCertificate struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              CertificateAuthorityCertificateSpec   `json:"spec"`
	Status            CertificateAuthorityCertificateStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// CertificateAuthorityCertificateList contains a list of CertificateAuthorityCertificates
type CertificateAuthorityCertificateList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []CertificateAuthorityCertificate `json:"items"`
}

// Repository type metadata.
var (
	CertificateAuthorityCertificateKind             = "CertificateAuthorityCertificate"
	CertificateAuthorityCertificateGroupKind        = schema.GroupKind{Group: Group, Kind: CertificateAuthorityCertificateKind}.String()
	CertificateAuthorityCertificateKindAPIVersion   = CertificateAuthorityCertificateKind + "." + GroupVersion.String()
	CertificateAuthorityCertificateGroupVersionKind = GroupVersion.WithKind(CertificateAuthorityCertificateKind)
)

func init() {
	SchemeBuilder.Register(&CertificateAuthorityCertificate{}, &CertificateAuthorityCertificateList{})
}
