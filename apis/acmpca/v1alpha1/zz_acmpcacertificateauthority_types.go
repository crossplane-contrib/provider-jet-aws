/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type AcmpcaCertificateAuthorityObservation struct {
	ARN string `json:"arn" tf:"arn"`

	Certificate string `json:"certificate" tf:"certificate"`

	CertificateChain string `json:"certificateChain" tf:"certificate_chain"`

	CertificateSigningRequest string `json:"certificateSigningRequest" tf:"certificate_signing_request"`

	NotAfter string `json:"notAfter" tf:"not_after"`

	NotBefore string `json:"notBefore" tf:"not_before"`

	Serial string `json:"serial" tf:"serial"`

	Status string `json:"status" tf:"status"`
}

type AcmpcaCertificateAuthorityParameters struct {
	CertificateAuthorityConfiguration []CertificateAuthorityConfigurationParameters `json:"certificateAuthorityConfiguration" tf:"certificate_authority_configuration"`

	Enabled *bool `json:"enabled,omitempty" tf:"enabled"`

	PermanentDeletionTimeInDays *int64 `json:"permanentDeletionTimeInDays,omitempty" tf:"permanent_deletion_time_in_days"`

	RevocationConfiguration []RevocationConfigurationParameters `json:"revocationConfiguration,omitempty" tf:"revocation_configuration"`

	Tags map[string]string `json:"tags,omitempty" tf:"tags"`

	TagsAll map[string]string `json:"tagsAll,omitempty" tf:"tags_all"`

	Type *string `json:"type,omitempty" tf:"type"`
}

type CertificateAuthorityConfigurationObservation struct {
}

type CertificateAuthorityConfigurationParameters struct {
	KeyAlgorithm string `json:"keyAlgorithm" tf:"key_algorithm"`

	SigningAlgorithm string `json:"signingAlgorithm" tf:"signing_algorithm"`

	Subject []SubjectParameters `json:"subject" tf:"subject"`
}

type CrlConfigurationObservation struct {
}

type CrlConfigurationParameters struct {
	CustomCname *string `json:"customCname,omitempty" tf:"custom_cname"`

	Enabled *bool `json:"enabled,omitempty" tf:"enabled"`

	ExpirationInDays int64 `json:"expirationInDays" tf:"expiration_in_days"`

	S3BucketName *string `json:"s3BucketName,omitempty" tf:"s3_bucket_name"`

	S3ObjectACL *string `json:"s3ObjectACL,omitempty" tf:"s3_object_acl"`
}

type RevocationConfigurationObservation struct {
}

type RevocationConfigurationParameters struct {
	CrlConfiguration []CrlConfigurationParameters `json:"crlConfiguration,omitempty" tf:"crl_configuration"`
}

type SubjectObservation struct {
}

type SubjectParameters struct {
	CommonName *string `json:"commonName,omitempty" tf:"common_name"`

	Country *string `json:"country,omitempty" tf:"country"`

	DistinguishedNameQualifier *string `json:"distinguishedNameQualifier,omitempty" tf:"distinguished_name_qualifier"`

	GenerationQualifier *string `json:"generationQualifier,omitempty" tf:"generation_qualifier"`

	GivenName *string `json:"givenName,omitempty" tf:"given_name"`

	Initials *string `json:"initials,omitempty" tf:"initials"`

	Locality *string `json:"locality,omitempty" tf:"locality"`

	Organization *string `json:"organization,omitempty" tf:"organization"`

	OrganizationalUnit *string `json:"organizationalUnit,omitempty" tf:"organizational_unit"`

	Pseudonym *string `json:"pseudonym,omitempty" tf:"pseudonym"`

	State *string `json:"state,omitempty" tf:"state"`

	Surname *string `json:"surname,omitempty" tf:"surname"`

	Title *string `json:"title,omitempty" tf:"title"`
}

// AcmpcaCertificateAuthoritySpec defines the desired state of AcmpcaCertificateAuthority
type AcmpcaCertificateAuthoritySpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       AcmpcaCertificateAuthorityParameters `json:"forProvider"`
}

// AcmpcaCertificateAuthorityStatus defines the observed state of AcmpcaCertificateAuthority.
type AcmpcaCertificateAuthorityStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          AcmpcaCertificateAuthorityObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// AcmpcaCertificateAuthority is the Schema for the AcmpcaCertificateAuthoritys API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tfaws}
type AcmpcaCertificateAuthority struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              AcmpcaCertificateAuthoritySpec   `json:"spec"`
	Status            AcmpcaCertificateAuthorityStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// AcmpcaCertificateAuthorityList contains a list of AcmpcaCertificateAuthoritys
type AcmpcaCertificateAuthorityList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []AcmpcaCertificateAuthority `json:"items"`
}

// Repository type metadata.
var (
	AcmpcaCertificateAuthorityKind             = "AcmpcaCertificateAuthority"
	AcmpcaCertificateAuthorityGroupKind        = schema.GroupKind{Group: Group, Kind: AcmpcaCertificateAuthorityKind}.String()
	AcmpcaCertificateAuthorityKindAPIVersion   = AcmpcaCertificateAuthorityKind + "." + GroupVersion.String()
	AcmpcaCertificateAuthorityGroupVersionKind = GroupVersion.WithKind(AcmpcaCertificateAuthorityKind)
)

func init() {
	SchemeBuilder.Register(&AcmpcaCertificateAuthority{}, &AcmpcaCertificateAuthorityList{})
}
