/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type CertificateObservation struct {
	Arn *string `json:"arn,omitempty" tf:"arn,omitempty"`

	Certificate *string `json:"certificate,omitempty" tf:"certificate,omitempty"`

	CertificateChain *string `json:"certificateChain,omitempty" tf:"certificate_chain,omitempty"`
}

type CertificateParameters struct {

	// +kubebuilder:validation:Required
	CertificateAuthorityArn *string `json:"certificateAuthorityArn" tf:"certificate_authority_arn,omitempty"`

	// +kubebuilder:validation:Required
	CertificateSigningRequest *string `json:"certificateSigningRequest" tf:"certificate_signing_request,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +terrajet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`

	// +kubebuilder:validation:Required
	SigningAlgorithm *string `json:"signingAlgorithm" tf:"signing_algorithm,omitempty"`

	// +kubebuilder:validation:Optional
	TemplateArn *string `json:"templateArn,omitempty" tf:"template_arn,omitempty"`

	// +kubebuilder:validation:Required
	Validity []ValidityParameters `json:"validity" tf:"validity,omitempty"`
}

type ValidityObservation struct {
}

type ValidityParameters struct {

	// +kubebuilder:validation:Required
	Type *string `json:"type" tf:"type,omitempty"`

	// +kubebuilder:validation:Required
	Value *string `json:"value" tf:"value,omitempty"`
}

// CertificateSpec defines the desired state of Certificate
type CertificateSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     CertificateParameters `json:"forProvider"`
}

// CertificateStatus defines the observed state of Certificate.
type CertificateStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        CertificateObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Certificate is the Schema for the Certificates API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tfaws}
type Certificate struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              CertificateSpec   `json:"spec"`
	Status            CertificateStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// CertificateList contains a list of Certificates
type CertificateList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Certificate `json:"items"`
}

// Repository type metadata.
var (
	CertificateKind             = "Certificate"
	CertificateGroupKind        = schema.GroupKind{Group: Group, Kind: CertificateKind}.String()
	CertificateKindAPIVersion   = CertificateKind + "." + GroupVersion.String()
	CertificateGroupVersionKind = GroupVersion.WithKind(CertificateKind)
)

func init() {
	SchemeBuilder.Register(&Certificate{}, &CertificateList{})
}
