/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

// +kubebuilder:object:generate=true
// +groupName=launch.aws.tf.crossplane.io
// +versionName=v1alpha1

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1alpha1 "github.com/crossplane-contrib/provider-tf-aws/apis/launch/v1alpha1"
)

type EbsBlockDeviceObservation struct {
}

type EbsBlockDeviceParameters struct {
	DeleteOnTermination *bool `json:"deleteOnTermination,omitempty" tf:"delete_on_termination"`

	DeviceName string `json:"deviceName" tf:"device_name"`

	Encrypted *bool `json:"encrypted,omitempty" tf:"encrypted"`

	Iops *int64 `json:"iops,omitempty" tf:"iops"`

	NoDevice *bool `json:"noDevice,omitempty" tf:"no_device"`

	SnapshotId *string `json:"snapshotId,omitempty" tf:"snapshot_id"`

	Throughput *int64 `json:"throughput,omitempty" tf:"throughput"`

	VolumeSize *int64 `json:"volumeSize,omitempty" tf:"volume_size"`

	VolumeType *string `json:"volumeType,omitempty" tf:"volume_type"`
}

type EphemeralBlockDeviceObservation struct {
}

type EphemeralBlockDeviceParameters struct {
	DeviceName string `json:"deviceName" tf:"device_name"`

	VirtualName string `json:"virtualName" tf:"virtual_name"`
}

type LaunchConfigurationObservation struct {
	Arn string `json:"arn" tf:"arn"`
}

type LaunchConfigurationParameters struct {
	AssociatePublicIpAddress *bool `json:"associatePublicIpAddress,omitempty" tf:"associate_public_ip_address"`

	EbsBlockDevice []EbsBlockDeviceParameters `json:"ebsBlockDevice,omitempty" tf:"ebs_block_device"`

	EbsOptimized *bool `json:"ebsOptimized,omitempty" tf:"ebs_optimized"`

	EnableMonitoring *bool `json:"enableMonitoring,omitempty" tf:"enable_monitoring"`

	EphemeralBlockDevice []EphemeralBlockDeviceParameters `json:"ephemeralBlockDevice,omitempty" tf:"ephemeral_block_device"`

	IamInstanceProfile *string `json:"iamInstanceProfile,omitempty" tf:"iam_instance_profile"`

	ImageId string `json:"imageId" tf:"image_id"`

	InstanceType string `json:"instanceType" tf:"instance_type"`

	KeyName *string `json:"keyName,omitempty" tf:"key_name"`

	MetadataOptions []MetadataOptionsParameters `json:"metadataOptions,omitempty" tf:"metadata_options"`

	Name *string `json:"name,omitempty" tf:"name"`

	NamePrefix *string `json:"namePrefix,omitempty" tf:"name_prefix"`

	PlacementTenancy *string `json:"placementTenancy,omitempty" tf:"placement_tenancy"`

	RootBlockDevice []RootBlockDeviceParameters `json:"rootBlockDevice,omitempty" tf:"root_block_device"`

	SecurityGroups []string `json:"securityGroups,omitempty" tf:"security_groups"`

	SpotPrice *string `json:"spotPrice,omitempty" tf:"spot_price"`

	UserData *string `json:"userData,omitempty" tf:"user_data"`

	UserDataBase64 *string `json:"userDataBase64,omitempty" tf:"user_data_base64"`

	VpcClassicLinkId *string `json:"vpcClassicLinkId,omitempty" tf:"vpc_classic_link_id"`

	VpcClassicLinkSecurityGroups []string `json:"vpcClassicLinkSecurityGroups,omitempty" tf:"vpc_classic_link_security_groups"`
}

type MetadataOptionsObservation struct {
}

type MetadataOptionsParameters struct {
	HttpEndpoint *string `json:"httpEndpoint,omitempty" tf:"http_endpoint"`

	HttpPutResponseHopLimit *int64 `json:"httpPutResponseHopLimit,omitempty" tf:"http_put_response_hop_limit"`

	HttpTokens *string `json:"httpTokens,omitempty" tf:"http_tokens"`
}

type RootBlockDeviceObservation struct {
}

type RootBlockDeviceParameters struct {
	DeleteOnTermination *bool `json:"deleteOnTermination,omitempty" tf:"delete_on_termination"`

	Encrypted *bool `json:"encrypted,omitempty" tf:"encrypted"`

	Iops *int64 `json:"iops,omitempty" tf:"iops"`

	Throughput *int64 `json:"throughput,omitempty" tf:"throughput"`

	VolumeSize *int64 `json:"volumeSize,omitempty" tf:"volume_size"`

	VolumeType *string `json:"volumeType,omitempty" tf:"volume_type"`
}

// LaunchConfigurationSpec defines the desired state of LaunchConfiguration
type LaunchConfigurationSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       LaunchConfigurationParameters `json:"forProvider"`
}

// LaunchConfigurationStatus defines the observed state of LaunchConfiguration.
type LaunchConfigurationStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          LaunchConfigurationObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// LaunchConfiguration is the Schema for the LaunchConfigurations API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type LaunchConfiguration struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              LaunchConfigurationSpec   `json:"spec"`
	Status            LaunchConfigurationStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// LaunchConfigurationList contains a list of LaunchConfigurations
type LaunchConfigurationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []LaunchConfiguration `json:"items"`
}

// Repository type metadata.
var (
	LaunchConfigurationKind             = "LaunchConfiguration"
	LaunchConfigurationGroupKind        = schema.GroupKind{Group: v1alpha1.Group, Kind: LaunchConfigurationKind}.String()
	LaunchConfigurationKindAPIVersion   = LaunchConfigurationKind + "." + v1alpha1.GroupVersion.String()
	LaunchConfigurationGroupVersionKind = v1alpha1.GroupVersion.WithKind(LaunchConfigurationKind)
)

func init() {
	v1alpha1.SchemeBuilder.Register(&LaunchConfiguration{}, &LaunchConfigurationList{})
}
