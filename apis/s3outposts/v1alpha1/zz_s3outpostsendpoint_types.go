/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type NetworkInterfacesObservation struct {
	NetworkInterfaceID string `json:"networkInterfaceID" tf:"network_interface_id"`
}

type NetworkInterfacesParameters struct {
}

type S3OutpostsEndpointObservation struct {
	ARN string `json:"arn" tf:"arn"`

	CidrBlock string `json:"cidrBlock" tf:"cidr_block"`

	CreationTime string `json:"creationTime" tf:"creation_time"`

	NetworkInterfaces []NetworkInterfacesObservation `json:"networkInterfaces" tf:"network_interfaces"`
}

type S3OutpostsEndpointParameters struct {
	OutpostID string `json:"outpostID" tf:"outpost_id"`

	SecurityGroupID string `json:"securityGroupID" tf:"security_group_id"`

	SubnetID string `json:"subnetID" tf:"subnet_id"`
}

// S3OutpostsEndpointSpec defines the desired state of S3OutpostsEndpoint
type S3OutpostsEndpointSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       S3OutpostsEndpointParameters `json:"forProvider"`
}

// S3OutpostsEndpointStatus defines the observed state of S3OutpostsEndpoint.
type S3OutpostsEndpointStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          S3OutpostsEndpointObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// S3OutpostsEndpoint is the Schema for the S3OutpostsEndpoints API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tfaws}
type S3OutpostsEndpoint struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              S3OutpostsEndpointSpec   `json:"spec"`
	Status            S3OutpostsEndpointStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// S3OutpostsEndpointList contains a list of S3OutpostsEndpoints
type S3OutpostsEndpointList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []S3OutpostsEndpoint `json:"items"`
}

// Repository type metadata.
var (
	S3OutpostsEndpointKind             = "S3OutpostsEndpoint"
	S3OutpostsEndpointGroupKind        = schema.GroupKind{Group: Group, Kind: S3OutpostsEndpointKind}.String()
	S3OutpostsEndpointKindAPIVersion   = S3OutpostsEndpointKind + "." + GroupVersion.String()
	S3OutpostsEndpointGroupVersionKind = GroupVersion.WithKind(S3OutpostsEndpointKind)
)

func init() {
	SchemeBuilder.Register(&S3OutpostsEndpoint{}, &S3OutpostsEndpointList{})
}
