/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

// +kubebuilder:object:generate=true
// +groupName=acm.aws.tf.crossplane.io
// +versionName=v1alpha1

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1alpha1 "github.com/crossplane-contrib/provider-tf-aws/apis/acm/v1alpha1"
)

type AcmCertificateObservation struct {
	Arn string `json:"arn" tf:"arn"`

	DomainValidationOptions []DomainValidationOptionsObservation `json:"domainValidationOptions" tf:"domain_validation_options"`

	Status string `json:"status" tf:"status"`

	ValidationEmails []string `json:"validationEmails" tf:"validation_emails"`
}

type AcmCertificateParameters struct {
	CertificateAuthorityArn *string `json:"certificateAuthorityArn,omitempty" tf:"certificate_authority_arn"`

	CertificateBody *string `json:"certificateBody,omitempty" tf:"certificate_body"`

	CertificateChain *string `json:"certificateChain,omitempty" tf:"certificate_chain"`

	DomainName *string `json:"domainName,omitempty" tf:"domain_name"`

	Options []OptionsParameters `json:"options,omitempty" tf:"options"`

	PrivateKey *string `json:"privateKey,omitempty" tf:"private_key"`

	SubjectAlternativeNames []string `json:"subjectAlternativeNames,omitempty" tf:"subject_alternative_names"`

	Tags map[string]string `json:"tags,omitempty" tf:"tags"`

	TagsAll map[string]string `json:"tagsAll,omitempty" tf:"tags_all"`

	ValidationMethod *string `json:"validationMethod,omitempty" tf:"validation_method"`
}

type DomainValidationOptionsObservation struct {
	DomainName string `json:"domainName" tf:"domain_name"`

	ResourceRecordName string `json:"resourceRecordName" tf:"resource_record_name"`

	ResourceRecordType string `json:"resourceRecordType" tf:"resource_record_type"`

	ResourceRecordValue string `json:"resourceRecordValue" tf:"resource_record_value"`
}

type DomainValidationOptionsParameters struct {
}

type OptionsObservation struct {
}

type OptionsParameters struct {
	CertificateTransparencyLoggingPreference *string `json:"certificateTransparencyLoggingPreference,omitempty" tf:"certificate_transparency_logging_preference"`
}

// AcmCertificateSpec defines the desired state of AcmCertificate
type AcmCertificateSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       AcmCertificateParameters `json:"forProvider"`
}

// AcmCertificateStatus defines the observed state of AcmCertificate.
type AcmCertificateStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          AcmCertificateObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// AcmCertificate is the Schema for the AcmCertificates API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type AcmCertificate struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              AcmCertificateSpec   `json:"spec"`
	Status            AcmCertificateStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// AcmCertificateList contains a list of AcmCertificates
type AcmCertificateList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []AcmCertificate `json:"items"`
}

// Repository type metadata.
var (
	AcmCertificateKind             = "AcmCertificate"
	AcmCertificateGroupKind        = schema.GroupKind{Group: v1alpha1.Group, Kind: AcmCertificateKind}.String()
	AcmCertificateKindAPIVersion   = AcmCertificateKind + "." + v1alpha1.GroupVersion.String()
	AcmCertificateGroupVersionKind = v1alpha1.GroupVersion.WithKind(AcmCertificateKind)
)

func init() {
	v1alpha1.SchemeBuilder.Register(&AcmCertificate{}, &AcmCertificateList{})
}
