/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type SnsTopicObservation struct {
	ARN string `json:"arn" tf:"arn"`

	Owner string `json:"owner" tf:"owner"`
}

type SnsTopicParameters struct {
	ApplicationFailureFeedbackRoleARN *string `json:"applicationFailureFeedbackRoleARN,omitempty" tf:"application_failure_feedback_role_arn"`

	ApplicationSuccessFeedbackRoleARN *string `json:"applicationSuccessFeedbackRoleARN,omitempty" tf:"application_success_feedback_role_arn"`

	ApplicationSuccessFeedbackSampleRate *int64 `json:"applicationSuccessFeedbackSampleRate,omitempty" tf:"application_success_feedback_sample_rate"`

	ContentBasedDeduplication *bool `json:"contentBasedDeduplication,omitempty" tf:"content_based_deduplication"`

	DeliveryPolicy *string `json:"deliveryPolicy,omitempty" tf:"delivery_policy"`

	DisplayName *string `json:"displayName,omitempty" tf:"display_name"`

	FifoTopic *bool `json:"fifoTopic,omitempty" tf:"fifo_topic"`

	FirehoseFailureFeedbackRoleARN *string `json:"firehoseFailureFeedbackRoleARN,omitempty" tf:"firehose_failure_feedback_role_arn"`

	FirehoseSuccessFeedbackRoleARN *string `json:"firehoseSuccessFeedbackRoleARN,omitempty" tf:"firehose_success_feedback_role_arn"`

	FirehoseSuccessFeedbackSampleRate *int64 `json:"firehoseSuccessFeedbackSampleRate,omitempty" tf:"firehose_success_feedback_sample_rate"`

	HTTPFailureFeedbackRoleARN *string `json:"httpFailureFeedbackRoleARN,omitempty" tf:"http_failure_feedback_role_arn"`

	HTTPSuccessFeedbackRoleARN *string `json:"httpSuccessFeedbackRoleARN,omitempty" tf:"http_success_feedback_role_arn"`

	HTTPSuccessFeedbackSampleRate *int64 `json:"httpSuccessFeedbackSampleRate,omitempty" tf:"http_success_feedback_sample_rate"`

	KmsMasterKeyID *string `json:"kmsMasterKeyID,omitempty" tf:"kms_master_key_id"`

	LambdaFailureFeedbackRoleARN *string `json:"lambdaFailureFeedbackRoleARN,omitempty" tf:"lambda_failure_feedback_role_arn"`

	LambdaSuccessFeedbackRoleARN *string `json:"lambdaSuccessFeedbackRoleARN,omitempty" tf:"lambda_success_feedback_role_arn"`

	LambdaSuccessFeedbackSampleRate *int64 `json:"lambdaSuccessFeedbackSampleRate,omitempty" tf:"lambda_success_feedback_sample_rate"`

	Name *string `json:"name,omitempty" tf:"name"`

	NamePrefix *string `json:"namePrefix,omitempty" tf:"name_prefix"`

	Policy *string `json:"policy,omitempty" tf:"policy"`

	SqsFailureFeedbackRoleARN *string `json:"sqsFailureFeedbackRoleARN,omitempty" tf:"sqs_failure_feedback_role_arn"`

	SqsSuccessFeedbackRoleARN *string `json:"sqsSuccessFeedbackRoleARN,omitempty" tf:"sqs_success_feedback_role_arn"`

	SqsSuccessFeedbackSampleRate *int64 `json:"sqsSuccessFeedbackSampleRate,omitempty" tf:"sqs_success_feedback_sample_rate"`

	Tags map[string]string `json:"tags,omitempty" tf:"tags"`

	TagsAll map[string]string `json:"tagsAll,omitempty" tf:"tags_all"`
}

// SnsTopicSpec defines the desired state of SnsTopic
type SnsTopicSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       SnsTopicParameters `json:"forProvider"`
}

// SnsTopicStatus defines the observed state of SnsTopic.
type SnsTopicStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          SnsTopicObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// SnsTopic is the Schema for the SnsTopics API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tfaws}
type SnsTopic struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              SnsTopicSpec   `json:"spec"`
	Status            SnsTopicStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SnsTopicList contains a list of SnsTopics
type SnsTopicList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []SnsTopic `json:"items"`
}

// Repository type metadata.
var (
	SnsTopicKind             = "SnsTopic"
	SnsTopicGroupKind        = schema.GroupKind{Group: Group, Kind: SnsTopicKind}.String()
	SnsTopicKindAPIVersion   = SnsTopicKind + "." + GroupVersion.String()
	SnsTopicGroupVersionKind = GroupVersion.WithKind(SnsTopicKind)
)

func init() {
	SchemeBuilder.Register(&SnsTopic{}, &SnsTopicList{})
}
