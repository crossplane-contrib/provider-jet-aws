/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

// +kubebuilder:object:generate=true
// +groupName=sns.aws.tf.crossplane.io
// +versionName=v1alpha1

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1alpha1 "github.com/crossplane-contrib/provider-tf-aws/apis/sns/v1alpha1"
)

type SnsSmsPreferencesObservation struct {
}

type SnsSmsPreferencesParameters struct {
	DefaultSenderId *string `json:"defaultSenderId,omitempty" tf:"default_sender_id"`

	DefaultSmsType *string `json:"defaultSmsType,omitempty" tf:"default_sms_type"`

	DeliveryStatusIamRoleArn *string `json:"deliveryStatusIamRoleArn,omitempty" tf:"delivery_status_iam_role_arn"`

	DeliveryStatusSuccessSamplingRate *string `json:"deliveryStatusSuccessSamplingRate,omitempty" tf:"delivery_status_success_sampling_rate"`

	MonthlySpendLimit *string `json:"monthlySpendLimit,omitempty" tf:"monthly_spend_limit"`

	UsageReportS3Bucket *string `json:"usageReportS3Bucket,omitempty" tf:"usage_report_s3_bucket"`
}

// SnsSmsPreferencesSpec defines the desired state of SnsSmsPreferences
type SnsSmsPreferencesSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       SnsSmsPreferencesParameters `json:"forProvider"`
}

// SnsSmsPreferencesStatus defines the observed state of SnsSmsPreferences.
type SnsSmsPreferencesStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          SnsSmsPreferencesObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// SnsSmsPreferences is the Schema for the SnsSmsPreferencess API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type SnsSmsPreferences struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              SnsSmsPreferencesSpec   `json:"spec"`
	Status            SnsSmsPreferencesStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SnsSmsPreferencesList contains a list of SnsSmsPreferencess
type SnsSmsPreferencesList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []SnsSmsPreferences `json:"items"`
}

// Repository type metadata.
var (
	SnsSmsPreferencesKind             = "SnsSmsPreferences"
	SnsSmsPreferencesGroupKind        = schema.GroupKind{Group: v1alpha1.Group, Kind: SnsSmsPreferencesKind}.String()
	SnsSmsPreferencesKindAPIVersion   = SnsSmsPreferencesKind + "." + v1alpha1.GroupVersion.String()
	SnsSmsPreferencesGroupVersionKind = v1alpha1.GroupVersion.WithKind(SnsSmsPreferencesKind)
)

func init() {
	v1alpha1.SchemeBuilder.Register(&SnsSmsPreferences{}, &SnsSmsPreferencesList{})
}
