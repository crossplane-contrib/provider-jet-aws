/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

// +kubebuilder:object:generate=true
// +groupName=sns.aws.tf.crossplane.io
// +versionName=v1alpha1

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1alpha1 "github.com/crossplane-contrib/provider-tf-aws/apis/sns/v1alpha1"
)

type SnsTopicSubscriptionObservation struct {
	Arn string `json:"arn" tf:"arn"`

	ConfirmationWasAuthenticated bool `json:"confirmationWasAuthenticated" tf:"confirmation_was_authenticated"`

	OwnerId string `json:"ownerId" tf:"owner_id"`

	PendingConfirmation bool `json:"pendingConfirmation" tf:"pending_confirmation"`
}

type SnsTopicSubscriptionParameters struct {
	ConfirmationTimeoutInMinutes *int64 `json:"confirmationTimeoutInMinutes,omitempty" tf:"confirmation_timeout_in_minutes"`

	DeliveryPolicy *string `json:"deliveryPolicy,omitempty" tf:"delivery_policy"`

	Endpoint string `json:"endpoint" tf:"endpoint"`

	EndpointAutoConfirms *bool `json:"endpointAutoConfirms,omitempty" tf:"endpoint_auto_confirms"`

	FilterPolicy *string `json:"filterPolicy,omitempty" tf:"filter_policy"`

	Protocol string `json:"protocol" tf:"protocol"`

	RawMessageDelivery *bool `json:"rawMessageDelivery,omitempty" tf:"raw_message_delivery"`

	RedrivePolicy *string `json:"redrivePolicy,omitempty" tf:"redrive_policy"`

	SubscriptionRoleArn *string `json:"subscriptionRoleArn,omitempty" tf:"subscription_role_arn"`

	TopicArn string `json:"topicArn" tf:"topic_arn"`
}

// SnsTopicSubscriptionSpec defines the desired state of SnsTopicSubscription
type SnsTopicSubscriptionSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       SnsTopicSubscriptionParameters `json:"forProvider"`
}

// SnsTopicSubscriptionStatus defines the observed state of SnsTopicSubscription.
type SnsTopicSubscriptionStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          SnsTopicSubscriptionObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// SnsTopicSubscription is the Schema for the SnsTopicSubscriptions API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type SnsTopicSubscription struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              SnsTopicSubscriptionSpec   `json:"spec"`
	Status            SnsTopicSubscriptionStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SnsTopicSubscriptionList contains a list of SnsTopicSubscriptions
type SnsTopicSubscriptionList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []SnsTopicSubscription `json:"items"`
}

// Repository type metadata.
var (
	SnsTopicSubscriptionKind             = "SnsTopicSubscription"
	SnsTopicSubscriptionGroupKind        = schema.GroupKind{Group: v1alpha1.Group, Kind: SnsTopicSubscriptionKind}.String()
	SnsTopicSubscriptionKindAPIVersion   = SnsTopicSubscriptionKind + "." + v1alpha1.GroupVersion.String()
	SnsTopicSubscriptionGroupVersionKind = v1alpha1.GroupVersion.WithKind(SnsTopicSubscriptionKind)
)

func init() {
	v1alpha1.SchemeBuilder.Register(&SnsTopicSubscription{}, &SnsTopicSubscriptionList{})
}
