/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type VpcDhcpOptionsAssociationObservation struct {
}

type VpcDhcpOptionsAssociationParameters struct {
	DhcpOptionsID string `json:"dhcpOptionsID" tf:"dhcp_options_id"`

	VPCID string `json:"vpcID" tf:"vpc_id"`
}

// VpcDhcpOptionsAssociationSpec defines the desired state of VpcDhcpOptionsAssociation
type VpcDhcpOptionsAssociationSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       VpcDhcpOptionsAssociationParameters `json:"forProvider"`
}

// VpcDhcpOptionsAssociationStatus defines the observed state of VpcDhcpOptionsAssociation.
type VpcDhcpOptionsAssociationStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          VpcDhcpOptionsAssociationObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// VpcDhcpOptionsAssociation is the Schema for the VpcDhcpOptionsAssociations API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tfaws}
type VpcDhcpOptionsAssociation struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              VpcDhcpOptionsAssociationSpec   `json:"spec"`
	Status            VpcDhcpOptionsAssociationStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// VpcDhcpOptionsAssociationList contains a list of VpcDhcpOptionsAssociations
type VpcDhcpOptionsAssociationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []VpcDhcpOptionsAssociation `json:"items"`
}

// Repository type metadata.
var (
	VpcDhcpOptionsAssociationKind             = "VpcDhcpOptionsAssociation"
	VpcDhcpOptionsAssociationGroupKind        = schema.GroupKind{Group: Group, Kind: VpcDhcpOptionsAssociationKind}.String()
	VpcDhcpOptionsAssociationKindAPIVersion   = VpcDhcpOptionsAssociationKind + "." + GroupVersion.String()
	VpcDhcpOptionsAssociationGroupVersionKind = GroupVersion.WithKind(VpcDhcpOptionsAssociationKind)
)

func init() {
	SchemeBuilder.Register(&VpcDhcpOptionsAssociation{}, &VpcDhcpOptionsAssociationList{})
}
