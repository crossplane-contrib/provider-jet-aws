/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type VpcObservation struct {
	ARN string `json:"arn" tf:"arn"`

	DefaultNetworkACLID string `json:"defaultNetworkACLID" tf:"default_network_acl_id"`

	DefaultRouteTableID string `json:"defaultRouteTableID" tf:"default_route_table_id"`

	DefaultSecurityGroupID string `json:"defaultSecurityGroupID" tf:"default_security_group_id"`

	DhcpOptionsID string `json:"dhcpOptionsID" tf:"dhcp_options_id"`

	IPv6AssociationID string `json:"ipv6AssociationID" tf:"ipv6_association_id"`

	IPv6CidrBlock string `json:"ipv6CidrBlock" tf:"ipv6_cidr_block"`

	MainRouteTableID string `json:"mainRouteTableID" tf:"main_route_table_id"`

	OwnerID string `json:"ownerID" tf:"owner_id"`
}

type VpcParameters struct {
	AssignGeneratedIPv6CidrBlock *bool `json:"assignGeneratedIPv6CidrBlock,omitempty" tf:"assign_generated_ipv6_cidr_block"`

	CidrBlock string `json:"cidrBlock" tf:"cidr_block"`

	EnableClassiclink *bool `json:"enableClassiclink,omitempty" tf:"enable_classiclink"`

	EnableClassiclinkDNSSupport *bool `json:"enableClassiclinkDNSSupport,omitempty" tf:"enable_classiclink_dns_support"`

	EnableDNSHostnames *bool `json:"enableDNSHostnames,omitempty" tf:"enable_dns_hostnames"`

	EnableDNSSupport *bool `json:"enableDNSSupport,omitempty" tf:"enable_dns_support"`

	InstanceTenancy *string `json:"instanceTenancy,omitempty" tf:"instance_tenancy"`

	Tags map[string]string `json:"tags,omitempty" tf:"tags"`

	TagsAll map[string]string `json:"tagsAll,omitempty" tf:"tags_all"`
}

// VpcSpec defines the desired state of Vpc
type VpcSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       VpcParameters `json:"forProvider"`
}

// VpcStatus defines the observed state of Vpc.
type VpcStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          VpcObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Vpc is the Schema for the Vpcs API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tfaws}
type Vpc struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              VpcSpec   `json:"spec"`
	Status            VpcStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// VpcList contains a list of Vpcs
type VpcList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Vpc `json:"items"`
}

// Repository type metadata.
var (
	VpcKind             = "Vpc"
	VpcGroupKind        = schema.GroupKind{Group: Group, Kind: VpcKind}.String()
	VpcKindAPIVersion   = VpcKind + "." + GroupVersion.String()
	VpcGroupVersionKind = GroupVersion.WithKind(VpcKind)
)

func init() {
	SchemeBuilder.Register(&Vpc{}, &VpcList{})
}
