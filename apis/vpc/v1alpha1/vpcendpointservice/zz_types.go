/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

// +kubebuilder:object:generate=true
// +groupName=vpc.aws.tf.crossplane.io
// +versionName=v1alpha1

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1alpha1 "github.com/crossplane-contrib/provider-tf-aws/apis/vpc/v1alpha1"
)

type PrivateDnsNameConfigurationObservation struct {
	Name string `json:"name" tf:"name"`

	State string `json:"state" tf:"state"`

	Type string `json:"type" tf:"type"`

	Value string `json:"value" tf:"value"`
}

type PrivateDnsNameConfigurationParameters struct {
}

type VpcEndpointServiceObservation struct {
	Arn string `json:"arn" tf:"arn"`

	AvailabilityZones []string `json:"availabilityZones" tf:"availability_zones"`

	BaseEndpointDnsNames []string `json:"baseEndpointDnsNames" tf:"base_endpoint_dns_names"`

	ManagesVpcEndpoints bool `json:"managesVpcEndpoints" tf:"manages_vpc_endpoints"`

	PrivateDnsNameConfiguration []PrivateDnsNameConfigurationObservation `json:"privateDnsNameConfiguration" tf:"private_dns_name_configuration"`

	ServiceName string `json:"serviceName" tf:"service_name"`

	ServiceType string `json:"serviceType" tf:"service_type"`

	State string `json:"state" tf:"state"`
}

type VpcEndpointServiceParameters struct {
	AcceptanceRequired bool `json:"acceptanceRequired" tf:"acceptance_required"`

	AllowedPrincipals []string `json:"allowedPrincipals,omitempty" tf:"allowed_principals"`

	GatewayLoadBalancerArns []string `json:"gatewayLoadBalancerArns,omitempty" tf:"gateway_load_balancer_arns"`

	NetworkLoadBalancerArns []string `json:"networkLoadBalancerArns,omitempty" tf:"network_load_balancer_arns"`

	PrivateDnsName *string `json:"privateDnsName,omitempty" tf:"private_dns_name"`

	Tags map[string]string `json:"tags,omitempty" tf:"tags"`

	TagsAll map[string]string `json:"tagsAll,omitempty" tf:"tags_all"`
}

// VpcEndpointServiceSpec defines the desired state of VpcEndpointService
type VpcEndpointServiceSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       VpcEndpointServiceParameters `json:"forProvider"`
}

// VpcEndpointServiceStatus defines the observed state of VpcEndpointService.
type VpcEndpointServiceStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          VpcEndpointServiceObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// VpcEndpointService is the Schema for the VpcEndpointServices API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type VpcEndpointService struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              VpcEndpointServiceSpec   `json:"spec"`
	Status            VpcEndpointServiceStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// VpcEndpointServiceList contains a list of VpcEndpointServices
type VpcEndpointServiceList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []VpcEndpointService `json:"items"`
}

// Repository type metadata.
var (
	VpcEndpointServiceKind             = "VpcEndpointService"
	VpcEndpointServiceGroupKind        = schema.GroupKind{Group: v1alpha1.Group, Kind: VpcEndpointServiceKind}.String()
	VpcEndpointServiceKindAPIVersion   = VpcEndpointServiceKind + "." + v1alpha1.GroupVersion.String()
	VpcEndpointServiceGroupVersionKind = v1alpha1.GroupVersion.WithKind(VpcEndpointServiceKind)
)

func init() {
	v1alpha1.SchemeBuilder.Register(&VpcEndpointService{}, &VpcEndpointServiceList{})
}
