/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

// +kubebuilder:object:generate=true
// +groupName=vpc.aws.tf.crossplane.io
// +versionName=v1alpha1

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1alpha1 "github.com/crossplane-contrib/provider-tf-aws/apis/vpc/v1alpha1"
)

type AccepterObservation struct {
}

type AccepterParameters struct {
	AllowClassicLinkToRemoteVpc *bool `json:"allowClassicLinkToRemoteVpc,omitempty" tf:"allow_classic_link_to_remote_vpc"`

	AllowRemoteVpcDnsResolution *bool `json:"allowRemoteVpcDnsResolution,omitempty" tf:"allow_remote_vpc_dns_resolution"`

	AllowVpcToRemoteClassicLink *bool `json:"allowVpcToRemoteClassicLink,omitempty" tf:"allow_vpc_to_remote_classic_link"`
}

type RequesterObservation struct {
}

type RequesterParameters struct {
	AllowClassicLinkToRemoteVpc *bool `json:"allowClassicLinkToRemoteVpc,omitempty" tf:"allow_classic_link_to_remote_vpc"`

	AllowRemoteVpcDnsResolution *bool `json:"allowRemoteVpcDnsResolution,omitempty" tf:"allow_remote_vpc_dns_resolution"`

	AllowVpcToRemoteClassicLink *bool `json:"allowVpcToRemoteClassicLink,omitempty" tf:"allow_vpc_to_remote_classic_link"`
}

type VpcPeeringConnectionAccepterObservation struct {
	AcceptStatus string `json:"acceptStatus" tf:"accept_status"`

	PeerOwnerId string `json:"peerOwnerId" tf:"peer_owner_id"`

	PeerRegion string `json:"peerRegion" tf:"peer_region"`

	PeerVpcId string `json:"peerVpcId" tf:"peer_vpc_id"`

	VpcId string `json:"vpcId" tf:"vpc_id"`
}

type VpcPeeringConnectionAccepterParameters struct {
	Accepter []AccepterParameters `json:"accepter,omitempty" tf:"accepter"`

	AutoAccept *bool `json:"autoAccept,omitempty" tf:"auto_accept"`

	Requester []RequesterParameters `json:"requester,omitempty" tf:"requester"`

	Tags map[string]string `json:"tags,omitempty" tf:"tags"`

	TagsAll map[string]string `json:"tagsAll,omitempty" tf:"tags_all"`

	VpcPeeringConnectionId string `json:"vpcPeeringConnectionId" tf:"vpc_peering_connection_id"`
}

// VpcPeeringConnectionAccepterSpec defines the desired state of VpcPeeringConnectionAccepter
type VpcPeeringConnectionAccepterSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       VpcPeeringConnectionAccepterParameters `json:"forProvider"`
}

// VpcPeeringConnectionAccepterStatus defines the observed state of VpcPeeringConnectionAccepter.
type VpcPeeringConnectionAccepterStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          VpcPeeringConnectionAccepterObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// VpcPeeringConnectionAccepter is the Schema for the VpcPeeringConnectionAccepters API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type VpcPeeringConnectionAccepter struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              VpcPeeringConnectionAccepterSpec   `json:"spec"`
	Status            VpcPeeringConnectionAccepterStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// VpcPeeringConnectionAccepterList contains a list of VpcPeeringConnectionAccepters
type VpcPeeringConnectionAccepterList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []VpcPeeringConnectionAccepter `json:"items"`
}

// Repository type metadata.
var (
	VpcPeeringConnectionAccepterKind             = "VpcPeeringConnectionAccepter"
	VpcPeeringConnectionAccepterGroupKind        = schema.GroupKind{Group: v1alpha1.Group, Kind: VpcPeeringConnectionAccepterKind}.String()
	VpcPeeringConnectionAccepterKindAPIVersion   = VpcPeeringConnectionAccepterKind + "." + v1alpha1.GroupVersion.String()
	VpcPeeringConnectionAccepterGroupVersionKind = v1alpha1.GroupVersion.WithKind(VpcPeeringConnectionAccepterKind)
)

func init() {
	v1alpha1.SchemeBuilder.Register(&VpcPeeringConnectionAccepter{}, &VpcPeeringConnectionAccepterList{})
}
