/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ClassificationTypeObservation struct {
}

type ClassificationTypeParameters struct {

	// +kubebuilder:validation:Optional
	Continuous *string `json:"continuous,omitempty" tf:"continuous,omitempty"`

	// +kubebuilder:validation:Optional
	OneTime *string `json:"oneTime,omitempty" tf:"one_time,omitempty"`
}

type S3BucketAssociationObservation struct {
}

type S3BucketAssociationParameters struct {

	// +kubebuilder:validation:Required
	BucketName *string `json:"bucketName" tf:"bucket_name,omitempty"`

	// +kubebuilder:validation:Optional
	ClassificationType []ClassificationTypeParameters `json:"classificationType,omitempty" tf:"classification_type,omitempty"`

	// +kubebuilder:validation:Optional
	MemberAccountID *string `json:"memberAccountId,omitempty" tf:"member_account_id,omitempty"`

	// +kubebuilder:validation:Optional
	Prefix *string `json:"prefix,omitempty" tf:"prefix,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +terrajet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`
}

// S3BucketAssociationSpec defines the desired state of S3BucketAssociation
type S3BucketAssociationSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     S3BucketAssociationParameters `json:"forProvider"`
}

// S3BucketAssociationStatus defines the observed state of S3BucketAssociation.
type S3BucketAssociationStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        S3BucketAssociationObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// S3BucketAssociation is the Schema for the S3BucketAssociations API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tfaws}
type S3BucketAssociation struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              S3BucketAssociationSpec   `json:"spec"`
	Status            S3BucketAssociationStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// S3BucketAssociationList contains a list of S3BucketAssociations
type S3BucketAssociationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []S3BucketAssociation `json:"items"`
}

// Repository type metadata.
var (
	S3BucketAssociationKind             = "S3BucketAssociation"
	S3BucketAssociationGroupKind        = schema.GroupKind{Group: Group, Kind: S3BucketAssociationKind}.String()
	S3BucketAssociationKindAPIVersion   = S3BucketAssociationKind + "." + GroupVersion.String()
	S3BucketAssociationGroupVersionKind = GroupVersion.WithKind(S3BucketAssociationKind)
)

func init() {
	SchemeBuilder.Register(&S3BucketAssociation{}, &S3BucketAssociationList{})
}
