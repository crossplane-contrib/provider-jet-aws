/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

// +kubebuilder:object:generate=true
// +groupName=codebuild.aws.tf.crossplane.io
// +versionName=v1alpha1

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1alpha1 "github.com/crossplane-contrib/provider-tf-aws/apis/codebuild/v1alpha1"
)

type ArtifactsObservation struct {
}

type ArtifactsParameters struct {
	ArtifactIdentifier *string `json:"artifactIdentifier,omitempty" tf:"artifact_identifier"`

	EncryptionDisabled *bool `json:"encryptionDisabled,omitempty" tf:"encryption_disabled"`

	Location *string `json:"location,omitempty" tf:"location"`

	Name *string `json:"name,omitempty" tf:"name"`

	NamespaceType *string `json:"namespaceType,omitempty" tf:"namespace_type"`

	OverrideArtifactName *bool `json:"overrideArtifactName,omitempty" tf:"override_artifact_name"`

	Packaging *string `json:"packaging,omitempty" tf:"packaging"`

	Path *string `json:"path,omitempty" tf:"path"`

	Type string `json:"type" tf:"type"`
}

type AuthObservation struct {
}

type AuthParameters struct {
	Resource *string `json:"resource,omitempty" tf:"resource"`

	Type string `json:"type" tf:"type"`
}

type BuildBatchConfigObservation struct {
}

type BuildBatchConfigParameters struct {
	CombineArtifacts *bool `json:"combineArtifacts,omitempty" tf:"combine_artifacts"`

	Restrictions []RestrictionsParameters `json:"restrictions,omitempty" tf:"restrictions"`

	ServiceRole string `json:"serviceRole" tf:"service_role"`

	TimeoutInMins *int64 `json:"timeoutInMins,omitempty" tf:"timeout_in_mins"`
}

type BuildStatusConfigObservation struct {
}

type BuildStatusConfigParameters struct {
	Context *string `json:"context,omitempty" tf:"context"`

	TargetUrl *string `json:"targetUrl,omitempty" tf:"target_url"`
}

type CacheObservation struct {
}

type CacheParameters struct {
	Location *string `json:"location,omitempty" tf:"location"`

	Modes []string `json:"modes,omitempty" tf:"modes"`

	Type *string `json:"type,omitempty" tf:"type"`
}

type CloudwatchLogsObservation struct {
}

type CloudwatchLogsParameters struct {
	GroupName *string `json:"groupName,omitempty" tf:"group_name"`

	Status *string `json:"status,omitempty" tf:"status"`

	StreamName *string `json:"streamName,omitempty" tf:"stream_name"`
}

type CodebuildProjectObservation struct {
	Arn string `json:"arn" tf:"arn"`

	BadgeUrl string `json:"badgeUrl" tf:"badge_url"`
}

type CodebuildProjectParameters struct {
	Artifacts []ArtifactsParameters `json:"artifacts" tf:"artifacts"`

	BadgeEnabled *bool `json:"badgeEnabled,omitempty" tf:"badge_enabled"`

	BuildBatchConfig []BuildBatchConfigParameters `json:"buildBatchConfig,omitempty" tf:"build_batch_config"`

	BuildTimeout *int64 `json:"buildTimeout,omitempty" tf:"build_timeout"`

	Cache []CacheParameters `json:"cache,omitempty" tf:"cache"`

	ConcurrentBuildLimit *int64 `json:"concurrentBuildLimit,omitempty" tf:"concurrent_build_limit"`

	Description *string `json:"description,omitempty" tf:"description"`

	EncryptionKey *string `json:"encryptionKey,omitempty" tf:"encryption_key"`

	Environment []EnvironmentParameters `json:"environment" tf:"environment"`

	FileSystemLocations []FileSystemLocationsParameters `json:"fileSystemLocations,omitempty" tf:"file_system_locations"`

	LogsConfig []LogsConfigParameters `json:"logsConfig,omitempty" tf:"logs_config"`

	Name string `json:"name" tf:"name"`

	QueuedTimeout *int64 `json:"queuedTimeout,omitempty" tf:"queued_timeout"`

	SecondaryArtifacts []SecondaryArtifactsParameters `json:"secondaryArtifacts,omitempty" tf:"secondary_artifacts"`

	SecondarySources []SecondarySourcesParameters `json:"secondarySources,omitempty" tf:"secondary_sources"`

	ServiceRole string `json:"serviceRole" tf:"service_role"`

	Source []SourceParameters `json:"source" tf:"source"`

	SourceVersion *string `json:"sourceVersion,omitempty" tf:"source_version"`

	Tags map[string]string `json:"tags,omitempty" tf:"tags"`

	TagsAll map[string]string `json:"tagsAll,omitempty" tf:"tags_all"`

	VpcConfig []VpcConfigParameters `json:"vpcConfig,omitempty" tf:"vpc_config"`
}

type EnvironmentObservation struct {
}

type EnvironmentParameters struct {
	Certificate *string `json:"certificate,omitempty" tf:"certificate"`

	ComputeType string `json:"computeType" tf:"compute_type"`

	EnvironmentVariable []EnvironmentVariableParameters `json:"environmentVariable,omitempty" tf:"environment_variable"`

	Image string `json:"image" tf:"image"`

	ImagePullCredentialsType *string `json:"imagePullCredentialsType,omitempty" tf:"image_pull_credentials_type"`

	PrivilegedMode *bool `json:"privilegedMode,omitempty" tf:"privileged_mode"`

	RegistryCredential []RegistryCredentialParameters `json:"registryCredential,omitempty" tf:"registry_credential"`

	Type string `json:"type" tf:"type"`
}

type EnvironmentVariableObservation struct {
}

type EnvironmentVariableParameters struct {
	Name string `json:"name" tf:"name"`

	Type *string `json:"type,omitempty" tf:"type"`

	Value string `json:"value" tf:"value"`
}

type FileSystemLocationsObservation struct {
}

type FileSystemLocationsParameters struct {
	Identifier *string `json:"identifier,omitempty" tf:"identifier"`

	Location *string `json:"location,omitempty" tf:"location"`

	MountOptions *string `json:"mountOptions,omitempty" tf:"mount_options"`

	MountPoint *string `json:"mountPoint,omitempty" tf:"mount_point"`

	Type *string `json:"type,omitempty" tf:"type"`
}

type GitSubmodulesConfigObservation struct {
}

type GitSubmodulesConfigParameters struct {
	FetchSubmodules bool `json:"fetchSubmodules" tf:"fetch_submodules"`
}

type LogsConfigObservation struct {
}

type LogsConfigParameters struct {
	CloudwatchLogs []CloudwatchLogsParameters `json:"cloudwatchLogs,omitempty" tf:"cloudwatch_logs"`

	S3Logs []S3LogsParameters `json:"s3Logs,omitempty" tf:"s3_logs"`
}

type RegistryCredentialObservation struct {
}

type RegistryCredentialParameters struct {
	Credential string `json:"credential" tf:"credential"`

	CredentialProvider string `json:"credentialProvider" tf:"credential_provider"`
}

type RestrictionsObservation struct {
}

type RestrictionsParameters struct {
	ComputeTypesAllowed []string `json:"computeTypesAllowed,omitempty" tf:"compute_types_allowed"`

	MaximumBuildsAllowed *int64 `json:"maximumBuildsAllowed,omitempty" tf:"maximum_builds_allowed"`
}

type S3LogsObservation struct {
}

type S3LogsParameters struct {
	EncryptionDisabled *bool `json:"encryptionDisabled,omitempty" tf:"encryption_disabled"`

	Location *string `json:"location,omitempty" tf:"location"`

	Status *string `json:"status,omitempty" tf:"status"`
}

type SecondaryArtifactsObservation struct {
}

type SecondaryArtifactsParameters struct {
	ArtifactIdentifier string `json:"artifactIdentifier" tf:"artifact_identifier"`

	EncryptionDisabled *bool `json:"encryptionDisabled,omitempty" tf:"encryption_disabled"`

	Location *string `json:"location,omitempty" tf:"location"`

	Name *string `json:"name,omitempty" tf:"name"`

	NamespaceType *string `json:"namespaceType,omitempty" tf:"namespace_type"`

	OverrideArtifactName *bool `json:"overrideArtifactName,omitempty" tf:"override_artifact_name"`

	Packaging *string `json:"packaging,omitempty" tf:"packaging"`

	Path *string `json:"path,omitempty" tf:"path"`

	Type string `json:"type" tf:"type"`
}

type SecondarySourcesObservation struct {
}

type SecondarySourcesParameters struct {
	Auth []AuthParameters `json:"auth,omitempty" tf:"auth"`

	BuildStatusConfig []BuildStatusConfigParameters `json:"buildStatusConfig,omitempty" tf:"build_status_config"`

	Buildspec *string `json:"buildspec,omitempty" tf:"buildspec"`

	GitCloneDepth *int64 `json:"gitCloneDepth,omitempty" tf:"git_clone_depth"`

	GitSubmodulesConfig []GitSubmodulesConfigParameters `json:"gitSubmodulesConfig,omitempty" tf:"git_submodules_config"`

	InsecureSsl *bool `json:"insecureSsl,omitempty" tf:"insecure_ssl"`

	Location *string `json:"location,omitempty" tf:"location"`

	ReportBuildStatus *bool `json:"reportBuildStatus,omitempty" tf:"report_build_status"`

	SourceIdentifier string `json:"sourceIdentifier" tf:"source_identifier"`

	Type string `json:"type" tf:"type"`
}

type SourceObservation struct {
}

type SourceParameters struct {
	Auth []AuthParameters `json:"auth,omitempty" tf:"auth"`

	BuildStatusConfig []BuildStatusConfigParameters `json:"buildStatusConfig,omitempty" tf:"build_status_config"`

	Buildspec *string `json:"buildspec,omitempty" tf:"buildspec"`

	GitCloneDepth *int64 `json:"gitCloneDepth,omitempty" tf:"git_clone_depth"`

	GitSubmodulesConfig []GitSubmodulesConfigParameters `json:"gitSubmodulesConfig,omitempty" tf:"git_submodules_config"`

	InsecureSsl *bool `json:"insecureSsl,omitempty" tf:"insecure_ssl"`

	Location *string `json:"location,omitempty" tf:"location"`

	ReportBuildStatus *bool `json:"reportBuildStatus,omitempty" tf:"report_build_status"`

	Type string `json:"type" tf:"type"`
}

type VpcConfigObservation struct {
}

type VpcConfigParameters struct {
	SecurityGroupIds []string `json:"securityGroupIds" tf:"security_group_ids"`

	Subnets []string `json:"subnets" tf:"subnets"`

	VpcId string `json:"vpcId" tf:"vpc_id"`
}

// CodebuildProjectSpec defines the desired state of CodebuildProject
type CodebuildProjectSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       CodebuildProjectParameters `json:"forProvider"`
}

// CodebuildProjectStatus defines the observed state of CodebuildProject.
type CodebuildProjectStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          CodebuildProjectObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// CodebuildProject is the Schema for the CodebuildProjects API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type CodebuildProject struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              CodebuildProjectSpec   `json:"spec"`
	Status            CodebuildProjectStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// CodebuildProjectList contains a list of CodebuildProjects
type CodebuildProjectList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []CodebuildProject `json:"items"`
}

// Repository type metadata.
var (
	CodebuildProjectKind             = "CodebuildProject"
	CodebuildProjectGroupKind        = schema.GroupKind{Group: v1alpha1.Group, Kind: CodebuildProjectKind}.String()
	CodebuildProjectKindAPIVersion   = CodebuildProjectKind + "." + v1alpha1.GroupVersion.String()
	CodebuildProjectGroupVersionKind = v1alpha1.GroupVersion.WithKind(CodebuildProjectKind)
)

func init() {
	v1alpha1.SchemeBuilder.Register(&CodebuildProject{}, &CodebuildProjectList{})
}
