/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

// +kubebuilder:object:generate=true
// +groupName=lb.aws.tf.crossplane.io
// +versionName=v1alpha1

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1alpha1 "github.com/crossplane-contrib/provider-tf-aws/apis/lb/v1alpha1"
)

type HealthCheckObservation struct {
}

type HealthCheckParameters struct {
	Enabled *bool `json:"enabled,omitempty" tf:"enabled"`

	HealthyThreshold *int64 `json:"healthyThreshold,omitempty" tf:"healthy_threshold"`

	Interval *int64 `json:"interval,omitempty" tf:"interval"`

	Matcher *string `json:"matcher,omitempty" tf:"matcher"`

	Path *string `json:"path,omitempty" tf:"path"`

	Port *string `json:"port,omitempty" tf:"port"`

	Protocol *string `json:"protocol,omitempty" tf:"protocol"`

	Timeout *int64 `json:"timeout,omitempty" tf:"timeout"`

	UnhealthyThreshold *int64 `json:"unhealthyThreshold,omitempty" tf:"unhealthy_threshold"`
}

type LbTargetGroupObservation struct {
	Arn string `json:"arn" tf:"arn"`

	ArnSuffix string `json:"arnSuffix" tf:"arn_suffix"`
}

type LbTargetGroupParameters struct {
	DeregistrationDelay *int64 `json:"deregistrationDelay,omitempty" tf:"deregistration_delay"`

	HealthCheck []HealthCheckParameters `json:"healthCheck,omitempty" tf:"health_check"`

	LambdaMultiValueHeadersEnabled *bool `json:"lambdaMultiValueHeadersEnabled,omitempty" tf:"lambda_multi_value_headers_enabled"`

	LoadBalancingAlgorithmType *string `json:"loadBalancingAlgorithmType,omitempty" tf:"load_balancing_algorithm_type"`

	Name *string `json:"name,omitempty" tf:"name"`

	NamePrefix *string `json:"namePrefix,omitempty" tf:"name_prefix"`

	Port *int64 `json:"port,omitempty" tf:"port"`

	PreserveClientIp *string `json:"preserveClientIp,omitempty" tf:"preserve_client_ip"`

	Protocol *string `json:"protocol,omitempty" tf:"protocol"`

	ProtocolVersion *string `json:"protocolVersion,omitempty" tf:"protocol_version"`

	ProxyProtocolV2 *bool `json:"proxyProtocolV2,omitempty" tf:"proxy_protocol_v2"`

	SlowStart *int64 `json:"slowStart,omitempty" tf:"slow_start"`

	Stickiness []StickinessParameters `json:"stickiness,omitempty" tf:"stickiness"`

	Tags map[string]string `json:"tags,omitempty" tf:"tags"`

	TagsAll map[string]string `json:"tagsAll,omitempty" tf:"tags_all"`

	TargetType *string `json:"targetType,omitempty" tf:"target_type"`

	VpcId *string `json:"vpcId,omitempty" tf:"vpc_id"`
}

type StickinessObservation struct {
}

type StickinessParameters struct {
	CookieDuration *int64 `json:"cookieDuration,omitempty" tf:"cookie_duration"`

	CookieName *string `json:"cookieName,omitempty" tf:"cookie_name"`

	Enabled *bool `json:"enabled,omitempty" tf:"enabled"`

	Type string `json:"type" tf:"type"`
}

// LbTargetGroupSpec defines the desired state of LbTargetGroup
type LbTargetGroupSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       LbTargetGroupParameters `json:"forProvider"`
}

// LbTargetGroupStatus defines the observed state of LbTargetGroup.
type LbTargetGroupStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          LbTargetGroupObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// LbTargetGroup is the Schema for the LbTargetGroups API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type LbTargetGroup struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              LbTargetGroupSpec   `json:"spec"`
	Status            LbTargetGroupStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// LbTargetGroupList contains a list of LbTargetGroups
type LbTargetGroupList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []LbTargetGroup `json:"items"`
}

// Repository type metadata.
var (
	LbTargetGroupKind             = "LbTargetGroup"
	LbTargetGroupGroupKind        = schema.GroupKind{Group: v1alpha1.Group, Kind: LbTargetGroupKind}.String()
	LbTargetGroupKindAPIVersion   = LbTargetGroupKind + "." + v1alpha1.GroupVersion.String()
	LbTargetGroupGroupVersionKind = v1alpha1.GroupVersion.WithKind(LbTargetGroupKind)
)

func init() {
	v1alpha1.SchemeBuilder.Register(&LbTargetGroup{}, &LbTargetGroupList{})
}
