/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type AuthenticateCognitoObservation struct {
}

type AuthenticateCognitoParameters struct {
	AuthenticationRequestExtraParams map[string]string `json:"authenticationRequestExtraParams,omitempty" tf:"authentication_request_extra_params"`

	OnUnauthenticatedRequest *string `json:"onUnauthenticatedRequest,omitempty" tf:"on_unauthenticated_request"`

	Scope *string `json:"scope,omitempty" tf:"scope"`

	SessionCookieName *string `json:"sessionCookieName,omitempty" tf:"session_cookie_name"`

	SessionTimeout *int64 `json:"sessionTimeout,omitempty" tf:"session_timeout"`

	UserPoolARN string `json:"userPoolARN" tf:"user_pool_arn"`

	UserPoolClientID string `json:"userPoolClientID" tf:"user_pool_client_id"`

	UserPoolDomain string `json:"userPoolDomain" tf:"user_pool_domain"`
}

type AuthenticateOidcObservation struct {
}

type AuthenticateOidcParameters struct {
	AuthenticationRequestExtraParams map[string]string `json:"authenticationRequestExtraParams,omitempty" tf:"authentication_request_extra_params"`

	AuthorizationEndpoint string `json:"authorizationEndpoint" tf:"authorization_endpoint"`

	ClientID string `json:"clientID" tf:"client_id"`

	ClientSecret string `json:"clientSecret" tf:"client_secret"`

	Issuer string `json:"issuer" tf:"issuer"`

	OnUnauthenticatedRequest *string `json:"onUnauthenticatedRequest,omitempty" tf:"on_unauthenticated_request"`

	Scope *string `json:"scope,omitempty" tf:"scope"`

	SessionCookieName *string `json:"sessionCookieName,omitempty" tf:"session_cookie_name"`

	SessionTimeout *int64 `json:"sessionTimeout,omitempty" tf:"session_timeout"`

	TokenEndpoint string `json:"tokenEndpoint" tf:"token_endpoint"`

	UserInfoEndpoint string `json:"userInfoEndpoint" tf:"user_info_endpoint"`
}

type DefaultActionObservation struct {
}

type DefaultActionParameters struct {
	AuthenticateCognito []AuthenticateCognitoParameters `json:"authenticateCognito,omitempty" tf:"authenticate_cognito"`

	AuthenticateOidc []AuthenticateOidcParameters `json:"authenticateOidc,omitempty" tf:"authenticate_oidc"`

	FixedResponse []FixedResponseParameters `json:"fixedResponse,omitempty" tf:"fixed_response"`

	Forward []ForwardParameters `json:"forward,omitempty" tf:"forward"`

	Order *int64 `json:"order,omitempty" tf:"order"`

	Redirect []RedirectParameters `json:"redirect,omitempty" tf:"redirect"`

	TargetGroupARN *string `json:"targetGroupARN,omitempty" tf:"target_group_arn"`

	Type string `json:"type" tf:"type"`
}

type FixedResponseObservation struct {
}

type FixedResponseParameters struct {
	ContentType string `json:"contentType" tf:"content_type"`

	MessageBody *string `json:"messageBody,omitempty" tf:"message_body"`

	StatusCode *string `json:"statusCode,omitempty" tf:"status_code"`
}

type ForwardObservation struct {
}

type ForwardParameters struct {
	Stickiness []StickinessParameters `json:"stickiness,omitempty" tf:"stickiness"`

	TargetGroup []TargetGroupParameters `json:"targetGroup" tf:"target_group"`
}

type LbListenerObservation struct {
	ARN string `json:"arn" tf:"arn"`
}

type LbListenerParameters struct {
	AlpnPolicy *string `json:"alpnPolicy,omitempty" tf:"alpn_policy"`

	CertificateARN *string `json:"certificateARN,omitempty" tf:"certificate_arn"`

	DefaultAction []DefaultActionParameters `json:"defaultAction" tf:"default_action"`

	LoadBalancerARN string `json:"loadBalancerARN" tf:"load_balancer_arn"`

	Port *int64 `json:"port,omitempty" tf:"port"`

	Protocol *string `json:"protocol,omitempty" tf:"protocol"`

	SslPolicy *string `json:"sslPolicy,omitempty" tf:"ssl_policy"`

	Tags map[string]string `json:"tags,omitempty" tf:"tags"`

	TagsAll map[string]string `json:"tagsAll,omitempty" tf:"tags_all"`
}

type RedirectObservation struct {
}

type RedirectParameters struct {
	Host *string `json:"host,omitempty" tf:"host"`

	Path *string `json:"path,omitempty" tf:"path"`

	Port *string `json:"port,omitempty" tf:"port"`

	Protocol *string `json:"protocol,omitempty" tf:"protocol"`

	Query *string `json:"query,omitempty" tf:"query"`

	StatusCode string `json:"statusCode" tf:"status_code"`
}

type StickinessObservation struct {
}

type StickinessParameters struct {
	Duration int64 `json:"duration" tf:"duration"`

	Enabled *bool `json:"enabled,omitempty" tf:"enabled"`
}

type TargetGroupObservation struct {
}

type TargetGroupParameters struct {
	ARN string `json:"arn" tf:"arn"`

	Weight *int64 `json:"weight,omitempty" tf:"weight"`
}

// LbListenerSpec defines the desired state of LbListener
type LbListenerSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       LbListenerParameters `json:"forProvider"`
}

// LbListenerStatus defines the observed state of LbListener.
type LbListenerStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          LbListenerObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// LbListener is the Schema for the LbListeners API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tfaws}
type LbListener struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              LbListenerSpec   `json:"spec"`
	Status            LbListenerStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// LbListenerList contains a list of LbListeners
type LbListenerList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []LbListener `json:"items"`
}

// Repository type metadata.
var (
	LbListenerKind             = "LbListener"
	LbListenerGroupKind        = schema.GroupKind{Group: Group, Kind: LbListenerKind}.String()
	LbListenerKindAPIVersion   = LbListenerKind + "." + GroupVersion.String()
	LbListenerGroupVersionKind = GroupVersion.WithKind(LbListenerKind)
)

func init() {
	SchemeBuilder.Register(&LbListener{}, &LbListenerList{})
}
