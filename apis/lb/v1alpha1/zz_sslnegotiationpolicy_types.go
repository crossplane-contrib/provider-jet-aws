/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AttributeObservation struct {
}

type AttributeParameters struct {

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Required
	Value *string `json:"value" tf:"value,omitempty"`
}

type SslNegotiationPolicyObservation struct {
}

type SslNegotiationPolicyParameters struct {

	// +kubebuilder:validation:Optional
	Attribute []AttributeParameters `json:"attribute,omitempty" tf:"attribute,omitempty"`

	// +kubebuilder:validation:Required
	LbPort *int64 `json:"lbPort" tf:"lb_port,omitempty"`

	// +kubebuilder:validation:Required
	LoadBalancer *string `json:"loadBalancer" tf:"load_balancer,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +terrajet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`
}

// SslNegotiationPolicySpec defines the desired state of SslNegotiationPolicy
type SslNegotiationPolicySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     SslNegotiationPolicyParameters `json:"forProvider"`
}

// SslNegotiationPolicyStatus defines the observed state of SslNegotiationPolicy.
type SslNegotiationPolicyStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        SslNegotiationPolicyObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// SslNegotiationPolicy is the Schema for the SslNegotiationPolicys API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tfaws}
type SslNegotiationPolicy struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              SslNegotiationPolicySpec   `json:"spec"`
	Status            SslNegotiationPolicyStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SslNegotiationPolicyList contains a list of SslNegotiationPolicys
type SslNegotiationPolicyList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []SslNegotiationPolicy `json:"items"`
}

// Repository type metadata.
var (
	SslNegotiationPolicyKind             = "SslNegotiationPolicy"
	SslNegotiationPolicyGroupKind        = schema.GroupKind{Group: Group, Kind: SslNegotiationPolicyKind}.String()
	SslNegotiationPolicyKindAPIVersion   = SslNegotiationPolicyKind + "." + GroupVersion.String()
	SslNegotiationPolicyGroupVersionKind = GroupVersion.WithKind(SslNegotiationPolicyKind)
)

func init() {
	SchemeBuilder.Register(&SslNegotiationPolicy{}, &SslNegotiationPolicyList{})
}
