/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type AmiCopyEbsBlockDeviceObservation struct {
	DeleteOnTermination bool `json:"deleteOnTermination" tf:"delete_on_termination"`

	DeviceName string `json:"deviceName" tf:"device_name"`

	Encrypted bool `json:"encrypted" tf:"encrypted"`

	Iops int64 `json:"iops" tf:"iops"`

	SnapshotID string `json:"snapshotID" tf:"snapshot_id"`

	Throughput int64 `json:"throughput" tf:"throughput"`

	VolumeSize int64 `json:"volumeSize" tf:"volume_size"`

	VolumeType string `json:"volumeType" tf:"volume_type"`
}

type AmiCopyEbsBlockDeviceParameters struct {
}

type AmiCopyEphemeralBlockDeviceObservation struct {
	DeviceName string `json:"deviceName" tf:"device_name"`

	VirtualName string `json:"virtualName" tf:"virtual_name"`
}

type AmiCopyEphemeralBlockDeviceParameters struct {
}

type AmiCopyObservation struct {
	ARN string `json:"arn" tf:"arn"`

	Architecture string `json:"architecture" tf:"architecture"`

	EnaSupport bool `json:"enaSupport" tf:"ena_support"`

	Hypervisor string `json:"hypervisor" tf:"hypervisor"`

	ImageLocation string `json:"imageLocation" tf:"image_location"`

	ImageOwnerAlias string `json:"imageOwnerAlias" tf:"image_owner_alias"`

	ImageType string `json:"imageType" tf:"image_type"`

	KernelID string `json:"kernelID" tf:"kernel_id"`

	ManageEbsSnapshots bool `json:"manageEbsSnapshots" tf:"manage_ebs_snapshots"`

	OwnerID string `json:"ownerID" tf:"owner_id"`

	Platform string `json:"platform" tf:"platform"`

	PlatformDetails string `json:"platformDetails" tf:"platform_details"`

	Public bool `json:"public" tf:"public"`

	RamdiskID string `json:"ramdiskID" tf:"ramdisk_id"`

	RootDeviceName string `json:"rootDeviceName" tf:"root_device_name"`

	RootSnapshotID string `json:"rootSnapshotID" tf:"root_snapshot_id"`

	SriovNetSupport string `json:"sriovNetSupport" tf:"sriov_net_support"`

	UsageOperation string `json:"usageOperation" tf:"usage_operation"`

	VirtualizationType string `json:"virtualizationType" tf:"virtualization_type"`
}

type AmiCopyParameters struct {
	Description *string `json:"description,omitempty" tf:"description"`

	DestinationOutpostARN *string `json:"destinationOutpostARN,omitempty" tf:"destination_outpost_arn"`

	EbsBlockDevice []AmiCopyEbsBlockDeviceParameters `json:"ebsBlockDevice,omitempty" tf:"ebs_block_device"`

	Encrypted *bool `json:"encrypted,omitempty" tf:"encrypted"`

	EphemeralBlockDevice []AmiCopyEphemeralBlockDeviceParameters `json:"ephemeralBlockDevice,omitempty" tf:"ephemeral_block_device"`

	KmsKeyID *string `json:"kmsKeyID,omitempty" tf:"kms_key_id"`

	Name string `json:"name" tf:"name"`

	SourceAmiID string `json:"sourceAmiID" tf:"source_ami_id"`

	SourceAmiRegion string `json:"sourceAmiRegion" tf:"source_ami_region"`

	Tags map[string]string `json:"tags,omitempty" tf:"tags"`

	TagsAll map[string]string `json:"tagsAll,omitempty" tf:"tags_all"`
}

// AmiCopySpec defines the desired state of AmiCopy
type AmiCopySpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       AmiCopyParameters `json:"forProvider"`
}

// AmiCopyStatus defines the observed state of AmiCopy.
type AmiCopyStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          AmiCopyObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// AmiCopy is the Schema for the AmiCopys API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tfaws}
type AmiCopy struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              AmiCopySpec   `json:"spec"`
	Status            AmiCopyStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// AmiCopyList contains a list of AmiCopys
type AmiCopyList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []AmiCopy `json:"items"`
}

// Repository type metadata.
var (
	AmiCopyKind             = "AmiCopy"
	AmiCopyGroupKind        = schema.GroupKind{Group: Group, Kind: AmiCopyKind}.String()
	AmiCopyKindAPIVersion   = AmiCopyKind + "." + GroupVersion.String()
	AmiCopyGroupVersionKind = GroupVersion.WithKind(AmiCopyKind)
)

func init() {
	SchemeBuilder.Register(&AmiCopy{}, &AmiCopyList{})
}
