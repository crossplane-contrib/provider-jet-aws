/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type LaunchPermissionObservation struct {
}

type LaunchPermissionParameters struct {

	// +kubebuilder:validation:Required
	AccountID *string `json:"accountId" tf:"account_id,omitempty"`

	// +kubebuilder:validation:Required
	ImageID *string `json:"imageId" tf:"image_id,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +terrajet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`
}

// LaunchPermissionSpec defines the desired state of LaunchPermission
type LaunchPermissionSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     LaunchPermissionParameters `json:"forProvider"`
}

// LaunchPermissionStatus defines the observed state of LaunchPermission.
type LaunchPermissionStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        LaunchPermissionObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// LaunchPermission is the Schema for the LaunchPermissions API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tfaws}
type LaunchPermission struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              LaunchPermissionSpec   `json:"spec"`
	Status            LaunchPermissionStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// LaunchPermissionList contains a list of LaunchPermissions
type LaunchPermissionList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []LaunchPermission `json:"items"`
}

// Repository type metadata.
var (
	LaunchPermissionKind             = "LaunchPermission"
	LaunchPermissionGroupKind        = schema.GroupKind{Group: Group, Kind: LaunchPermissionKind}.String()
	LaunchPermissionKindAPIVersion   = LaunchPermissionKind + "." + GroupVersion.String()
	LaunchPermissionGroupVersionKind = GroupVersion.WithKind(LaunchPermissionKind)
)

func init() {
	SchemeBuilder.Register(&LaunchPermission{}, &LaunchPermissionList{})
}
