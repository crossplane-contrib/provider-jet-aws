/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

// +kubebuilder:object:generate=true
// +groupName=eks.aws.tf.crossplane.io
// +versionName=v1alpha1

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1alpha1 "github.com/crossplane-contrib/provider-tf-aws/apis/eks/v1alpha1"
)

type AutoscalingGroupsObservation struct {
	Name string `json:"name" tf:"name"`
}

type AutoscalingGroupsParameters struct {
}

type EksNodeGroupObservation struct {
	Arn string `json:"arn" tf:"arn"`

	Resources []ResourcesObservation `json:"resources" tf:"resources"`

	Status string `json:"status" tf:"status"`
}

type EksNodeGroupParameters struct {
	AmiType *string `json:"amiType,omitempty" tf:"ami_type"`

	CapacityType *string `json:"capacityType,omitempty" tf:"capacity_type"`

	ClusterName string `json:"clusterName" tf:"cluster_name"`

	DiskSize *int64 `json:"diskSize,omitempty" tf:"disk_size"`

	ForceUpdateVersion *bool `json:"forceUpdateVersion,omitempty" tf:"force_update_version"`

	InstanceTypes []string `json:"instanceTypes,omitempty" tf:"instance_types"`

	Labels map[string]string `json:"labels,omitempty" tf:"labels"`

	LaunchTemplate []LaunchTemplateParameters `json:"launchTemplate,omitempty" tf:"launch_template"`

	NodeGroupName *string `json:"nodeGroupName,omitempty" tf:"node_group_name"`

	NodeGroupNamePrefix *string `json:"nodeGroupNamePrefix,omitempty" tf:"node_group_name_prefix"`

	NodeRoleArn string `json:"nodeRoleArn" tf:"node_role_arn"`

	ReleaseVersion *string `json:"releaseVersion,omitempty" tf:"release_version"`

	RemoteAccess []RemoteAccessParameters `json:"remoteAccess,omitempty" tf:"remote_access"`

	ScalingConfig []ScalingConfigParameters `json:"scalingConfig" tf:"scaling_config"`

	SubnetIds []string `json:"subnetIds" tf:"subnet_ids"`

	Tags map[string]string `json:"tags,omitempty" tf:"tags"`

	TagsAll map[string]string `json:"tagsAll,omitempty" tf:"tags_all"`

	Taint []TaintParameters `json:"taint,omitempty" tf:"taint"`

	Version *string `json:"version,omitempty" tf:"version"`
}

type LaunchTemplateObservation struct {
}

type LaunchTemplateParameters struct {
	Id *string `json:"id,omitempty" tf:"id"`

	Name *string `json:"name,omitempty" tf:"name"`

	Version string `json:"version" tf:"version"`
}

type RemoteAccessObservation struct {
}

type RemoteAccessParameters struct {
	Ec2SshKey *string `json:"ec2SshKey,omitempty" tf:"ec2_ssh_key"`

	SourceSecurityGroupIds []string `json:"sourceSecurityGroupIds,omitempty" tf:"source_security_group_ids"`
}

type ResourcesObservation struct {
	AutoscalingGroups []AutoscalingGroupsObservation `json:"autoscalingGroups" tf:"autoscaling_groups"`

	RemoteAccessSecurityGroupId string `json:"remoteAccessSecurityGroupId" tf:"remote_access_security_group_id"`
}

type ResourcesParameters struct {
}

type ScalingConfigObservation struct {
}

type ScalingConfigParameters struct {
	DesiredSize int64 `json:"desiredSize" tf:"desired_size"`

	MaxSize int64 `json:"maxSize" tf:"max_size"`

	MinSize int64 `json:"minSize" tf:"min_size"`
}

type TaintObservation struct {
}

type TaintParameters struct {
	Effect string `json:"effect" tf:"effect"`

	Key string `json:"key" tf:"key"`

	Value *string `json:"value,omitempty" tf:"value"`
}

// EksNodeGroupSpec defines the desired state of EksNodeGroup
type EksNodeGroupSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       EksNodeGroupParameters `json:"forProvider"`
}

// EksNodeGroupStatus defines the observed state of EksNodeGroup.
type EksNodeGroupStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          EksNodeGroupObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// EksNodeGroup is the Schema for the EksNodeGroups API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type EksNodeGroup struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              EksNodeGroupSpec   `json:"spec"`
	Status            EksNodeGroupStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// EksNodeGroupList contains a list of EksNodeGroups
type EksNodeGroupList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []EksNodeGroup `json:"items"`
}

// Repository type metadata.
var (
	EksNodeGroupKind             = "EksNodeGroup"
	EksNodeGroupGroupKind        = schema.GroupKind{Group: v1alpha1.Group, Kind: EksNodeGroupKind}.String()
	EksNodeGroupKindAPIVersion   = EksNodeGroupKind + "." + v1alpha1.GroupVersion.String()
	EksNodeGroupGroupVersionKind = v1alpha1.GroupVersion.WithKind(EksNodeGroupKind)
)

func init() {
	v1alpha1.SchemeBuilder.Register(&EksNodeGroup{}, &EksNodeGroupList{})
}
