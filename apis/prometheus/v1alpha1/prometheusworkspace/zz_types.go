/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

// +kubebuilder:object:generate=true
// +groupName=prometheus.aws.tf.crossplane.io
// +versionName=v1alpha1

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1alpha1 "github.com/crossplane-contrib/provider-tf-aws/apis/prometheus/v1alpha1"
)

type PrometheusWorkspaceObservation struct {
	Arn string `json:"arn" tf:"arn"`

	PrometheusEndpoint string `json:"prometheusEndpoint" tf:"prometheus_endpoint"`
}

type PrometheusWorkspaceParameters struct {
	Alias *string `json:"alias,omitempty" tf:"alias"`
}

// PrometheusWorkspaceSpec defines the desired state of PrometheusWorkspace
type PrometheusWorkspaceSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       PrometheusWorkspaceParameters `json:"forProvider"`
}

// PrometheusWorkspaceStatus defines the observed state of PrometheusWorkspace.
type PrometheusWorkspaceStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          PrometheusWorkspaceObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// PrometheusWorkspace is the Schema for the PrometheusWorkspaces API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type PrometheusWorkspace struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              PrometheusWorkspaceSpec   `json:"spec"`
	Status            PrometheusWorkspaceStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// PrometheusWorkspaceList contains a list of PrometheusWorkspaces
type PrometheusWorkspaceList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []PrometheusWorkspace `json:"items"`
}

// Repository type metadata.
var (
	PrometheusWorkspaceKind             = "PrometheusWorkspace"
	PrometheusWorkspaceGroupKind        = schema.GroupKind{Group: v1alpha1.Group, Kind: PrometheusWorkspaceKind}.String()
	PrometheusWorkspaceKindAPIVersion   = PrometheusWorkspaceKind + "." + v1alpha1.GroupVersion.String()
	PrometheusWorkspaceGroupVersionKind = v1alpha1.GroupVersion.WithKind(PrometheusWorkspaceKind)
)

func init() {
	v1alpha1.SchemeBuilder.Register(&PrometheusWorkspace{}, &PrometheusWorkspaceList{})
}
