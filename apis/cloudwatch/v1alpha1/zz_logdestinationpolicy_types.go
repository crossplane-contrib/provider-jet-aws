/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type LogDestinationPolicyObservation struct {
}

type LogDestinationPolicyParameters struct {

	// +kubebuilder:validation:Required
	AccessPolicy *string `json:"accessPolicy" tf:"access_policy,omitempty"`

	// +kubebuilder:validation:Required
	DestinationName *string `json:"destinationName" tf:"destination_name,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +terrajet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`
}

// LogDestinationPolicySpec defines the desired state of LogDestinationPolicy
type LogDestinationPolicySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     LogDestinationPolicyParameters `json:"forProvider"`
}

// LogDestinationPolicyStatus defines the observed state of LogDestinationPolicy.
type LogDestinationPolicyStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        LogDestinationPolicyObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// LogDestinationPolicy is the Schema for the LogDestinationPolicys API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tfaws}
type LogDestinationPolicy struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              LogDestinationPolicySpec   `json:"spec"`
	Status            LogDestinationPolicyStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// LogDestinationPolicyList contains a list of LogDestinationPolicys
type LogDestinationPolicyList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []LogDestinationPolicy `json:"items"`
}

// Repository type metadata.
var (
	LogDestinationPolicyKind             = "LogDestinationPolicy"
	LogDestinationPolicyGroupKind        = schema.GroupKind{Group: Group, Kind: LogDestinationPolicyKind}.String()
	LogDestinationPolicyKindAPIVersion   = LogDestinationPolicyKind + "." + GroupVersion.String()
	LogDestinationPolicyGroupVersionKind = GroupVersion.WithKind(LogDestinationPolicyKind)
)

func init() {
	SchemeBuilder.Register(&LogDestinationPolicy{}, &LogDestinationPolicyList{})
}
