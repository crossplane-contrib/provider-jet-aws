/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ConditionObservation struct {
}

type ConditionParameters struct {

	// +kubebuilder:validation:Required
	Key *string `json:"key" tf:"key,omitempty"`

	// +kubebuilder:validation:Required
	Type *string `json:"type" tf:"type,omitempty"`

	// +kubebuilder:validation:Required
	Value *string `json:"value" tf:"value,omitempty"`
}

type EventPermissionObservation struct {
}

type EventPermissionParameters struct {

	// +kubebuilder:validation:Optional
	Action *string `json:"action,omitempty" tf:"action,omitempty"`

	// +kubebuilder:validation:Optional
	Condition []ConditionParameters `json:"condition,omitempty" tf:"condition,omitempty"`

	// +kubebuilder:validation:Optional
	EventBusName *string `json:"eventBusName,omitempty" tf:"event_bus_name,omitempty"`

	// +kubebuilder:validation:Required
	Principal *string `json:"principal" tf:"principal,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +terrajet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`

	// +kubebuilder:validation:Required
	StatementID *string `json:"statementId" tf:"statement_id,omitempty"`
}

// EventPermissionSpec defines the desired state of EventPermission
type EventPermissionSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     EventPermissionParameters `json:"forProvider"`
}

// EventPermissionStatus defines the observed state of EventPermission.
type EventPermissionStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        EventPermissionObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// EventPermission is the Schema for the EventPermissions API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tfaws}
type EventPermission struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              EventPermissionSpec   `json:"spec"`
	Status            EventPermissionStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// EventPermissionList contains a list of EventPermissions
type EventPermissionList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []EventPermission `json:"items"`
}

// Repository type metadata.
var (
	EventPermissionKind             = "EventPermission"
	EventPermissionGroupKind        = schema.GroupKind{Group: Group, Kind: EventPermissionKind}.String()
	EventPermissionKindAPIVersion   = EventPermissionKind + "." + GroupVersion.String()
	EventPermissionGroupVersionKind = GroupVersion.WithKind(EventPermissionKind)
)

func init() {
	SchemeBuilder.Register(&EventPermission{}, &EventPermissionList{})
}
