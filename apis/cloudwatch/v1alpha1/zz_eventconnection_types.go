/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type APIKeyObservation struct {
}

type APIKeyParameters struct {

	// +kubebuilder:validation:Required
	Key *string `json:"key" tf:"key,omitempty"`

	// +kubebuilder:validation:Required
	ValueSecretRef v1.SecretKeySelector `json:"valueSecretRef" tf:"-"`
}

type AuthParametersObservation struct {
}

type AuthParametersParameters struct {

	// +kubebuilder:validation:Optional
	APIKey []APIKeyParameters `json:"apiKey,omitempty" tf:"api_key,omitempty"`

	// +kubebuilder:validation:Optional
	Basic []BasicParameters `json:"basic,omitempty" tf:"basic,omitempty"`

	// +kubebuilder:validation:Optional
	InvocationHTTPParameters []InvocationHTTPParametersParameters `json:"invocationHttpParameters,omitempty" tf:"invocation_http_parameters,omitempty"`

	// +kubebuilder:validation:Optional
	Oauth []OauthParameters `json:"oauth,omitempty" tf:"oauth,omitempty"`
}

type BasicObservation struct {
}

type BasicParameters struct {

	// +kubebuilder:validation:Required
	PasswordSecretRef v1.SecretKeySelector `json:"passwordSecretRef" tf:"-"`

	// +kubebuilder:validation:Required
	Username *string `json:"username" tf:"username,omitempty"`
}

type BodyObservation struct {
}

type BodyParameters struct {

	// +kubebuilder:validation:Optional
	IsValueSecret *bool `json:"isValueSecret,omitempty" tf:"is_value_secret,omitempty"`

	// +kubebuilder:validation:Optional
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// +kubebuilder:validation:Optional
	ValueSecretRef v1.SecretKeySelector `json:"valueSecretRef,omitempty" tf:"-"`
}

type ClientParametersObservation struct {
}

type ClientParametersParameters struct {

	// +kubebuilder:validation:Required
	ClientID *string `json:"clientId" tf:"client_id,omitempty"`

	// +kubebuilder:validation:Required
	ClientSecretSecretRef v1.SecretKeySelector `json:"clientSecretSecretRef" tf:"-"`
}

type EventConnectionObservation struct {
	Arn *string `json:"arn,omitempty" tf:"arn,omitempty"`

	SecretArn *string `json:"secretArn,omitempty" tf:"secret_arn,omitempty"`
}

type EventConnectionParameters struct {

	// +kubebuilder:validation:Required
	AuthParameters []AuthParametersParameters `json:"authParameters" tf:"auth_parameters,omitempty"`

	// +kubebuilder:validation:Required
	AuthorizationType *string `json:"authorizationType" tf:"authorization_type,omitempty"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +terrajet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`
}

type HeaderObservation struct {
}

type HeaderParameters struct {

	// +kubebuilder:validation:Optional
	IsValueSecret *bool `json:"isValueSecret,omitempty" tf:"is_value_secret,omitempty"`

	// +kubebuilder:validation:Optional
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// +kubebuilder:validation:Optional
	ValueSecretRef v1.SecretKeySelector `json:"valueSecretRef,omitempty" tf:"-"`
}

type InvocationHTTPParametersObservation struct {
}

type InvocationHTTPParametersParameters struct {

	// +kubebuilder:validation:Optional
	Body []BodyParameters `json:"body,omitempty" tf:"body,omitempty"`

	// +kubebuilder:validation:Optional
	Header []HeaderParameters `json:"header,omitempty" tf:"header,omitempty"`

	// +kubebuilder:validation:Optional
	QueryString []QueryStringParameters `json:"queryString,omitempty" tf:"query_string,omitempty"`
}

type OauthHTTPParametersBodyObservation struct {
}

type OauthHTTPParametersBodyParameters struct {

	// +kubebuilder:validation:Optional
	IsValueSecret *bool `json:"isValueSecret,omitempty" tf:"is_value_secret,omitempty"`

	// +kubebuilder:validation:Optional
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// +kubebuilder:validation:Optional
	ValueSecretRef v1.SecretKeySelector `json:"valueSecretRef,omitempty" tf:"-"`
}

type OauthHTTPParametersHeaderObservation struct {
}

type OauthHTTPParametersHeaderParameters struct {

	// +kubebuilder:validation:Optional
	IsValueSecret *bool `json:"isValueSecret,omitempty" tf:"is_value_secret,omitempty"`

	// +kubebuilder:validation:Optional
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// +kubebuilder:validation:Optional
	ValueSecretRef v1.SecretKeySelector `json:"valueSecretRef,omitempty" tf:"-"`
}

type OauthHTTPParametersObservation struct {
}

type OauthHTTPParametersParameters struct {

	// +kubebuilder:validation:Optional
	Body []OauthHTTPParametersBodyParameters `json:"body,omitempty" tf:"body,omitempty"`

	// +kubebuilder:validation:Optional
	Header []OauthHTTPParametersHeaderParameters `json:"header,omitempty" tf:"header,omitempty"`

	// +kubebuilder:validation:Optional
	QueryString []OauthHTTPParametersQueryStringParameters `json:"queryString,omitempty" tf:"query_string,omitempty"`
}

type OauthHTTPParametersQueryStringObservation struct {
}

type OauthHTTPParametersQueryStringParameters struct {

	// +kubebuilder:validation:Optional
	IsValueSecret *bool `json:"isValueSecret,omitempty" tf:"is_value_secret,omitempty"`

	// +kubebuilder:validation:Optional
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// +kubebuilder:validation:Optional
	ValueSecretRef v1.SecretKeySelector `json:"valueSecretRef,omitempty" tf:"-"`
}

type OauthObservation struct {
}

type OauthParameters struct {

	// +kubebuilder:validation:Required
	AuthorizationEndpoint *string `json:"authorizationEndpoint" tf:"authorization_endpoint,omitempty"`

	// +kubebuilder:validation:Optional
	ClientParameters []ClientParametersParameters `json:"clientParameters,omitempty" tf:"client_parameters,omitempty"`

	// +kubebuilder:validation:Required
	HTTPMethod *string `json:"httpMethod" tf:"http_method,omitempty"`

	// +kubebuilder:validation:Required
	OauthHTTPParameters []OauthHTTPParametersParameters `json:"oauthHttpParameters" tf:"oauth_http_parameters,omitempty"`
}

type QueryStringObservation struct {
}

type QueryStringParameters struct {

	// +kubebuilder:validation:Optional
	IsValueSecret *bool `json:"isValueSecret,omitempty" tf:"is_value_secret,omitempty"`

	// +kubebuilder:validation:Optional
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// +kubebuilder:validation:Optional
	ValueSecretRef v1.SecretKeySelector `json:"valueSecretRef,omitempty" tf:"-"`
}

// EventConnectionSpec defines the desired state of EventConnection
type EventConnectionSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     EventConnectionParameters `json:"forProvider"`
}

// EventConnectionStatus defines the observed state of EventConnection.
type EventConnectionStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        EventConnectionObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// EventConnection is the Schema for the EventConnections API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tfaws}
type EventConnection struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              EventConnectionSpec   `json:"spec"`
	Status            EventConnectionStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// EventConnectionList contains a list of EventConnections
type EventConnectionList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []EventConnection `json:"items"`
}

// Repository type metadata.
var (
	EventConnectionKind             = "EventConnection"
	EventConnectionGroupKind        = schema.GroupKind{Group: Group, Kind: EventConnectionKind}.String()
	EventConnectionKindAPIVersion   = EventConnectionKind + "." + GroupVersion.String()
	EventConnectionGroupVersionKind = GroupVersion.WithKind(EventConnectionKind)
)

func init() {
	SchemeBuilder.Register(&EventConnection{}, &EventConnectionList{})
}
