/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

// +kubebuilder:object:generate=true
// +groupName=cloudwatch.aws.tf.crossplane.io
// +versionName=v1alpha1

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1alpha1 "github.com/crossplane-contrib/provider-tf-aws/apis/cloudwatch/v1alpha1"
)

type CloudwatchLogResourcePolicyObservation struct {
}

type CloudwatchLogResourcePolicyParameters struct {
	PolicyDocument string `json:"policyDocument" tf:"policy_document"`

	PolicyName string `json:"policyName" tf:"policy_name"`
}

// CloudwatchLogResourcePolicySpec defines the desired state of CloudwatchLogResourcePolicy
type CloudwatchLogResourcePolicySpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       CloudwatchLogResourcePolicyParameters `json:"forProvider"`
}

// CloudwatchLogResourcePolicyStatus defines the observed state of CloudwatchLogResourcePolicy.
type CloudwatchLogResourcePolicyStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          CloudwatchLogResourcePolicyObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// CloudwatchLogResourcePolicy is the Schema for the CloudwatchLogResourcePolicys API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type CloudwatchLogResourcePolicy struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              CloudwatchLogResourcePolicySpec   `json:"spec"`
	Status            CloudwatchLogResourcePolicyStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// CloudwatchLogResourcePolicyList contains a list of CloudwatchLogResourcePolicys
type CloudwatchLogResourcePolicyList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []CloudwatchLogResourcePolicy `json:"items"`
}

// Repository type metadata.
var (
	CloudwatchLogResourcePolicyKind             = "CloudwatchLogResourcePolicy"
	CloudwatchLogResourcePolicyGroupKind        = schema.GroupKind{Group: v1alpha1.Group, Kind: CloudwatchLogResourcePolicyKind}.String()
	CloudwatchLogResourcePolicyKindAPIVersion   = CloudwatchLogResourcePolicyKind + "." + v1alpha1.GroupVersion.String()
	CloudwatchLogResourcePolicyGroupVersionKind = v1alpha1.GroupVersion.WithKind(CloudwatchLogResourcePolicyKind)
)

func init() {
	v1alpha1.SchemeBuilder.Register(&CloudwatchLogResourcePolicy{}, &CloudwatchLogResourcePolicyList{})
}
