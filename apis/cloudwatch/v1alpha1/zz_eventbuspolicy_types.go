/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type EventBusPolicyObservation struct {
}

type EventBusPolicyParameters struct {

	// +kubebuilder:validation:Optional
	EventBusName *string `json:"eventBusName,omitempty" tf:"event_bus_name,omitempty"`

	// +kubebuilder:validation:Required
	Policy *string `json:"policy" tf:"policy,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +terrajet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`
}

// EventBusPolicySpec defines the desired state of EventBusPolicy
type EventBusPolicySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     EventBusPolicyParameters `json:"forProvider"`
}

// EventBusPolicyStatus defines the observed state of EventBusPolicy.
type EventBusPolicyStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        EventBusPolicyObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// EventBusPolicy is the Schema for the EventBusPolicys API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tfaws}
type EventBusPolicy struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              EventBusPolicySpec   `json:"spec"`
	Status            EventBusPolicyStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// EventBusPolicyList contains a list of EventBusPolicys
type EventBusPolicyList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []EventBusPolicy `json:"items"`
}

// Repository type metadata.
var (
	EventBusPolicyKind             = "EventBusPolicy"
	EventBusPolicyGroupKind        = schema.GroupKind{Group: Group, Kind: EventBusPolicyKind}.String()
	EventBusPolicyKindAPIVersion   = EventBusPolicyKind + "." + GroupVersion.String()
	EventBusPolicyGroupVersionKind = GroupVersion.WithKind(EventBusPolicyKind)
)

func init() {
	SchemeBuilder.Register(&EventBusPolicy{}, &EventBusPolicyList{})
}
