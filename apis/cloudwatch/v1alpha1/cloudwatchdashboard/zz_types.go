/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

// +kubebuilder:object:generate=true
// +groupName=cloudwatch.aws.tf.crossplane.io
// +versionName=v1alpha1

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1alpha1 "github.com/crossplane-contrib/provider-tf-aws/apis/cloudwatch/v1alpha1"
)

type CloudwatchDashboardObservation struct {
	DashboardArn string `json:"dashboardArn" tf:"dashboard_arn"`
}

type CloudwatchDashboardParameters struct {
	DashboardBody string `json:"dashboardBody" tf:"dashboard_body"`

	DashboardName string `json:"dashboardName" tf:"dashboard_name"`
}

// CloudwatchDashboardSpec defines the desired state of CloudwatchDashboard
type CloudwatchDashboardSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       CloudwatchDashboardParameters `json:"forProvider"`
}

// CloudwatchDashboardStatus defines the observed state of CloudwatchDashboard.
type CloudwatchDashboardStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          CloudwatchDashboardObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// CloudwatchDashboard is the Schema for the CloudwatchDashboards API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type CloudwatchDashboard struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              CloudwatchDashboardSpec   `json:"spec"`
	Status            CloudwatchDashboardStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// CloudwatchDashboardList contains a list of CloudwatchDashboards
type CloudwatchDashboardList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []CloudwatchDashboard `json:"items"`
}

// Repository type metadata.
var (
	CloudwatchDashboardKind             = "CloudwatchDashboard"
	CloudwatchDashboardGroupKind        = schema.GroupKind{Group: v1alpha1.Group, Kind: CloudwatchDashboardKind}.String()
	CloudwatchDashboardKindAPIVersion   = CloudwatchDashboardKind + "." + v1alpha1.GroupVersion.String()
	CloudwatchDashboardGroupVersionKind = v1alpha1.GroupVersion.WithKind(CloudwatchDashboardKind)
)

func init() {
	v1alpha1.SchemeBuilder.Register(&CloudwatchDashboard{}, &CloudwatchDashboardList{})
}
