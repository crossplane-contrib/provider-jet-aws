/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type CloudwatchCompositeAlarmObservation struct {
	ARN string `json:"arn" tf:"arn"`
}

type CloudwatchCompositeAlarmParameters struct {
	ActionsEnabled *bool `json:"actionsEnabled,omitempty" tf:"actions_enabled"`

	AlarmActions []string `json:"alarmActions,omitempty" tf:"alarm_actions"`

	AlarmDescription *string `json:"alarmDescription,omitempty" tf:"alarm_description"`

	AlarmName string `json:"alarmName" tf:"alarm_name"`

	AlarmRule string `json:"alarmRule" tf:"alarm_rule"`

	InsufficientDataActions []string `json:"insufficientDataActions,omitempty" tf:"insufficient_data_actions"`

	OkActions []string `json:"okActions,omitempty" tf:"ok_actions"`

	Tags map[string]string `json:"tags,omitempty" tf:"tags"`

	TagsAll map[string]string `json:"tagsAll,omitempty" tf:"tags_all"`
}

// CloudwatchCompositeAlarmSpec defines the desired state of CloudwatchCompositeAlarm
type CloudwatchCompositeAlarmSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       CloudwatchCompositeAlarmParameters `json:"forProvider"`
}

// CloudwatchCompositeAlarmStatus defines the observed state of CloudwatchCompositeAlarm.
type CloudwatchCompositeAlarmStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          CloudwatchCompositeAlarmObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// CloudwatchCompositeAlarm is the Schema for the CloudwatchCompositeAlarms API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tfaws}
type CloudwatchCompositeAlarm struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              CloudwatchCompositeAlarmSpec   `json:"spec"`
	Status            CloudwatchCompositeAlarmStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// CloudwatchCompositeAlarmList contains a list of CloudwatchCompositeAlarms
type CloudwatchCompositeAlarmList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []CloudwatchCompositeAlarm `json:"items"`
}

// Repository type metadata.
var (
	CloudwatchCompositeAlarmKind             = "CloudwatchCompositeAlarm"
	CloudwatchCompositeAlarmGroupKind        = schema.GroupKind{Group: Group, Kind: CloudwatchCompositeAlarmKind}.String()
	CloudwatchCompositeAlarmKindAPIVersion   = CloudwatchCompositeAlarmKind + "." + GroupVersion.String()
	CloudwatchCompositeAlarmGroupVersionKind = GroupVersion.WithKind(CloudwatchCompositeAlarmKind)
)

func init() {
	SchemeBuilder.Register(&CloudwatchCompositeAlarm{}, &CloudwatchCompositeAlarmList{})
}
