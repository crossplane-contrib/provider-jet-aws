/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type CloudwatchLogSubscriptionFilterObservation struct {
}

type CloudwatchLogSubscriptionFilterParameters struct {
	DestinationARN string `json:"destinationARN" tf:"destination_arn"`

	Distribution *string `json:"distribution,omitempty" tf:"distribution"`

	FilterPattern string `json:"filterPattern" tf:"filter_pattern"`

	LogGroupName string `json:"logGroupName" tf:"log_group_name"`

	Name string `json:"name" tf:"name"`

	RoleARN *string `json:"roleARN,omitempty" tf:"role_arn"`
}

// CloudwatchLogSubscriptionFilterSpec defines the desired state of CloudwatchLogSubscriptionFilter
type CloudwatchLogSubscriptionFilterSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       CloudwatchLogSubscriptionFilterParameters `json:"forProvider"`
}

// CloudwatchLogSubscriptionFilterStatus defines the observed state of CloudwatchLogSubscriptionFilter.
type CloudwatchLogSubscriptionFilterStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          CloudwatchLogSubscriptionFilterObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// CloudwatchLogSubscriptionFilter is the Schema for the CloudwatchLogSubscriptionFilters API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tfaws}
type CloudwatchLogSubscriptionFilter struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              CloudwatchLogSubscriptionFilterSpec   `json:"spec"`
	Status            CloudwatchLogSubscriptionFilterStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// CloudwatchLogSubscriptionFilterList contains a list of CloudwatchLogSubscriptionFilters
type CloudwatchLogSubscriptionFilterList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []CloudwatchLogSubscriptionFilter `json:"items"`
}

// Repository type metadata.
var (
	CloudwatchLogSubscriptionFilterKind             = "CloudwatchLogSubscriptionFilter"
	CloudwatchLogSubscriptionFilterGroupKind        = schema.GroupKind{Group: Group, Kind: CloudwatchLogSubscriptionFilterKind}.String()
	CloudwatchLogSubscriptionFilterKindAPIVersion   = CloudwatchLogSubscriptionFilterKind + "." + GroupVersion.String()
	CloudwatchLogSubscriptionFilterGroupVersionKind = GroupVersion.WithKind(CloudwatchLogSubscriptionFilterKind)
)

func init() {
	SchemeBuilder.Register(&CloudwatchLogSubscriptionFilter{}, &CloudwatchLogSubscriptionFilterList{})
}
