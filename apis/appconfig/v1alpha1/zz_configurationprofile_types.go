/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ConfigurationProfileObservation struct {
	Arn *string `json:"arn,omitempty" tf:"arn,omitempty"`

	ConfigurationProfileID *string `json:"configurationProfileId,omitempty" tf:"configuration_profile_id,omitempty"`

	TagsAll map[string]*string `json:"tagsAll,omitempty" tf:"tags_all,omitempty"`
}

type ConfigurationProfileParameters struct {

	// +kubebuilder:validation:Required
	ApplicationID *string `json:"applicationId" tf:"application_id,omitempty"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Required
	LocationURI *string `json:"locationUri" tf:"location_uri,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +terrajet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`

	// +kubebuilder:validation:Optional
	RetrievalRoleArn *string `json:"retrievalRoleArn,omitempty" tf:"retrieval_role_arn,omitempty"`

	// +kubebuilder:validation:Optional
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// +kubebuilder:validation:Optional
	Validator []ValidatorParameters `json:"validator,omitempty" tf:"validator,omitempty"`
}

type ValidatorObservation struct {
}

type ValidatorParameters struct {

	// +kubebuilder:validation:Optional
	ContentSecretRef v1.SecretKeySelector `json:"contentSecretRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Required
	Type *string `json:"type" tf:"type,omitempty"`
}

// ConfigurationProfileSpec defines the desired state of ConfigurationProfile
type ConfigurationProfileSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ConfigurationProfileParameters `json:"forProvider"`
}

// ConfigurationProfileStatus defines the observed state of ConfigurationProfile.
type ConfigurationProfileStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ConfigurationProfileObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ConfigurationProfile is the Schema for the ConfigurationProfiles API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tfaws}
type ConfigurationProfile struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ConfigurationProfileSpec   `json:"spec"`
	Status            ConfigurationProfileStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ConfigurationProfileList contains a list of ConfigurationProfiles
type ConfigurationProfileList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ConfigurationProfile `json:"items"`
}

// Repository type metadata.
var (
	ConfigurationProfileKind             = "ConfigurationProfile"
	ConfigurationProfileGroupKind        = schema.GroupKind{Group: Group, Kind: ConfigurationProfileKind}.String()
	ConfigurationProfileKindAPIVersion   = ConfigurationProfileKind + "." + GroupVersion.String()
	ConfigurationProfileGroupVersionKind = GroupVersion.WithKind(ConfigurationProfileKind)
)

func init() {
	SchemeBuilder.Register(&ConfigurationProfile{}, &ConfigurationProfileList{})
}
