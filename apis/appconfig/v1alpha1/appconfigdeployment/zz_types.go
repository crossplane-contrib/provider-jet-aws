/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

// +kubebuilder:object:generate=true
// +groupName=appconfig.aws.tf.crossplane.io
// +versionName=v1alpha1

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1alpha1 "github.com/crossplane-contrib/provider-tf-aws/apis/appconfig/v1alpha1"
)

type AppconfigDeploymentObservation struct {
	Arn string `json:"arn" tf:"arn"`

	DeploymentNumber int64 `json:"deploymentNumber" tf:"deployment_number"`
}

type AppconfigDeploymentParameters struct {
	ApplicationId string `json:"applicationId" tf:"application_id"`

	ConfigurationProfileId string `json:"configurationProfileId" tf:"configuration_profile_id"`

	ConfigurationVersion string `json:"configurationVersion" tf:"configuration_version"`

	DeploymentStrategyId string `json:"deploymentStrategyId" tf:"deployment_strategy_id"`

	Description *string `json:"description,omitempty" tf:"description"`

	EnvironmentId string `json:"environmentId" tf:"environment_id"`

	Tags map[string]string `json:"tags,omitempty" tf:"tags"`

	TagsAll map[string]string `json:"tagsAll,omitempty" tf:"tags_all"`
}

// AppconfigDeploymentSpec defines the desired state of AppconfigDeployment
type AppconfigDeploymentSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       AppconfigDeploymentParameters `json:"forProvider"`
}

// AppconfigDeploymentStatus defines the observed state of AppconfigDeployment.
type AppconfigDeploymentStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          AppconfigDeploymentObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// AppconfigDeployment is the Schema for the AppconfigDeployments API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type AppconfigDeployment struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              AppconfigDeploymentSpec   `json:"spec"`
	Status            AppconfigDeploymentStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// AppconfigDeploymentList contains a list of AppconfigDeployments
type AppconfigDeploymentList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []AppconfigDeployment `json:"items"`
}

// Repository type metadata.
var (
	AppconfigDeploymentKind             = "AppconfigDeployment"
	AppconfigDeploymentGroupKind        = schema.GroupKind{Group: v1alpha1.Group, Kind: AppconfigDeploymentKind}.String()
	AppconfigDeploymentKindAPIVersion   = AppconfigDeploymentKind + "." + v1alpha1.GroupVersion.String()
	AppconfigDeploymentGroupVersionKind = v1alpha1.GroupVersion.WithKind(AppconfigDeploymentKind)
)

func init() {
	v1alpha1.SchemeBuilder.Register(&AppconfigDeployment{}, &AppconfigDeploymentList{})
}
