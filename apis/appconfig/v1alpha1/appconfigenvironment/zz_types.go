/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

// +kubebuilder:object:generate=true
// +groupName=appconfig.aws.tf.crossplane.io
// +versionName=v1alpha1

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1alpha1 "github.com/crossplane-contrib/provider-tf-aws/apis/appconfig/v1alpha1"
)

type AppconfigEnvironmentObservation struct {
	Arn string `json:"arn" tf:"arn"`

	EnvironmentId string `json:"environmentId" tf:"environment_id"`

	State string `json:"state" tf:"state"`
}

type AppconfigEnvironmentParameters struct {
	ApplicationId string `json:"applicationId" tf:"application_id"`

	Description *string `json:"description,omitempty" tf:"description"`

	Monitor []MonitorParameters `json:"monitor,omitempty" tf:"monitor"`

	Name string `json:"name" tf:"name"`

	Tags map[string]string `json:"tags,omitempty" tf:"tags"`

	TagsAll map[string]string `json:"tagsAll,omitempty" tf:"tags_all"`
}

type MonitorObservation struct {
}

type MonitorParameters struct {
	AlarmArn string `json:"alarmArn" tf:"alarm_arn"`

	AlarmRoleArn *string `json:"alarmRoleArn,omitempty" tf:"alarm_role_arn"`
}

// AppconfigEnvironmentSpec defines the desired state of AppconfigEnvironment
type AppconfigEnvironmentSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       AppconfigEnvironmentParameters `json:"forProvider"`
}

// AppconfigEnvironmentStatus defines the observed state of AppconfigEnvironment.
type AppconfigEnvironmentStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          AppconfigEnvironmentObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// AppconfigEnvironment is the Schema for the AppconfigEnvironments API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type AppconfigEnvironment struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              AppconfigEnvironmentSpec   `json:"spec"`
	Status            AppconfigEnvironmentStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// AppconfigEnvironmentList contains a list of AppconfigEnvironments
type AppconfigEnvironmentList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []AppconfigEnvironment `json:"items"`
}

// Repository type metadata.
var (
	AppconfigEnvironmentKind             = "AppconfigEnvironment"
	AppconfigEnvironmentGroupKind        = schema.GroupKind{Group: v1alpha1.Group, Kind: AppconfigEnvironmentKind}.String()
	AppconfigEnvironmentKindAPIVersion   = AppconfigEnvironmentKind + "." + v1alpha1.GroupVersion.String()
	AppconfigEnvironmentGroupVersionKind = v1alpha1.GroupVersion.WithKind(AppconfigEnvironmentKind)
)

func init() {
	v1alpha1.SchemeBuilder.Register(&AppconfigEnvironment{}, &AppconfigEnvironmentList{})
}
