/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ProvisioningArtifactObservation struct {
	CreatedTime *string `json:"createdTime,omitempty" tf:"created_time,omitempty"`
}

type ProvisioningArtifactParameters struct {

	// +kubebuilder:validation:Optional
	AcceptLanguage *string `json:"acceptLanguage,omitempty" tf:"accept_language,omitempty"`

	// +kubebuilder:validation:Optional
	Active *bool `json:"active,omitempty" tf:"active,omitempty"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Optional
	DisableTemplateValidation *bool `json:"disableTemplateValidation,omitempty" tf:"disable_template_validation,omitempty"`

	// +kubebuilder:validation:Optional
	Guidance *string `json:"guidance,omitempty" tf:"guidance,omitempty"`

	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// +kubebuilder:validation:Required
	ProductID *string `json:"productId" tf:"product_id,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +terrajet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`

	// +kubebuilder:validation:Optional
	TemplatePhysicalID *string `json:"templatePhysicalId,omitempty" tf:"template_physical_id,omitempty"`

	// +kubebuilder:validation:Optional
	TemplateURL *string `json:"templateUrl,omitempty" tf:"template_url,omitempty"`

	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

// ProvisioningArtifactSpec defines the desired state of ProvisioningArtifact
type ProvisioningArtifactSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ProvisioningArtifactParameters `json:"forProvider"`
}

// ProvisioningArtifactStatus defines the observed state of ProvisioningArtifact.
type ProvisioningArtifactStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ProvisioningArtifactObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ProvisioningArtifact is the Schema for the ProvisioningArtifacts API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tfaws}
type ProvisioningArtifact struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ProvisioningArtifactSpec   `json:"spec"`
	Status            ProvisioningArtifactStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ProvisioningArtifactList contains a list of ProvisioningArtifacts
type ProvisioningArtifactList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ProvisioningArtifact `json:"items"`
}

// Repository type metadata.
var (
	ProvisioningArtifactKind             = "ProvisioningArtifact"
	ProvisioningArtifactGroupKind        = schema.GroupKind{Group: Group, Kind: ProvisioningArtifactKind}.String()
	ProvisioningArtifactKindAPIVersion   = ProvisioningArtifactKind + "." + GroupVersion.String()
	ProvisioningArtifactGroupVersionKind = GroupVersion.WithKind(ProvisioningArtifactKind)
)

func init() {
	SchemeBuilder.Register(&ProvisioningArtifact{}, &ProvisioningArtifactList{})
}
