/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type ServicecatalogProductPortfolioAssociationObservation struct {
}

type ServicecatalogProductPortfolioAssociationParameters struct {
	AcceptLanguage *string `json:"acceptLanguage,omitempty" tf:"accept_language"`

	PortfolioID string `json:"portfolioID" tf:"portfolio_id"`

	ProductID string `json:"productID" tf:"product_id"`

	SourcePortfolioID *string `json:"sourcePortfolioID,omitempty" tf:"source_portfolio_id"`
}

// ServicecatalogProductPortfolioAssociationSpec defines the desired state of ServicecatalogProductPortfolioAssociation
type ServicecatalogProductPortfolioAssociationSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       ServicecatalogProductPortfolioAssociationParameters `json:"forProvider"`
}

// ServicecatalogProductPortfolioAssociationStatus defines the observed state of ServicecatalogProductPortfolioAssociation.
type ServicecatalogProductPortfolioAssociationStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          ServicecatalogProductPortfolioAssociationObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ServicecatalogProductPortfolioAssociation is the Schema for the ServicecatalogProductPortfolioAssociations API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tfaws}
type ServicecatalogProductPortfolioAssociation struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ServicecatalogProductPortfolioAssociationSpec   `json:"spec"`
	Status            ServicecatalogProductPortfolioAssociationStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ServicecatalogProductPortfolioAssociationList contains a list of ServicecatalogProductPortfolioAssociations
type ServicecatalogProductPortfolioAssociationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ServicecatalogProductPortfolioAssociation `json:"items"`
}

// Repository type metadata.
var (
	ServicecatalogProductPortfolioAssociationKind             = "ServicecatalogProductPortfolioAssociation"
	ServicecatalogProductPortfolioAssociationGroupKind        = schema.GroupKind{Group: Group, Kind: ServicecatalogProductPortfolioAssociationKind}.String()
	ServicecatalogProductPortfolioAssociationKindAPIVersion   = ServicecatalogProductPortfolioAssociationKind + "." + GroupVersion.String()
	ServicecatalogProductPortfolioAssociationGroupVersionKind = GroupVersion.WithKind(ServicecatalogProductPortfolioAssociationKind)
)

func init() {
	SchemeBuilder.Register(&ServicecatalogProductPortfolioAssociation{}, &ServicecatalogProductPortfolioAssociationList{})
}
