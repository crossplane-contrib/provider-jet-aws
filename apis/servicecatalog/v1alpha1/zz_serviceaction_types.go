/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type DefinitionObservation struct {
}

type DefinitionParameters struct {

	// +kubebuilder:validation:Optional
	AssumeRole *string `json:"assumeRole,omitempty" tf:"assume_role,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	Parameters *string `json:"parameters,omitempty" tf:"parameters,omitempty"`

	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// +kubebuilder:validation:Required
	Version *string `json:"version" tf:"version,omitempty"`
}

type ServiceActionObservation struct {
}

type ServiceActionParameters struct {

	// +kubebuilder:validation:Optional
	AcceptLanguage *string `json:"acceptLanguage,omitempty" tf:"accept_language,omitempty"`

	// +kubebuilder:validation:Required
	Definition []DefinitionParameters `json:"definition" tf:"definition,omitempty"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +terrajet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`
}

// ServiceActionSpec defines the desired state of ServiceAction
type ServiceActionSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ServiceActionParameters `json:"forProvider"`
}

// ServiceActionStatus defines the observed state of ServiceAction.
type ServiceActionStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ServiceActionObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ServiceAction is the Schema for the ServiceActions API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tfaws}
type ServiceAction struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ServiceActionSpec   `json:"spec"`
	Status            ServiceActionStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ServiceActionList contains a list of ServiceActions
type ServiceActionList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ServiceAction `json:"items"`
}

// Repository type metadata.
var (
	ServiceActionKind             = "ServiceAction"
	ServiceActionGroupKind        = schema.GroupKind{Group: Group, Kind: ServiceActionKind}.String()
	ServiceActionKindAPIVersion   = ServiceActionKind + "." + GroupVersion.String()
	ServiceActionGroupVersionKind = GroupVersion.WithKind(ServiceActionKind)
)

func init() {
	SchemeBuilder.Register(&ServiceAction{}, &ServiceActionList{})
}
