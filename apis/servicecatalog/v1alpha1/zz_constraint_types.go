/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ConstraintObservation struct {
	Owner *string `json:"owner,omitempty" tf:"owner,omitempty"`

	Status *string `json:"status,omitempty" tf:"status,omitempty"`
}

type ConstraintParameters struct {

	// +kubebuilder:validation:Optional
	AcceptLanguage *string `json:"acceptLanguage,omitempty" tf:"accept_language,omitempty"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Required
	Parameters *string `json:"parameters" tf:"parameters,omitempty"`

	// +kubebuilder:validation:Required
	PortfolioID *string `json:"portfolioId" tf:"portfolio_id,omitempty"`

	// +kubebuilder:validation:Required
	ProductID *string `json:"productId" tf:"product_id,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +terrajet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`

	// +kubebuilder:validation:Required
	Type *string `json:"type" tf:"type,omitempty"`
}

// ConstraintSpec defines the desired state of Constraint
type ConstraintSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ConstraintParameters `json:"forProvider"`
}

// ConstraintStatus defines the observed state of Constraint.
type ConstraintStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ConstraintObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Constraint is the Schema for the Constraints API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tfaws}
type Constraint struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ConstraintSpec   `json:"spec"`
	Status            ConstraintStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ConstraintList contains a list of Constraints
type ConstraintList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Constraint `json:"items"`
}

// Repository type metadata.
var (
	ConstraintKind             = "Constraint"
	ConstraintGroupKind        = schema.GroupKind{Group: Group, Kind: ConstraintKind}.String()
	ConstraintKindAPIVersion   = ConstraintKind + "." + GroupVersion.String()
	ConstraintGroupVersionKind = GroupVersion.WithKind(ConstraintKind)
)

func init() {
	SchemeBuilder.Register(&Constraint{}, &ConstraintList{})
}
