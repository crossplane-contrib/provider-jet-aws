/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type TagOptionObservation struct {
	Owner *string `json:"owner,omitempty" tf:"owner,omitempty"`
}

type TagOptionParameters struct {

	// +kubebuilder:validation:Optional
	Active *bool `json:"active,omitempty" tf:"active,omitempty"`

	// +kubebuilder:validation:Required
	Key *string `json:"key" tf:"key,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +terrajet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`

	// +kubebuilder:validation:Required
	Value *string `json:"value" tf:"value,omitempty"`
}

// TagOptionSpec defines the desired state of TagOption
type TagOptionSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     TagOptionParameters `json:"forProvider"`
}

// TagOptionStatus defines the observed state of TagOption.
type TagOptionStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        TagOptionObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// TagOption is the Schema for the TagOptions API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tfaws}
type TagOption struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              TagOptionSpec   `json:"spec"`
	Status            TagOptionStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// TagOptionList contains a list of TagOptions
type TagOptionList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []TagOption `json:"items"`
}

// Repository type metadata.
var (
	TagOptionKind             = "TagOption"
	TagOptionGroupKind        = schema.GroupKind{Group: Group, Kind: TagOptionKind}.String()
	TagOptionKindAPIVersion   = TagOptionKind + "." + GroupVersion.String()
	TagOptionGroupVersionKind = GroupVersion.WithKind(TagOptionKind)
)

func init() {
	SchemeBuilder.Register(&TagOption{}, &TagOptionList{})
}
