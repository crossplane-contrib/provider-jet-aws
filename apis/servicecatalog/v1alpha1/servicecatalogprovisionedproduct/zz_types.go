/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

// +kubebuilder:object:generate=true
// +groupName=servicecatalog.aws.tf.crossplane.io
// +versionName=v1alpha1

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1alpha1 "github.com/crossplane-contrib/provider-tf-aws/apis/servicecatalog/v1alpha1"
)

type ProvisioningParametersObservation struct {
}

type ProvisioningParametersParameters struct {
	Key string `json:"key" tf:"key"`

	UsePreviousValue *bool `json:"usePreviousValue,omitempty" tf:"use_previous_value"`

	Value *string `json:"value,omitempty" tf:"value"`
}

type ServicecatalogProvisionedProductObservation struct {
	Arn string `json:"arn" tf:"arn"`

	CloudwatchDashboardNames []string `json:"cloudwatchDashboardNames" tf:"cloudwatch_dashboard_names"`

	CreatedTime string `json:"createdTime" tf:"created_time"`

	LastProvisioningRecordId string `json:"lastProvisioningRecordId" tf:"last_provisioning_record_id"`

	LastRecordId string `json:"lastRecordId" tf:"last_record_id"`

	LastSuccessfulProvisioningRecordId string `json:"lastSuccessfulProvisioningRecordId" tf:"last_successful_provisioning_record_id"`

	LaunchRoleArn string `json:"launchRoleArn" tf:"launch_role_arn"`

	Status string `json:"status" tf:"status"`

	StatusMessage string `json:"statusMessage" tf:"status_message"`

	Type string `json:"type" tf:"type"`
}

type ServicecatalogProvisionedProductParameters struct {
	AcceptLanguage *string `json:"acceptLanguage,omitempty" tf:"accept_language"`

	IgnoreErrors *bool `json:"ignoreErrors,omitempty" tf:"ignore_errors"`

	Name string `json:"name" tf:"name"`

	NotificationArns []string `json:"notificationArns,omitempty" tf:"notification_arns"`

	PathId *string `json:"pathId,omitempty" tf:"path_id"`

	PathName *string `json:"pathName,omitempty" tf:"path_name"`

	ProductId *string `json:"productId,omitempty" tf:"product_id"`

	ProductName *string `json:"productName,omitempty" tf:"product_name"`

	ProvisioningArtifactId *string `json:"provisioningArtifactId,omitempty" tf:"provisioning_artifact_id"`

	ProvisioningArtifactName *string `json:"provisioningArtifactName,omitempty" tf:"provisioning_artifact_name"`

	ProvisioningParameters []ProvisioningParametersParameters `json:"provisioningParameters,omitempty" tf:"provisioning_parameters"`

	RetainPhysicalResources *bool `json:"retainPhysicalResources,omitempty" tf:"retain_physical_resources"`

	StackSetProvisioningPreferences []StackSetProvisioningPreferencesParameters `json:"stackSetProvisioningPreferences,omitempty" tf:"stack_set_provisioning_preferences"`

	Tags map[string]string `json:"tags,omitempty" tf:"tags"`

	TagsAll map[string]string `json:"tagsAll,omitempty" tf:"tags_all"`
}

type StackSetProvisioningPreferencesObservation struct {
}

type StackSetProvisioningPreferencesParameters struct {
	Accounts []string `json:"accounts,omitempty" tf:"accounts"`

	FailureToleranceCount *int64 `json:"failureToleranceCount,omitempty" tf:"failure_tolerance_count"`

	FailureTolerancePercentage *int64 `json:"failureTolerancePercentage,omitempty" tf:"failure_tolerance_percentage"`

	MaxConcurrencyCount *int64 `json:"maxConcurrencyCount,omitempty" tf:"max_concurrency_count"`

	MaxConcurrencyPercentage *int64 `json:"maxConcurrencyPercentage,omitempty" tf:"max_concurrency_percentage"`

	Regions []string `json:"regions,omitempty" tf:"regions"`
}

// ServicecatalogProvisionedProductSpec defines the desired state of ServicecatalogProvisionedProduct
type ServicecatalogProvisionedProductSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       ServicecatalogProvisionedProductParameters `json:"forProvider"`
}

// ServicecatalogProvisionedProductStatus defines the observed state of ServicecatalogProvisionedProduct.
type ServicecatalogProvisionedProductStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          ServicecatalogProvisionedProductObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ServicecatalogProvisionedProduct is the Schema for the ServicecatalogProvisionedProducts API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type ServicecatalogProvisionedProduct struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ServicecatalogProvisionedProductSpec   `json:"spec"`
	Status            ServicecatalogProvisionedProductStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ServicecatalogProvisionedProductList contains a list of ServicecatalogProvisionedProducts
type ServicecatalogProvisionedProductList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ServicecatalogProvisionedProduct `json:"items"`
}

// Repository type metadata.
var (
	ServicecatalogProvisionedProductKind             = "ServicecatalogProvisionedProduct"
	ServicecatalogProvisionedProductGroupKind        = schema.GroupKind{Group: v1alpha1.Group, Kind: ServicecatalogProvisionedProductKind}.String()
	ServicecatalogProvisionedProductKindAPIVersion   = ServicecatalogProvisionedProductKind + "." + v1alpha1.GroupVersion.String()
	ServicecatalogProvisionedProductGroupVersionKind = v1alpha1.GroupVersion.WithKind(ServicecatalogProvisionedProductKind)
)

func init() {
	v1alpha1.SchemeBuilder.Register(&ServicecatalogProvisionedProduct{}, &ServicecatalogProvisionedProductList{})
}
