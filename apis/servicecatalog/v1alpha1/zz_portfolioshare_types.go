/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type PortfolioShareObservation struct {
	Accepted *bool `json:"accepted,omitempty" tf:"accepted,omitempty"`
}

type PortfolioShareParameters struct {

	// +kubebuilder:validation:Optional
	AcceptLanguage *string `json:"acceptLanguage,omitempty" tf:"accept_language,omitempty"`

	// +kubebuilder:validation:Required
	PortfolioID *string `json:"portfolioId" tf:"portfolio_id,omitempty"`

	// +kubebuilder:validation:Required
	PrincipalID *string `json:"principalId" tf:"principal_id,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +terrajet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`

	// +kubebuilder:validation:Optional
	ShareTagOptions *bool `json:"shareTagOptions,omitempty" tf:"share_tag_options,omitempty"`

	// +kubebuilder:validation:Required
	Type *string `json:"type" tf:"type,omitempty"`

	// +kubebuilder:validation:Optional
	WaitForAcceptance *bool `json:"waitForAcceptance,omitempty" tf:"wait_for_acceptance,omitempty"`
}

// PortfolioShareSpec defines the desired state of PortfolioShare
type PortfolioShareSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     PortfolioShareParameters `json:"forProvider"`
}

// PortfolioShareStatus defines the observed state of PortfolioShare.
type PortfolioShareStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        PortfolioShareObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// PortfolioShare is the Schema for the PortfolioShares API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tfaws}
type PortfolioShare struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              PortfolioShareSpec   `json:"spec"`
	Status            PortfolioShareStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// PortfolioShareList contains a list of PortfolioShares
type PortfolioShareList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []PortfolioShare `json:"items"`
}

// Repository type metadata.
var (
	PortfolioShareKind             = "PortfolioShare"
	PortfolioShareGroupKind        = schema.GroupKind{Group: Group, Kind: PortfolioShareKind}.String()
	PortfolioShareKindAPIVersion   = PortfolioShareKind + "." + GroupVersion.String()
	PortfolioShareGroupVersionKind = GroupVersion.WithKind(PortfolioShareKind)
)

func init() {
	SchemeBuilder.Register(&PortfolioShare{}, &PortfolioShareList{})
}
