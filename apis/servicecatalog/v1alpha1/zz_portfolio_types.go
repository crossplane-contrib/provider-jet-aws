/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type PortfolioObservation struct {
	Arn *string `json:"arn,omitempty" tf:"arn,omitempty"`

	CreatedTime *string `json:"createdTime,omitempty" tf:"created_time,omitempty"`

	TagsAll map[string]*string `json:"tagsAll,omitempty" tf:"tags_all,omitempty"`
}

type PortfolioParameters struct {

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Required
	ProviderName *string `json:"providerName" tf:"provider_name,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +terrajet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`

	// +kubebuilder:validation:Optional
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

// PortfolioSpec defines the desired state of Portfolio
type PortfolioSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     PortfolioParameters `json:"forProvider"`
}

// PortfolioStatus defines the observed state of Portfolio.
type PortfolioStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        PortfolioObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Portfolio is the Schema for the Portfolios API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tfaws}
type Portfolio struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              PortfolioSpec   `json:"spec"`
	Status            PortfolioStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// PortfolioList contains a list of Portfolios
type PortfolioList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Portfolio `json:"items"`
}

// Repository type metadata.
var (
	PortfolioKind             = "Portfolio"
	PortfolioGroupKind        = schema.GroupKind{Group: Group, Kind: PortfolioKind}.String()
	PortfolioKindAPIVersion   = PortfolioKind + "." + GroupVersion.String()
	PortfolioGroupVersionKind = GroupVersion.WithKind(PortfolioKind)
)

func init() {
	SchemeBuilder.Register(&Portfolio{}, &PortfolioList{})
}
