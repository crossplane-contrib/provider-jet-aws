/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

// +kubebuilder:object:generate=true
// +groupName=servicecatalog.aws.tf.crossplane.io
// +versionName=v1alpha1

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1alpha1 "github.com/crossplane-contrib/provider-tf-aws/apis/servicecatalog/v1alpha1"
)

type DefinitionObservation struct {
}

type DefinitionParameters struct {
	AssumeRole *string `json:"assumeRole,omitempty" tf:"assume_role"`

	Name string `json:"name" tf:"name"`

	Parameters *string `json:"parameters,omitempty" tf:"parameters"`

	Type *string `json:"type,omitempty" tf:"type"`

	Version string `json:"version" tf:"version"`
}

type ServicecatalogServiceActionObservation struct {
}

type ServicecatalogServiceActionParameters struct {
	AcceptLanguage *string `json:"acceptLanguage,omitempty" tf:"accept_language"`

	Definition []DefinitionParameters `json:"definition" tf:"definition"`

	Description *string `json:"description,omitempty" tf:"description"`

	Name string `json:"name" tf:"name"`
}

// ServicecatalogServiceActionSpec defines the desired state of ServicecatalogServiceAction
type ServicecatalogServiceActionSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       ServicecatalogServiceActionParameters `json:"forProvider"`
}

// ServicecatalogServiceActionStatus defines the observed state of ServicecatalogServiceAction.
type ServicecatalogServiceActionStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          ServicecatalogServiceActionObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ServicecatalogServiceAction is the Schema for the ServicecatalogServiceActions API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type ServicecatalogServiceAction struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ServicecatalogServiceActionSpec   `json:"spec"`
	Status            ServicecatalogServiceActionStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ServicecatalogServiceActionList contains a list of ServicecatalogServiceActions
type ServicecatalogServiceActionList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ServicecatalogServiceAction `json:"items"`
}

// Repository type metadata.
var (
	ServicecatalogServiceActionKind             = "ServicecatalogServiceAction"
	ServicecatalogServiceActionGroupKind        = schema.GroupKind{Group: v1alpha1.Group, Kind: ServicecatalogServiceActionKind}.String()
	ServicecatalogServiceActionKindAPIVersion   = ServicecatalogServiceActionKind + "." + v1alpha1.GroupVersion.String()
	ServicecatalogServiceActionGroupVersionKind = v1alpha1.GroupVersion.WithKind(ServicecatalogServiceActionKind)
)

func init() {
	v1alpha1.SchemeBuilder.Register(&ServicecatalogServiceAction{}, &ServicecatalogServiceActionList{})
}
