/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ProductPortfolioAssociationObservation struct {
}

type ProductPortfolioAssociationParameters struct {

	// +kubebuilder:validation:Optional
	AcceptLanguage *string `json:"acceptLanguage,omitempty" tf:"accept_language,omitempty"`

	// +kubebuilder:validation:Required
	PortfolioID *string `json:"portfolioId" tf:"portfolio_id,omitempty"`

	// +kubebuilder:validation:Required
	ProductID *string `json:"productId" tf:"product_id,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +terrajet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`

	// +kubebuilder:validation:Optional
	SourcePortfolioID *string `json:"sourcePortfolioId,omitempty" tf:"source_portfolio_id,omitempty"`
}

// ProductPortfolioAssociationSpec defines the desired state of ProductPortfolioAssociation
type ProductPortfolioAssociationSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ProductPortfolioAssociationParameters `json:"forProvider"`
}

// ProductPortfolioAssociationStatus defines the observed state of ProductPortfolioAssociation.
type ProductPortfolioAssociationStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ProductPortfolioAssociationObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ProductPortfolioAssociation is the Schema for the ProductPortfolioAssociations API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tfaws}
type ProductPortfolioAssociation struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ProductPortfolioAssociationSpec   `json:"spec"`
	Status            ProductPortfolioAssociationStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ProductPortfolioAssociationList contains a list of ProductPortfolioAssociations
type ProductPortfolioAssociationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ProductPortfolioAssociation `json:"items"`
}

// Repository type metadata.
var (
	ProductPortfolioAssociationKind             = "ProductPortfolioAssociation"
	ProductPortfolioAssociationGroupKind        = schema.GroupKind{Group: Group, Kind: ProductPortfolioAssociationKind}.String()
	ProductPortfolioAssociationKindAPIVersion   = ProductPortfolioAssociationKind + "." + GroupVersion.String()
	ProductPortfolioAssociationGroupVersionKind = GroupVersion.WithKind(ProductPortfolioAssociationKind)
)

func init() {
	SchemeBuilder.Register(&ProductPortfolioAssociation{}, &ProductPortfolioAssociationList{})
}
