/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type ResourceQueryObservation struct {
}

type ResourceQueryParameters struct {
	Query string `json:"query" tf:"query"`

	Type *string `json:"type,omitempty" tf:"type"`
}

type ResourcegroupsGroupObservation struct {
	ARN string `json:"arn" tf:"arn"`
}

type ResourcegroupsGroupParameters struct {
	Description *string `json:"description,omitempty" tf:"description"`

	Name string `json:"name" tf:"name"`

	ResourceQuery []ResourceQueryParameters `json:"resourceQuery" tf:"resource_query"`

	Tags map[string]string `json:"tags,omitempty" tf:"tags"`

	TagsAll map[string]string `json:"tagsAll,omitempty" tf:"tags_all"`
}

// ResourcegroupsGroupSpec defines the desired state of ResourcegroupsGroup
type ResourcegroupsGroupSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       ResourcegroupsGroupParameters `json:"forProvider"`
}

// ResourcegroupsGroupStatus defines the observed state of ResourcegroupsGroup.
type ResourcegroupsGroupStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          ResourcegroupsGroupObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ResourcegroupsGroup is the Schema for the ResourcegroupsGroups API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tfaws}
type ResourcegroupsGroup struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ResourcegroupsGroupSpec   `json:"spec"`
	Status            ResourcegroupsGroupStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ResourcegroupsGroupList contains a list of ResourcegroupsGroups
type ResourcegroupsGroupList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ResourcegroupsGroup `json:"items"`
}

// Repository type metadata.
var (
	ResourcegroupsGroupKind             = "ResourcegroupsGroup"
	ResourcegroupsGroupGroupKind        = schema.GroupKind{Group: Group, Kind: ResourcegroupsGroupKind}.String()
	ResourcegroupsGroupKindAPIVersion   = ResourcegroupsGroupKind + "." + GroupVersion.String()
	ResourcegroupsGroupGroupVersionKind = GroupVersion.WithKind(ResourcegroupsGroupKind)
)

func init() {
	SchemeBuilder.Register(&ResourcegroupsGroup{}, &ResourcegroupsGroupList{})
}
