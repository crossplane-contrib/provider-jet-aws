/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

// +kubebuilder:object:generate=true
// +groupName=datasync.aws.tf.crossplane.io
// +versionName=v1alpha1

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1alpha1 "github.com/crossplane-contrib/provider-tf-aws/apis/datasync/v1alpha1"
)

type DatasyncLocationFsxWindowsFileSystemObservation struct {
	Arn string `json:"arn" tf:"arn"`

	CreationTime string `json:"creationTime" tf:"creation_time"`

	Uri string `json:"uri" tf:"uri"`
}

type DatasyncLocationFsxWindowsFileSystemParameters struct {
	Domain *string `json:"domain,omitempty" tf:"domain"`

	FsxFilesystemArn string `json:"fsxFilesystemArn" tf:"fsx_filesystem_arn"`

	Password string `json:"password" tf:"password"`

	SecurityGroupArns []string `json:"securityGroupArns" tf:"security_group_arns"`

	Subdirectory *string `json:"subdirectory,omitempty" tf:"subdirectory"`

	Tags map[string]string `json:"tags,omitempty" tf:"tags"`

	TagsAll map[string]string `json:"tagsAll,omitempty" tf:"tags_all"`

	User string `json:"user" tf:"user"`
}

// DatasyncLocationFsxWindowsFileSystemSpec defines the desired state of DatasyncLocationFsxWindowsFileSystem
type DatasyncLocationFsxWindowsFileSystemSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       DatasyncLocationFsxWindowsFileSystemParameters `json:"forProvider"`
}

// DatasyncLocationFsxWindowsFileSystemStatus defines the observed state of DatasyncLocationFsxWindowsFileSystem.
type DatasyncLocationFsxWindowsFileSystemStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          DatasyncLocationFsxWindowsFileSystemObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// DatasyncLocationFsxWindowsFileSystem is the Schema for the DatasyncLocationFsxWindowsFileSystems API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type DatasyncLocationFsxWindowsFileSystem struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DatasyncLocationFsxWindowsFileSystemSpec   `json:"spec"`
	Status            DatasyncLocationFsxWindowsFileSystemStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DatasyncLocationFsxWindowsFileSystemList contains a list of DatasyncLocationFsxWindowsFileSystems
type DatasyncLocationFsxWindowsFileSystemList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DatasyncLocationFsxWindowsFileSystem `json:"items"`
}

// Repository type metadata.
var (
	DatasyncLocationFsxWindowsFileSystemKind             = "DatasyncLocationFsxWindowsFileSystem"
	DatasyncLocationFsxWindowsFileSystemGroupKind        = schema.GroupKind{Group: v1alpha1.Group, Kind: DatasyncLocationFsxWindowsFileSystemKind}.String()
	DatasyncLocationFsxWindowsFileSystemKindAPIVersion   = DatasyncLocationFsxWindowsFileSystemKind + "." + v1alpha1.GroupVersion.String()
	DatasyncLocationFsxWindowsFileSystemGroupVersionKind = v1alpha1.GroupVersion.WithKind(DatasyncLocationFsxWindowsFileSystemKind)
)

func init() {
	v1alpha1.SchemeBuilder.Register(&DatasyncLocationFsxWindowsFileSystem{}, &DatasyncLocationFsxWindowsFileSystemList{})
}
