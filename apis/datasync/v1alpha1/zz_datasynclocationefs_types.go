/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type DatasyncLocationEfsObservation struct {
	ARN string `json:"arn" tf:"arn"`

	URI string `json:"uri" tf:"uri"`
}

type DatasyncLocationEfsParameters struct {
	Ec2Config []Ec2ConfigParameters `json:"ec2Config" tf:"ec2_config"`

	EfsFileSystemARN string `json:"efsFileSystemARN" tf:"efs_file_system_arn"`

	Subdirectory *string `json:"subdirectory,omitempty" tf:"subdirectory"`

	Tags map[string]string `json:"tags,omitempty" tf:"tags"`

	TagsAll map[string]string `json:"tagsAll,omitempty" tf:"tags_all"`
}

type Ec2ConfigObservation struct {
}

type Ec2ConfigParameters struct {
	SecurityGroupArns []string `json:"securityGroupArns" tf:"security_group_arns"`

	SubnetARN string `json:"subnetARN" tf:"subnet_arn"`
}

// DatasyncLocationEfsSpec defines the desired state of DatasyncLocationEfs
type DatasyncLocationEfsSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       DatasyncLocationEfsParameters `json:"forProvider"`
}

// DatasyncLocationEfsStatus defines the observed state of DatasyncLocationEfs.
type DatasyncLocationEfsStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          DatasyncLocationEfsObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// DatasyncLocationEfs is the Schema for the DatasyncLocationEfss API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tfaws}
type DatasyncLocationEfs struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DatasyncLocationEfsSpec   `json:"spec"`
	Status            DatasyncLocationEfsStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DatasyncLocationEfsList contains a list of DatasyncLocationEfss
type DatasyncLocationEfsList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DatasyncLocationEfs `json:"items"`
}

// Repository type metadata.
var (
	DatasyncLocationEfsKind             = "DatasyncLocationEfs"
	DatasyncLocationEfsGroupKind        = schema.GroupKind{Group: Group, Kind: DatasyncLocationEfsKind}.String()
	DatasyncLocationEfsKindAPIVersion   = DatasyncLocationEfsKind + "." + GroupVersion.String()
	DatasyncLocationEfsGroupVersionKind = GroupVersion.WithKind(DatasyncLocationEfsKind)
)

func init() {
	SchemeBuilder.Register(&DatasyncLocationEfs{}, &DatasyncLocationEfsList{})
}
