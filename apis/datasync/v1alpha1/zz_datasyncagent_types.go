/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type DatasyncAgentObservation struct {
	ARN string `json:"arn" tf:"arn"`
}

type DatasyncAgentParameters struct {
	ActivationKey *string `json:"activationKey,omitempty" tf:"activation_key"`

	IPAddress *string `json:"ipAddress,omitempty" tf:"ip_address"`

	Name *string `json:"name,omitempty" tf:"name"`

	PrivateLinkEndpoint *string `json:"privateLinkEndpoint,omitempty" tf:"private_link_endpoint"`

	SecurityGroupArns []string `json:"securityGroupArns,omitempty" tf:"security_group_arns"`

	SubnetArns []string `json:"subnetArns,omitempty" tf:"subnet_arns"`

	Tags map[string]string `json:"tags,omitempty" tf:"tags"`

	TagsAll map[string]string `json:"tagsAll,omitempty" tf:"tags_all"`

	VPCEndpointID *string `json:"vpcEndpointID,omitempty" tf:"vpc_endpoint_id"`
}

// DatasyncAgentSpec defines the desired state of DatasyncAgent
type DatasyncAgentSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       DatasyncAgentParameters `json:"forProvider"`
}

// DatasyncAgentStatus defines the observed state of DatasyncAgent.
type DatasyncAgentStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          DatasyncAgentObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// DatasyncAgent is the Schema for the DatasyncAgents API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tfaws}
type DatasyncAgent struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DatasyncAgentSpec   `json:"spec"`
	Status            DatasyncAgentStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DatasyncAgentList contains a list of DatasyncAgents
type DatasyncAgentList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DatasyncAgent `json:"items"`
}

// Repository type metadata.
var (
	DatasyncAgentKind             = "DatasyncAgent"
	DatasyncAgentGroupKind        = schema.GroupKind{Group: Group, Kind: DatasyncAgentKind}.String()
	DatasyncAgentKindAPIVersion   = DatasyncAgentKind + "." + GroupVersion.String()
	DatasyncAgentGroupVersionKind = GroupVersion.WithKind(DatasyncAgentKind)
)

func init() {
	SchemeBuilder.Register(&DatasyncAgent{}, &DatasyncAgentList{})
}
