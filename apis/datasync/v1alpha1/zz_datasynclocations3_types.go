/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type DatasyncLocationS3Observation struct {
	ARN string `json:"arn" tf:"arn"`

	URI string `json:"uri" tf:"uri"`
}

type DatasyncLocationS3Parameters struct {
	AgentArns []string `json:"agentArns,omitempty" tf:"agent_arns"`

	S3BucketARN string `json:"s3BucketARN" tf:"s3_bucket_arn"`

	S3Config []S3ConfigParameters `json:"s3Config" tf:"s3_config"`

	S3StorageClass *string `json:"s3StorageClass,omitempty" tf:"s3_storage_class"`

	Subdirectory string `json:"subdirectory" tf:"subdirectory"`

	Tags map[string]string `json:"tags,omitempty" tf:"tags"`

	TagsAll map[string]string `json:"tagsAll,omitempty" tf:"tags_all"`
}

type S3ConfigObservation struct {
}

type S3ConfigParameters struct {
	BucketAccessRoleARN string `json:"bucketAccessRoleARN" tf:"bucket_access_role_arn"`
}

// DatasyncLocationS3Spec defines the desired state of DatasyncLocationS3
type DatasyncLocationS3Spec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       DatasyncLocationS3Parameters `json:"forProvider"`
}

// DatasyncLocationS3Status defines the observed state of DatasyncLocationS3.
type DatasyncLocationS3Status struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          DatasyncLocationS3Observation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// DatasyncLocationS3 is the Schema for the DatasyncLocationS3s API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tfaws}
type DatasyncLocationS3 struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DatasyncLocationS3Spec   `json:"spec"`
	Status            DatasyncLocationS3Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DatasyncLocationS3List contains a list of DatasyncLocationS3s
type DatasyncLocationS3List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DatasyncLocationS3 `json:"items"`
}

// Repository type metadata.
var (
	DatasyncLocationS3Kind             = "DatasyncLocationS3"
	DatasyncLocationS3GroupKind        = schema.GroupKind{Group: Group, Kind: DatasyncLocationS3Kind}.String()
	DatasyncLocationS3KindAPIVersion   = DatasyncLocationS3Kind + "." + GroupVersion.String()
	DatasyncLocationS3GroupVersionKind = GroupVersion.WithKind(DatasyncLocationS3Kind)
)

func init() {
	SchemeBuilder.Register(&DatasyncLocationS3{}, &DatasyncLocationS3List{})
}
