/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ActivityObservation struct {
	CreationDate *string `json:"creationDate,omitempty" tf:"creation_date,omitempty"`

	TagsAll map[string]*string `json:"tagsAll,omitempty" tf:"tags_all,omitempty"`
}

type ActivityParameters struct {

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +terrajet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`

	// +kubebuilder:validation:Optional
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

// ActivitySpec defines the desired state of Activity
type ActivitySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ActivityParameters `json:"forProvider"`
}

// ActivityStatus defines the observed state of Activity.
type ActivityStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ActivityObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Activity is the Schema for the Activitys API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tfaws}
type Activity struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ActivitySpec   `json:"spec"`
	Status            ActivityStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ActivityList contains a list of Activitys
type ActivityList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Activity `json:"items"`
}

// Repository type metadata.
var (
	ActivityKind             = "Activity"
	ActivityGroupKind        = schema.GroupKind{Group: Group, Kind: ActivityKind}.String()
	ActivityKindAPIVersion   = ActivityKind + "." + GroupVersion.String()
	ActivityGroupVersionKind = GroupVersion.WithKind(ActivityKind)
)

func init() {
	SchemeBuilder.Register(&Activity{}, &ActivityList{})
}
