/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type GameSessionQueueObservation struct {
	Arn *string `json:"arn,omitempty" tf:"arn,omitempty"`

	TagsAll map[string]*string `json:"tagsAll,omitempty" tf:"tags_all,omitempty"`
}

type GameSessionQueueParameters struct {

	// +kubebuilder:validation:Optional
	Destinations []*string `json:"destinations,omitempty" tf:"destinations,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	PlayerLatencyPolicy []PlayerLatencyPolicyParameters `json:"playerLatencyPolicy,omitempty" tf:"player_latency_policy,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +terrajet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`

	// +kubebuilder:validation:Optional
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// +kubebuilder:validation:Optional
	TimeoutInSeconds *int64 `json:"timeoutInSeconds,omitempty" tf:"timeout_in_seconds,omitempty"`
}

type PlayerLatencyPolicyObservation struct {
}

type PlayerLatencyPolicyParameters struct {

	// +kubebuilder:validation:Required
	MaximumIndividualPlayerLatencyMilliseconds *int64 `json:"maximumIndividualPlayerLatencyMilliseconds" tf:"maximum_individual_player_latency_milliseconds,omitempty"`

	// +kubebuilder:validation:Optional
	PolicyDurationSeconds *int64 `json:"policyDurationSeconds,omitempty" tf:"policy_duration_seconds,omitempty"`
}

// GameSessionQueueSpec defines the desired state of GameSessionQueue
type GameSessionQueueSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     GameSessionQueueParameters `json:"forProvider"`
}

// GameSessionQueueStatus defines the observed state of GameSessionQueue.
type GameSessionQueueStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        GameSessionQueueObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// GameSessionQueue is the Schema for the GameSessionQueues API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tfaws}
type GameSessionQueue struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              GameSessionQueueSpec   `json:"spec"`
	Status            GameSessionQueueStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// GameSessionQueueList contains a list of GameSessionQueues
type GameSessionQueueList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []GameSessionQueue `json:"items"`
}

// Repository type metadata.
var (
	GameSessionQueueKind             = "GameSessionQueue"
	GameSessionQueueGroupKind        = schema.GroupKind{Group: Group, Kind: GameSessionQueueKind}.String()
	GameSessionQueueKindAPIVersion   = GameSessionQueueKind + "." + GroupVersion.String()
	GameSessionQueueGroupVersionKind = GroupVersion.WithKind(GameSessionQueueKind)
)

func init() {
	SchemeBuilder.Register(&GameSessionQueue{}, &GameSessionQueueList{})
}
