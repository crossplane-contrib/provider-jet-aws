/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

// +kubebuilder:object:generate=true
// +groupName=db.aws.tf.crossplane.io
// +versionName=v1alpha1

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1alpha1 "github.com/crossplane-contrib/provider-tf-aws/apis/db/v1alpha1"
)

type AuthObservation struct {
}

type AuthParameters struct {
	AuthScheme *string `json:"authScheme,omitempty" tf:"auth_scheme"`

	Description *string `json:"description,omitempty" tf:"description"`

	IamAuth *string `json:"iamAuth,omitempty" tf:"iam_auth"`

	SecretArn *string `json:"secretArn,omitempty" tf:"secret_arn"`
}

type DbProxyObservation struct {
	Arn string `json:"arn" tf:"arn"`

	Endpoint string `json:"endpoint" tf:"endpoint"`
}

type DbProxyParameters struct {
	Auth []AuthParameters `json:"auth" tf:"auth"`

	DebugLogging *bool `json:"debugLogging,omitempty" tf:"debug_logging"`

	EngineFamily string `json:"engineFamily" tf:"engine_family"`

	IdleClientTimeout *int64 `json:"idleClientTimeout,omitempty" tf:"idle_client_timeout"`

	Name string `json:"name" tf:"name"`

	RequireTls *bool `json:"requireTls,omitempty" tf:"require_tls"`

	RoleArn string `json:"roleArn" tf:"role_arn"`

	Tags map[string]string `json:"tags,omitempty" tf:"tags"`

	TagsAll map[string]string `json:"tagsAll,omitempty" tf:"tags_all"`

	VpcSecurityGroupIds []string `json:"vpcSecurityGroupIds,omitempty" tf:"vpc_security_group_ids"`

	VpcSubnetIds []string `json:"vpcSubnetIds" tf:"vpc_subnet_ids"`
}

// DbProxySpec defines the desired state of DbProxy
type DbProxySpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       DbProxyParameters `json:"forProvider"`
}

// DbProxyStatus defines the observed state of DbProxy.
type DbProxyStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          DbProxyObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// DbProxy is the Schema for the DbProxys API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type DbProxy struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DbProxySpec   `json:"spec"`
	Status            DbProxyStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DbProxyList contains a list of DbProxys
type DbProxyList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DbProxy `json:"items"`
}

// Repository type metadata.
var (
	DbProxyKind             = "DbProxy"
	DbProxyGroupKind        = schema.GroupKind{Group: v1alpha1.Group, Kind: DbProxyKind}.String()
	DbProxyKindAPIVersion   = DbProxyKind + "." + v1alpha1.GroupVersion.String()
	DbProxyGroupVersionKind = v1alpha1.GroupVersion.WithKind(DbProxyKind)
)

func init() {
	v1alpha1.SchemeBuilder.Register(&DbProxy{}, &DbProxyList{})
}
