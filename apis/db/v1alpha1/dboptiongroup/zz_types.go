/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

// +kubebuilder:object:generate=true
// +groupName=db.aws.tf.crossplane.io
// +versionName=v1alpha1

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1alpha1 "github.com/crossplane-contrib/provider-tf-aws/apis/db/v1alpha1"
)

type DbOptionGroupObservation struct {
	Arn string `json:"arn" tf:"arn"`
}

type DbOptionGroupParameters struct {
	EngineName string `json:"engineName" tf:"engine_name"`

	MajorEngineVersion string `json:"majorEngineVersion" tf:"major_engine_version"`

	Name *string `json:"name,omitempty" tf:"name"`

	NamePrefix *string `json:"namePrefix,omitempty" tf:"name_prefix"`

	Option []OptionParameters `json:"option,omitempty" tf:"option"`

	OptionGroupDescription *string `json:"optionGroupDescription,omitempty" tf:"option_group_description"`

	Tags map[string]string `json:"tags,omitempty" tf:"tags"`

	TagsAll map[string]string `json:"tagsAll,omitempty" tf:"tags_all"`
}

type OptionObservation struct {
}

type OptionParameters struct {
	DbSecurityGroupMemberships []string `json:"dbSecurityGroupMemberships,omitempty" tf:"db_security_group_memberships"`

	OptionName string `json:"optionName" tf:"option_name"`

	OptionSettings []OptionSettingsParameters `json:"optionSettings,omitempty" tf:"option_settings"`

	Port *int64 `json:"port,omitempty" tf:"port"`

	Version *string `json:"version,omitempty" tf:"version"`

	VpcSecurityGroupMemberships []string `json:"vpcSecurityGroupMemberships,omitempty" tf:"vpc_security_group_memberships"`
}

type OptionSettingsObservation struct {
}

type OptionSettingsParameters struct {
	Name string `json:"name" tf:"name"`

	Value string `json:"value" tf:"value"`
}

// DbOptionGroupSpec defines the desired state of DbOptionGroup
type DbOptionGroupSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       DbOptionGroupParameters `json:"forProvider"`
}

// DbOptionGroupStatus defines the observed state of DbOptionGroup.
type DbOptionGroupStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          DbOptionGroupObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// DbOptionGroup is the Schema for the DbOptionGroups API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type DbOptionGroup struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DbOptionGroupSpec   `json:"spec"`
	Status            DbOptionGroupStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DbOptionGroupList contains a list of DbOptionGroups
type DbOptionGroupList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DbOptionGroup `json:"items"`
}

// Repository type metadata.
var (
	DbOptionGroupKind             = "DbOptionGroup"
	DbOptionGroupGroupKind        = schema.GroupKind{Group: v1alpha1.Group, Kind: DbOptionGroupKind}.String()
	DbOptionGroupKindAPIVersion   = DbOptionGroupKind + "." + v1alpha1.GroupVersion.String()
	DbOptionGroupGroupVersionKind = v1alpha1.GroupVersion.WithKind(DbOptionGroupKind)
)

func init() {
	v1alpha1.SchemeBuilder.Register(&DbOptionGroup{}, &DbOptionGroupList{})
}
