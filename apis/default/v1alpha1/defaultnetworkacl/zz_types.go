/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

// +kubebuilder:object:generate=true
// +groupName=default.aws.tf.crossplane.io
// +versionName=v1alpha1

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1alpha1 "github.com/crossplane-contrib/provider-tf-aws/apis/default/v1alpha1"
)

type DefaultNetworkAclObservation struct {
	Arn string `json:"arn" tf:"arn"`

	OwnerId string `json:"ownerId" tf:"owner_id"`

	VpcId string `json:"vpcId" tf:"vpc_id"`
}

type DefaultNetworkAclParameters struct {
	DefaultNetworkAclId string `json:"defaultNetworkAclId" tf:"default_network_acl_id"`

	Egress []EgressParameters `json:"egress,omitempty" tf:"egress"`

	Ingress []IngressParameters `json:"ingress,omitempty" tf:"ingress"`

	SubnetIds []string `json:"subnetIds,omitempty" tf:"subnet_ids"`

	Tags map[string]string `json:"tags,omitempty" tf:"tags"`

	TagsAll map[string]string `json:"tagsAll,omitempty" tf:"tags_all"`
}

type EgressObservation struct {
}

type EgressParameters struct {
	Action string `json:"action" tf:"action"`

	CidrBlock *string `json:"cidrBlock,omitempty" tf:"cidr_block"`

	FromPort int64 `json:"fromPort" tf:"from_port"`

	IcmpCode *int64 `json:"icmpCode,omitempty" tf:"icmp_code"`

	IcmpType *int64 `json:"icmpType,omitempty" tf:"icmp_type"`

	Ipv6CidrBlock *string `json:"ipv6CidrBlock,omitempty" tf:"ipv6_cidr_block"`

	Protocol string `json:"protocol" tf:"protocol"`

	RuleNo int64 `json:"ruleNo" tf:"rule_no"`

	ToPort int64 `json:"toPort" tf:"to_port"`
}

type IngressObservation struct {
}

type IngressParameters struct {
	Action string `json:"action" tf:"action"`

	CidrBlock *string `json:"cidrBlock,omitempty" tf:"cidr_block"`

	FromPort int64 `json:"fromPort" tf:"from_port"`

	IcmpCode *int64 `json:"icmpCode,omitempty" tf:"icmp_code"`

	IcmpType *int64 `json:"icmpType,omitempty" tf:"icmp_type"`

	Ipv6CidrBlock *string `json:"ipv6CidrBlock,omitempty" tf:"ipv6_cidr_block"`

	Protocol string `json:"protocol" tf:"protocol"`

	RuleNo int64 `json:"ruleNo" tf:"rule_no"`

	ToPort int64 `json:"toPort" tf:"to_port"`
}

// DefaultNetworkAclSpec defines the desired state of DefaultNetworkAcl
type DefaultNetworkAclSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       DefaultNetworkAclParameters `json:"forProvider"`
}

// DefaultNetworkAclStatus defines the observed state of DefaultNetworkAcl.
type DefaultNetworkAclStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          DefaultNetworkAclObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// DefaultNetworkAcl is the Schema for the DefaultNetworkAcls API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type DefaultNetworkAcl struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DefaultNetworkAclSpec   `json:"spec"`
	Status            DefaultNetworkAclStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DefaultNetworkAclList contains a list of DefaultNetworkAcls
type DefaultNetworkAclList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DefaultNetworkAcl `json:"items"`
}

// Repository type metadata.
var (
	DefaultNetworkAclKind             = "DefaultNetworkAcl"
	DefaultNetworkAclGroupKind        = schema.GroupKind{Group: v1alpha1.Group, Kind: DefaultNetworkAclKind}.String()
	DefaultNetworkAclKindAPIVersion   = DefaultNetworkAclKind + "." + v1alpha1.GroupVersion.String()
	DefaultNetworkAclGroupVersionKind = v1alpha1.GroupVersion.WithKind(DefaultNetworkAclKind)
)

func init() {
	v1alpha1.SchemeBuilder.Register(&DefaultNetworkAcl{}, &DefaultNetworkAclList{})
}
