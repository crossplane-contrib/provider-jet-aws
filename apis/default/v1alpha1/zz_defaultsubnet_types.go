/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type DefaultSubnetObservation struct {
	ARN string `json:"arn" tf:"arn"`

	AssignIPv6AddressOnCreation bool `json:"assignIPv6AddressOnCreation" tf:"assign_ipv6_address_on_creation"`

	AvailabilityZoneID string `json:"availabilityZoneID" tf:"availability_zone_id"`

	CidrBlock string `json:"cidrBlock" tf:"cidr_block"`

	IPv6CidrBlock string `json:"ipv6CidrBlock" tf:"ipv6_cidr_block"`

	IPv6CidrBlockAssociationID string `json:"ipv6CidrBlockAssociationID" tf:"ipv6_cidr_block_association_id"`

	OwnerID string `json:"ownerID" tf:"owner_id"`

	VPCID string `json:"vpcID" tf:"vpc_id"`
}

type DefaultSubnetParameters struct {
	AvailabilityZone string `json:"availabilityZone" tf:"availability_zone"`

	CustomerOwnedIPv4Pool *string `json:"customerOwnedIPv4Pool,omitempty" tf:"customer_owned_ipv4_pool"`

	MapCustomerOwnedIPOnLaunch *bool `json:"mapCustomerOwnedIPOnLaunch,omitempty" tf:"map_customer_owned_ip_on_launch"`

	MapPublicIPOnLaunch *bool `json:"mapPublicIPOnLaunch,omitempty" tf:"map_public_ip_on_launch"`

	OutpostARN *string `json:"outpostARN,omitempty" tf:"outpost_arn"`

	Tags map[string]string `json:"tags,omitempty" tf:"tags"`

	TagsAll map[string]string `json:"tagsAll,omitempty" tf:"tags_all"`
}

// DefaultSubnetSpec defines the desired state of DefaultSubnet
type DefaultSubnetSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       DefaultSubnetParameters `json:"forProvider"`
}

// DefaultSubnetStatus defines the observed state of DefaultSubnet.
type DefaultSubnetStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          DefaultSubnetObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// DefaultSubnet is the Schema for the DefaultSubnets API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tfaws}
type DefaultSubnet struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DefaultSubnetSpec   `json:"spec"`
	Status            DefaultSubnetStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DefaultSubnetList contains a list of DefaultSubnets
type DefaultSubnetList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DefaultSubnet `json:"items"`
}

// Repository type metadata.
var (
	DefaultSubnetKind             = "DefaultSubnet"
	DefaultSubnetGroupKind        = schema.GroupKind{Group: Group, Kind: DefaultSubnetKind}.String()
	DefaultSubnetKindAPIVersion   = DefaultSubnetKind + "." + GroupVersion.String()
	DefaultSubnetGroupVersionKind = GroupVersion.WithKind(DefaultSubnetKind)
)

func init() {
	SchemeBuilder.Register(&DefaultSubnet{}, &DefaultSubnetList{})
}
