/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type DefaultRouteTableObservation struct {
	ARN string `json:"arn" tf:"arn"`

	OwnerID string `json:"ownerID" tf:"owner_id"`

	VPCID string `json:"vpcID" tf:"vpc_id"`
}

type DefaultRouteTableParameters struct {
	DefaultRouteTableID string `json:"defaultRouteTableID" tf:"default_route_table_id"`

	PropagatingVgws []string `json:"propagatingVgws,omitempty" tf:"propagating_vgws"`

	Route []RouteParameters `json:"route,omitempty" tf:"route"`

	Tags map[string]string `json:"tags,omitempty" tf:"tags"`

	TagsAll map[string]string `json:"tagsAll,omitempty" tf:"tags_all"`
}

type RouteObservation struct {
}

type RouteParameters struct {
	CidrBlock *string `json:"cidrBlock,omitempty" tf:"cidr_block"`

	DestinationPrefixListID *string `json:"destinationPrefixListID,omitempty" tf:"destination_prefix_list_id"`

	EgressOnlyGatewayID *string `json:"egressOnlyGatewayID,omitempty" tf:"egress_only_gateway_id"`

	GatewayID *string `json:"gatewayID,omitempty" tf:"gateway_id"`

	IPv6CidrBlock *string `json:"ipv6CidrBlock,omitempty" tf:"ipv6_cidr_block"`

	InstanceID *string `json:"instanceID,omitempty" tf:"instance_id"`

	NatGatewayID *string `json:"natGatewayID,omitempty" tf:"nat_gateway_id"`

	NetworkInterfaceID *string `json:"networkInterfaceID,omitempty" tf:"network_interface_id"`

	TransitGatewayID *string `json:"transitGatewayID,omitempty" tf:"transit_gateway_id"`

	VPCEndpointID *string `json:"vpcEndpointID,omitempty" tf:"vpc_endpoint_id"`

	VPCPeeringConnectionID *string `json:"vpcPeeringConnectionID,omitempty" tf:"vpc_peering_connection_id"`
}

// DefaultRouteTableSpec defines the desired state of DefaultRouteTable
type DefaultRouteTableSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       DefaultRouteTableParameters `json:"forProvider"`
}

// DefaultRouteTableStatus defines the observed state of DefaultRouteTable.
type DefaultRouteTableStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          DefaultRouteTableObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// DefaultRouteTable is the Schema for the DefaultRouteTables API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tfaws}
type DefaultRouteTable struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DefaultRouteTableSpec   `json:"spec"`
	Status            DefaultRouteTableStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DefaultRouteTableList contains a list of DefaultRouteTables
type DefaultRouteTableList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DefaultRouteTable `json:"items"`
}

// Repository type metadata.
var (
	DefaultRouteTableKind             = "DefaultRouteTable"
	DefaultRouteTableGroupKind        = schema.GroupKind{Group: Group, Kind: DefaultRouteTableKind}.String()
	DefaultRouteTableKindAPIVersion   = DefaultRouteTableKind + "." + GroupVersion.String()
	DefaultRouteTableGroupVersionKind = GroupVersion.WithKind(DefaultRouteTableKind)
)

func init() {
	SchemeBuilder.Register(&DefaultRouteTable{}, &DefaultRouteTableList{})
}
