/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

// +kubebuilder:object:generate=true
// +groupName=default.aws.tf.crossplane.io
// +versionName=v1alpha1

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1alpha1 "github.com/crossplane-contrib/provider-tf-aws/apis/default/v1alpha1"
)

type DefaultVpcObservation struct {
	Arn string `json:"arn" tf:"arn"`

	AssignGeneratedIpv6CidrBlock bool `json:"assignGeneratedIpv6CidrBlock" tf:"assign_generated_ipv6_cidr_block"`

	CidrBlock string `json:"cidrBlock" tf:"cidr_block"`

	DefaultNetworkAclId string `json:"defaultNetworkAclId" tf:"default_network_acl_id"`

	DefaultRouteTableId string `json:"defaultRouteTableId" tf:"default_route_table_id"`

	DefaultSecurityGroupId string `json:"defaultSecurityGroupId" tf:"default_security_group_id"`

	DhcpOptionsId string `json:"dhcpOptionsId" tf:"dhcp_options_id"`

	InstanceTenancy string `json:"instanceTenancy" tf:"instance_tenancy"`

	Ipv6AssociationId string `json:"ipv6AssociationId" tf:"ipv6_association_id"`

	Ipv6CidrBlock string `json:"ipv6CidrBlock" tf:"ipv6_cidr_block"`

	MainRouteTableId string `json:"mainRouteTableId" tf:"main_route_table_id"`

	OwnerId string `json:"ownerId" tf:"owner_id"`
}

type DefaultVpcParameters struct {
	EnableClassiclink *bool `json:"enableClassiclink,omitempty" tf:"enable_classiclink"`

	EnableClassiclinkDnsSupport *bool `json:"enableClassiclinkDnsSupport,omitempty" tf:"enable_classiclink_dns_support"`

	EnableDnsHostnames *bool `json:"enableDnsHostnames,omitempty" tf:"enable_dns_hostnames"`

	EnableDnsSupport *bool `json:"enableDnsSupport,omitempty" tf:"enable_dns_support"`

	Tags map[string]string `json:"tags,omitempty" tf:"tags"`

	TagsAll map[string]string `json:"tagsAll,omitempty" tf:"tags_all"`
}

// DefaultVpcSpec defines the desired state of DefaultVpc
type DefaultVpcSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       DefaultVpcParameters `json:"forProvider"`
}

// DefaultVpcStatus defines the observed state of DefaultVpc.
type DefaultVpcStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          DefaultVpcObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// DefaultVpc is the Schema for the DefaultVpcs API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type DefaultVpc struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DefaultVpcSpec   `json:"spec"`
	Status            DefaultVpcStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DefaultVpcList contains a list of DefaultVpcs
type DefaultVpcList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DefaultVpc `json:"items"`
}

// Repository type metadata.
var (
	DefaultVpcKind             = "DefaultVpc"
	DefaultVpcGroupKind        = schema.GroupKind{Group: v1alpha1.Group, Kind: DefaultVpcKind}.String()
	DefaultVpcKindAPIVersion   = DefaultVpcKind + "." + v1alpha1.GroupVersion.String()
	DefaultVpcGroupVersionKind = v1alpha1.GroupVersion.WithKind(DefaultVpcKind)
)

func init() {
	v1alpha1.SchemeBuilder.Register(&DefaultVpc{}, &DefaultVpcList{})
}
