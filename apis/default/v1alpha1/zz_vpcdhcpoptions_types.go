/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type VpcDhcpOptionsObservation struct {
	Arn *string `json:"arn,omitempty" tf:"arn,omitempty"`

	DomainName *string `json:"domainName,omitempty" tf:"domain_name,omitempty"`

	DomainNameServers *string `json:"domainNameServers,omitempty" tf:"domain_name_servers,omitempty"`

	NtpServers *string `json:"ntpServers,omitempty" tf:"ntp_servers,omitempty"`

	TagsAll map[string]*string `json:"tagsAll,omitempty" tf:"tags_all,omitempty"`
}

type VpcDhcpOptionsParameters struct {

	// +kubebuilder:validation:Optional
	NetbiosNameServers []*string `json:"netbiosNameServers,omitempty" tf:"netbios_name_servers,omitempty"`

	// +kubebuilder:validation:Optional
	NetbiosNodeType *string `json:"netbiosNodeType,omitempty" tf:"netbios_node_type,omitempty"`

	// +kubebuilder:validation:Optional
	OwnerID *string `json:"ownerId,omitempty" tf:"owner_id,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +terrajet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`

	// +kubebuilder:validation:Optional
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

// VpcDhcpOptionsSpec defines the desired state of VpcDhcpOptions
type VpcDhcpOptionsSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     VpcDhcpOptionsParameters `json:"forProvider"`
}

// VpcDhcpOptionsStatus defines the observed state of VpcDhcpOptions.
type VpcDhcpOptionsStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        VpcDhcpOptionsObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// VpcDhcpOptions is the Schema for the VpcDhcpOptionss API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tfaws}
type VpcDhcpOptions struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              VpcDhcpOptionsSpec   `json:"spec"`
	Status            VpcDhcpOptionsStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// VpcDhcpOptionsList contains a list of VpcDhcpOptionss
type VpcDhcpOptionsList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []VpcDhcpOptions `json:"items"`
}

// Repository type metadata.
var (
	VpcDhcpOptionsKind             = "VpcDhcpOptions"
	VpcDhcpOptionsGroupKind        = schema.GroupKind{Group: Group, Kind: VpcDhcpOptionsKind}.String()
	VpcDhcpOptionsKindAPIVersion   = VpcDhcpOptionsKind + "." + GroupVersion.String()
	VpcDhcpOptionsGroupVersionKind = GroupVersion.WithKind(VpcDhcpOptionsKind)
)

func init() {
	SchemeBuilder.Register(&VpcDhcpOptions{}, &VpcDhcpOptionsList{})
}
