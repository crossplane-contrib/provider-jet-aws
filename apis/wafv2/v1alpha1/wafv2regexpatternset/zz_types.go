/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

// +kubebuilder:object:generate=true
// +groupName=wafv2.aws.tf.crossplane.io
// +versionName=v1alpha1

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1alpha1 "github.com/crossplane-contrib/provider-tf-aws/apis/wafv2/v1alpha1"
)

type RegularExpressionObservation struct {
}

type RegularExpressionParameters struct {
	RegexString string `json:"regexString" tf:"regex_string"`
}

type Wafv2RegexPatternSetObservation struct {
	Arn string `json:"arn" tf:"arn"`

	LockToken string `json:"lockToken" tf:"lock_token"`
}

type Wafv2RegexPatternSetParameters struct {
	Description *string `json:"description,omitempty" tf:"description"`

	Name string `json:"name" tf:"name"`

	RegularExpression []RegularExpressionParameters `json:"regularExpression,omitempty" tf:"regular_expression"`

	Scope string `json:"scope" tf:"scope"`

	Tags map[string]string `json:"tags,omitempty" tf:"tags"`

	TagsAll map[string]string `json:"tagsAll,omitempty" tf:"tags_all"`
}

// Wafv2RegexPatternSetSpec defines the desired state of Wafv2RegexPatternSet
type Wafv2RegexPatternSetSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       Wafv2RegexPatternSetParameters `json:"forProvider"`
}

// Wafv2RegexPatternSetStatus defines the observed state of Wafv2RegexPatternSet.
type Wafv2RegexPatternSetStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          Wafv2RegexPatternSetObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Wafv2RegexPatternSet is the Schema for the Wafv2RegexPatternSets API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type Wafv2RegexPatternSet struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              Wafv2RegexPatternSetSpec   `json:"spec"`
	Status            Wafv2RegexPatternSetStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// Wafv2RegexPatternSetList contains a list of Wafv2RegexPatternSets
type Wafv2RegexPatternSetList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Wafv2RegexPatternSet `json:"items"`
}

// Repository type metadata.
var (
	Wafv2RegexPatternSetKind             = "Wafv2RegexPatternSet"
	Wafv2RegexPatternSetGroupKind        = schema.GroupKind{Group: v1alpha1.Group, Kind: Wafv2RegexPatternSetKind}.String()
	Wafv2RegexPatternSetKindAPIVersion   = Wafv2RegexPatternSetKind + "." + v1alpha1.GroupVersion.String()
	Wafv2RegexPatternSetGroupVersionKind = v1alpha1.GroupVersion.WithKind(Wafv2RegexPatternSetKind)
)

func init() {
	v1alpha1.SchemeBuilder.Register(&Wafv2RegexPatternSet{}, &Wafv2RegexPatternSetList{})
}
