/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

// +kubebuilder:object:generate=true
// +groupName=wafv2.aws.tf.crossplane.io
// +versionName=v1alpha1

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1alpha1 "github.com/crossplane-contrib/provider-tf-aws/apis/wafv2/v1alpha1"
)

type ActionObservation struct {
}

type ActionParameters struct {
	Allow []AllowParameters `json:"allow,omitempty" tf:"allow"`

	Block []BlockParameters `json:"block,omitempty" tf:"block"`

	Count []CountParameters `json:"count,omitempty" tf:"count"`
}

type AllQueryArgumentsObservation struct {
}

type AllQueryArgumentsParameters struct {
}

type AllowObservation struct {
}

type AllowParameters struct {
	CustomRequestHandling []CustomRequestHandlingParameters `json:"customRequestHandling,omitempty" tf:"custom_request_handling"`
}

type AndStatementObservation struct {
}

type AndStatementParameters struct {
	Statement []StatementParameters `json:"statement" tf:"statement"`
}

type BlockObservation struct {
}

type BlockParameters struct {
	CustomResponse []CustomResponseParameters `json:"customResponse,omitempty" tf:"custom_response"`
}

type BodyObservation struct {
}

type BodyParameters struct {
}

type ByteMatchStatementObservation struct {
}

type ByteMatchStatementParameters struct {
	FieldToMatch []FieldToMatchParameters `json:"fieldToMatch,omitempty" tf:"field_to_match"`

	PositionalConstraint string `json:"positionalConstraint" tf:"positional_constraint"`

	SearchString string `json:"searchString" tf:"search_string"`

	TextTransformation []TextTransformationParameters `json:"textTransformation" tf:"text_transformation"`
}

type CountObservation struct {
}

type CountParameters struct {
	CustomRequestHandling []CustomRequestHandlingParameters `json:"customRequestHandling,omitempty" tf:"custom_request_handling"`
}

type CustomRequestHandlingObservation struct {
}

type CustomRequestHandlingParameters struct {
	InsertHeader []InsertHeaderParameters `json:"insertHeader" tf:"insert_header"`
}

type CustomResponseObservation struct {
}

type CustomResponseParameters struct {
	ResponseCode int64 `json:"responseCode" tf:"response_code"`

	ResponseHeader []ResponseHeaderParameters `json:"responseHeader,omitempty" tf:"response_header"`
}

type DefaultActionObservation struct {
}

type DefaultActionParameters struct {
	Allow []AllowParameters `json:"allow,omitempty" tf:"allow"`

	Block []BlockParameters `json:"block,omitempty" tf:"block"`
}

type ExcludedRuleObservation struct {
}

type ExcludedRuleParameters struct {
	Name string `json:"name" tf:"name"`
}

type FieldToMatchObservation struct {
}

type FieldToMatchParameters struct {
	AllQueryArguments []AllQueryArgumentsParameters `json:"allQueryArguments,omitempty" tf:"all_query_arguments"`

	Body []BodyParameters `json:"body,omitempty" tf:"body"`

	Method []MethodParameters `json:"method,omitempty" tf:"method"`

	QueryString []QueryStringParameters `json:"queryString,omitempty" tf:"query_string"`

	SingleHeader []SingleHeaderParameters `json:"singleHeader,omitempty" tf:"single_header"`

	SingleQueryArgument []SingleQueryArgumentParameters `json:"singleQueryArgument,omitempty" tf:"single_query_argument"`

	UriPath []UriPathParameters `json:"uriPath,omitempty" tf:"uri_path"`
}

type ForwardedIpConfigObservation struct {
}

type ForwardedIpConfigParameters struct {
	FallbackBehavior string `json:"fallbackBehavior" tf:"fallback_behavior"`

	HeaderName string `json:"headerName" tf:"header_name"`
}

type GeoMatchStatementObservation struct {
}

type GeoMatchStatementParameters struct {
	CountryCodes []string `json:"countryCodes" tf:"country_codes"`

	ForwardedIpConfig []ForwardedIpConfigParameters `json:"forwardedIpConfig,omitempty" tf:"forwarded_ip_config"`
}

type InsertHeaderObservation struct {
}

type InsertHeaderParameters struct {
	Name string `json:"name" tf:"name"`

	Value string `json:"value" tf:"value"`
}

type IpSetForwardedIpConfigObservation struct {
}

type IpSetForwardedIpConfigParameters struct {
	FallbackBehavior string `json:"fallbackBehavior" tf:"fallback_behavior"`

	HeaderName string `json:"headerName" tf:"header_name"`

	Position string `json:"position" tf:"position"`
}

type IpSetReferenceStatementObservation struct {
}

type IpSetReferenceStatementParameters struct {
	Arn string `json:"arn" tf:"arn"`

	IpSetForwardedIpConfig []IpSetForwardedIpConfigParameters `json:"ipSetForwardedIpConfig,omitempty" tf:"ip_set_forwarded_ip_config"`
}

type ManagedRuleGroupStatementObservation struct {
}

type ManagedRuleGroupStatementParameters struct {
	ExcludedRule []ExcludedRuleParameters `json:"excludedRule,omitempty" tf:"excluded_rule"`

	Name string `json:"name" tf:"name"`

	ScopeDownStatement []ScopeDownStatementParameters `json:"scopeDownStatement,omitempty" tf:"scope_down_statement"`

	VendorName string `json:"vendorName" tf:"vendor_name"`
}

type MethodObservation struct {
}

type MethodParameters struct {
}

type NoneObservation struct {
}

type NoneParameters struct {
}

type NotStatementObservation struct {
}

type NotStatementParameters struct {
	Statement []StatementParameters `json:"statement" tf:"statement"`
}

type OrStatementObservation struct {
}

type OrStatementParameters struct {
	Statement []StatementParameters `json:"statement" tf:"statement"`
}

type OverrideActionObservation struct {
}

type OverrideActionParameters struct {
	Count []CountParameters `json:"count,omitempty" tf:"count"`

	None []NoneParameters `json:"none,omitempty" tf:"none"`
}

type QueryStringObservation struct {
}

type QueryStringParameters struct {
}

type RateBasedStatementObservation struct {
}

type RateBasedStatementParameters struct {
	AggregateKeyType *string `json:"aggregateKeyType,omitempty" tf:"aggregate_key_type"`

	ForwardedIpConfig []ForwardedIpConfigParameters `json:"forwardedIpConfig,omitempty" tf:"forwarded_ip_config"`

	Limit int64 `json:"limit" tf:"limit"`

	ScopeDownStatement []ScopeDownStatementParameters `json:"scopeDownStatement,omitempty" tf:"scope_down_statement"`
}

type RegexPatternSetReferenceStatementObservation struct {
}

type RegexPatternSetReferenceStatementParameters struct {
	Arn string `json:"arn" tf:"arn"`

	FieldToMatch []FieldToMatchParameters `json:"fieldToMatch,omitempty" tf:"field_to_match"`

	TextTransformation []TextTransformationParameters `json:"textTransformation" tf:"text_transformation"`
}

type ResponseHeaderObservation struct {
}

type ResponseHeaderParameters struct {
	Name string `json:"name" tf:"name"`

	Value string `json:"value" tf:"value"`
}

type RuleGroupReferenceStatementObservation struct {
}

type RuleGroupReferenceStatementParameters struct {
	Arn string `json:"arn" tf:"arn"`

	ExcludedRule []ExcludedRuleParameters `json:"excludedRule,omitempty" tf:"excluded_rule"`
}

type RuleObservation struct {
}

type RuleParameters struct {
	Action []ActionParameters `json:"action,omitempty" tf:"action"`

	Name string `json:"name" tf:"name"`

	OverrideAction []OverrideActionParameters `json:"overrideAction,omitempty" tf:"override_action"`

	Priority int64 `json:"priority" tf:"priority"`

	Statement []StatementParameters `json:"statement" tf:"statement"`

	VisibilityConfig []VisibilityConfigParameters `json:"visibilityConfig" tf:"visibility_config"`
}

type ScopeDownStatementObservation struct {
}

type ScopeDownStatementParameters struct {
	AndStatement []AndStatementParameters `json:"andStatement,omitempty" tf:"and_statement"`

	ByteMatchStatement []ByteMatchStatementParameters `json:"byteMatchStatement,omitempty" tf:"byte_match_statement"`

	GeoMatchStatement []GeoMatchStatementParameters `json:"geoMatchStatement,omitempty" tf:"geo_match_statement"`

	IpSetReferenceStatement []IpSetReferenceStatementParameters `json:"ipSetReferenceStatement,omitempty" tf:"ip_set_reference_statement"`

	NotStatement []NotStatementParameters `json:"notStatement,omitempty" tf:"not_statement"`

	OrStatement []OrStatementParameters `json:"orStatement,omitempty" tf:"or_statement"`

	RegexPatternSetReferenceStatement []RegexPatternSetReferenceStatementParameters `json:"regexPatternSetReferenceStatement,omitempty" tf:"regex_pattern_set_reference_statement"`

	SizeConstraintStatement []SizeConstraintStatementParameters `json:"sizeConstraintStatement,omitempty" tf:"size_constraint_statement"`

	SqliMatchStatement []SqliMatchStatementParameters `json:"sqliMatchStatement,omitempty" tf:"sqli_match_statement"`

	XssMatchStatement []XssMatchStatementParameters `json:"xssMatchStatement,omitempty" tf:"xss_match_statement"`
}

type SingleHeaderObservation struct {
}

type SingleHeaderParameters struct {
	Name string `json:"name" tf:"name"`
}

type SingleQueryArgumentObservation struct {
}

type SingleQueryArgumentParameters struct {
	Name string `json:"name" tf:"name"`
}

type SizeConstraintStatementObservation struct {
}

type SizeConstraintStatementParameters struct {
	ComparisonOperator string `json:"comparisonOperator" tf:"comparison_operator"`

	FieldToMatch []FieldToMatchParameters `json:"fieldToMatch,omitempty" tf:"field_to_match"`

	Size int64 `json:"size" tf:"size"`

	TextTransformation []TextTransformationParameters `json:"textTransformation" tf:"text_transformation"`
}

type SqliMatchStatementObservation struct {
}

type SqliMatchStatementParameters struct {
	FieldToMatch []FieldToMatchParameters `json:"fieldToMatch,omitempty" tf:"field_to_match"`

	TextTransformation []TextTransformationParameters `json:"textTransformation" tf:"text_transformation"`
}

type StatementObservation struct {
}

type StatementParameters struct {
	AndStatement []AndStatementParameters `json:"andStatement,omitempty" tf:"and_statement"`

	ByteMatchStatement []ByteMatchStatementParameters `json:"byteMatchStatement,omitempty" tf:"byte_match_statement"`

	GeoMatchStatement []GeoMatchStatementParameters `json:"geoMatchStatement,omitempty" tf:"geo_match_statement"`

	IpSetReferenceStatement []IpSetReferenceStatementParameters `json:"ipSetReferenceStatement,omitempty" tf:"ip_set_reference_statement"`

	ManagedRuleGroupStatement []ManagedRuleGroupStatementParameters `json:"managedRuleGroupStatement,omitempty" tf:"managed_rule_group_statement"`

	NotStatement []NotStatementParameters `json:"notStatement,omitempty" tf:"not_statement"`

	OrStatement []OrStatementParameters `json:"orStatement,omitempty" tf:"or_statement"`

	RateBasedStatement []RateBasedStatementParameters `json:"rateBasedStatement,omitempty" tf:"rate_based_statement"`

	RegexPatternSetReferenceStatement []RegexPatternSetReferenceStatementParameters `json:"regexPatternSetReferenceStatement,omitempty" tf:"regex_pattern_set_reference_statement"`

	RuleGroupReferenceStatement []RuleGroupReferenceStatementParameters `json:"ruleGroupReferenceStatement,omitempty" tf:"rule_group_reference_statement"`

	SizeConstraintStatement []SizeConstraintStatementParameters `json:"sizeConstraintStatement,omitempty" tf:"size_constraint_statement"`

	SqliMatchStatement []SqliMatchStatementParameters `json:"sqliMatchStatement,omitempty" tf:"sqli_match_statement"`

	XssMatchStatement []XssMatchStatementParameters `json:"xssMatchStatement,omitempty" tf:"xss_match_statement"`
}

type TextTransformationObservation struct {
}

type TextTransformationParameters struct {
	Priority int64 `json:"priority" tf:"priority"`

	Type string `json:"type" tf:"type"`
}

type UriPathObservation struct {
}

type UriPathParameters struct {
}

type VisibilityConfigObservation struct {
}

type VisibilityConfigParameters struct {
	CloudwatchMetricsEnabled bool `json:"cloudwatchMetricsEnabled" tf:"cloudwatch_metrics_enabled"`

	MetricName string `json:"metricName" tf:"metric_name"`

	SampledRequestsEnabled bool `json:"sampledRequestsEnabled" tf:"sampled_requests_enabled"`
}

type Wafv2WebAclObservation struct {
	Arn string `json:"arn" tf:"arn"`

	Capacity int64 `json:"capacity" tf:"capacity"`

	LockToken string `json:"lockToken" tf:"lock_token"`
}

type Wafv2WebAclParameters struct {
	DefaultAction []DefaultActionParameters `json:"defaultAction" tf:"default_action"`

	Description *string `json:"description,omitempty" tf:"description"`

	Name string `json:"name" tf:"name"`

	Rule []RuleParameters `json:"rule,omitempty" tf:"rule"`

	Scope string `json:"scope" tf:"scope"`

	Tags map[string]string `json:"tags,omitempty" tf:"tags"`

	TagsAll map[string]string `json:"tagsAll,omitempty" tf:"tags_all"`

	VisibilityConfig []VisibilityConfigParameters `json:"visibilityConfig" tf:"visibility_config"`
}

type XssMatchStatementObservation struct {
}

type XssMatchStatementParameters struct {
	FieldToMatch []FieldToMatchParameters `json:"fieldToMatch,omitempty" tf:"field_to_match"`

	TextTransformation []TextTransformationParameters `json:"textTransformation" tf:"text_transformation"`
}

// Wafv2WebAclSpec defines the desired state of Wafv2WebAcl
type Wafv2WebAclSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       Wafv2WebAclParameters `json:"forProvider"`
}

// Wafv2WebAclStatus defines the observed state of Wafv2WebAcl.
type Wafv2WebAclStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          Wafv2WebAclObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Wafv2WebAcl is the Schema for the Wafv2WebAcls API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type Wafv2WebAcl struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              Wafv2WebAclSpec   `json:"spec"`
	Status            Wafv2WebAclStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// Wafv2WebAclList contains a list of Wafv2WebAcls
type Wafv2WebAclList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Wafv2WebAcl `json:"items"`
}

// Repository type metadata.
var (
	Wafv2WebAclKind             = "Wafv2WebAcl"
	Wafv2WebAclGroupKind        = schema.GroupKind{Group: v1alpha1.Group, Kind: Wafv2WebAclKind}.String()
	Wafv2WebAclKindAPIVersion   = Wafv2WebAclKind + "." + v1alpha1.GroupVersion.String()
	Wafv2WebAclGroupVersionKind = v1alpha1.GroupVersion.WithKind(Wafv2WebAclKind)
)

func init() {
	v1alpha1.SchemeBuilder.Register(&Wafv2WebAcl{}, &Wafv2WebAclList{})
}
