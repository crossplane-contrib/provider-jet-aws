/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

// +kubebuilder:object:generate=true
// +groupName=transfer.aws.tf.crossplane.io
// +versionName=v1alpha1

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1alpha1 "github.com/crossplane-contrib/provider-tf-aws/apis/transfer/v1alpha1"
)

type HomeDirectoryMappingsObservation struct {
}

type HomeDirectoryMappingsParameters struct {
	Entry string `json:"entry" tf:"entry"`

	Target string `json:"target" tf:"target"`
}

type PosixProfileObservation struct {
}

type PosixProfileParameters struct {
	Gid int64 `json:"gid" tf:"gid"`

	SecondaryGids []int64 `json:"secondaryGids,omitempty" tf:"secondary_gids"`

	Uid int64 `json:"uid" tf:"uid"`
}

type TransferUserObservation struct {
	Arn string `json:"arn" tf:"arn"`
}

type TransferUserParameters struct {
	HomeDirectory *string `json:"homeDirectory,omitempty" tf:"home_directory"`

	HomeDirectoryMappings []HomeDirectoryMappingsParameters `json:"homeDirectoryMappings,omitempty" tf:"home_directory_mappings"`

	HomeDirectoryType *string `json:"homeDirectoryType,omitempty" tf:"home_directory_type"`

	Policy *string `json:"policy,omitempty" tf:"policy"`

	PosixProfile []PosixProfileParameters `json:"posixProfile,omitempty" tf:"posix_profile"`

	Role string `json:"role" tf:"role"`

	ServerId string `json:"serverId" tf:"server_id"`

	Tags map[string]string `json:"tags,omitempty" tf:"tags"`

	TagsAll map[string]string `json:"tagsAll,omitempty" tf:"tags_all"`

	UserName string `json:"userName" tf:"user_name"`
}

// TransferUserSpec defines the desired state of TransferUser
type TransferUserSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       TransferUserParameters `json:"forProvider"`
}

// TransferUserStatus defines the observed state of TransferUser.
type TransferUserStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          TransferUserObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// TransferUser is the Schema for the TransferUsers API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type TransferUser struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              TransferUserSpec   `json:"spec"`
	Status            TransferUserStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// TransferUserList contains a list of TransferUsers
type TransferUserList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []TransferUser `json:"items"`
}

// Repository type metadata.
var (
	TransferUserKind             = "TransferUser"
	TransferUserGroupKind        = schema.GroupKind{Group: v1alpha1.Group, Kind: TransferUserKind}.String()
	TransferUserKindAPIVersion   = TransferUserKind + "." + v1alpha1.GroupVersion.String()
	TransferUserGroupVersionKind = v1alpha1.GroupVersion.WithKind(TransferUserKind)
)

func init() {
	v1alpha1.SchemeBuilder.Register(&TransferUser{}, &TransferUserList{})
}
