/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

// +kubebuilder:object:generate=true
// +groupName=transfer.aws.tf.crossplane.io
// +versionName=v1alpha1

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1alpha1 "github.com/crossplane-contrib/provider-tf-aws/apis/transfer/v1alpha1"
)

type EndpointDetailsObservation struct {
}

type EndpointDetailsParameters struct {
	AddressAllocationIds []string `json:"addressAllocationIds,omitempty" tf:"address_allocation_ids"`

	SecurityGroupIds []string `json:"securityGroupIds,omitempty" tf:"security_group_ids"`

	SubnetIds []string `json:"subnetIds,omitempty" tf:"subnet_ids"`

	VpcEndpointId *string `json:"vpcEndpointId,omitempty" tf:"vpc_endpoint_id"`

	VpcId *string `json:"vpcId,omitempty" tf:"vpc_id"`
}

type TransferServerObservation struct {
	Arn string `json:"arn" tf:"arn"`

	Endpoint string `json:"endpoint" tf:"endpoint"`

	HostKeyFingerprint string `json:"hostKeyFingerprint" tf:"host_key_fingerprint"`
}

type TransferServerParameters struct {
	Certificate *string `json:"certificate,omitempty" tf:"certificate"`

	Domain *string `json:"domain,omitempty" tf:"domain"`

	EndpointDetails []EndpointDetailsParameters `json:"endpointDetails,omitempty" tf:"endpoint_details"`

	EndpointType *string `json:"endpointType,omitempty" tf:"endpoint_type"`

	ForceDestroy *bool `json:"forceDestroy,omitempty" tf:"force_destroy"`

	HostKey *string `json:"hostKey,omitempty" tf:"host_key"`

	IdentityProviderType *string `json:"identityProviderType,omitempty" tf:"identity_provider_type"`

	InvocationRole *string `json:"invocationRole,omitempty" tf:"invocation_role"`

	LoggingRole *string `json:"loggingRole,omitempty" tf:"logging_role"`

	Protocols []string `json:"protocols,omitempty" tf:"protocols"`

	SecurityPolicyName *string `json:"securityPolicyName,omitempty" tf:"security_policy_name"`

	Tags map[string]string `json:"tags,omitempty" tf:"tags"`

	TagsAll map[string]string `json:"tagsAll,omitempty" tf:"tags_all"`

	Url *string `json:"url,omitempty" tf:"url"`
}

// TransferServerSpec defines the desired state of TransferServer
type TransferServerSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       TransferServerParameters `json:"forProvider"`
}

// TransferServerStatus defines the observed state of TransferServer.
type TransferServerStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          TransferServerObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// TransferServer is the Schema for the TransferServers API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type TransferServer struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              TransferServerSpec   `json:"spec"`
	Status            TransferServerStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// TransferServerList contains a list of TransferServers
type TransferServerList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []TransferServer `json:"items"`
}

// Repository type metadata.
var (
	TransferServerKind             = "TransferServer"
	TransferServerGroupKind        = schema.GroupKind{Group: v1alpha1.Group, Kind: TransferServerKind}.String()
	TransferServerKindAPIVersion   = TransferServerKind + "." + v1alpha1.GroupVersion.String()
	TransferServerGroupVersionKind = v1alpha1.GroupVersion.WithKind(TransferServerKind)
)

func init() {
	v1alpha1.SchemeBuilder.Register(&TransferServer{}, &TransferServerList{})
}
