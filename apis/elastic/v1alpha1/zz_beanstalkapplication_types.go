/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AppversionLifecycleObservation struct {
}

type AppversionLifecycleParameters struct {

	// +kubebuilder:validation:Optional
	DeleteSourceFromS3 *bool `json:"deleteSourceFromS3,omitempty" tf:"delete_source_from_s3,omitempty"`

	// +kubebuilder:validation:Optional
	MaxAgeInDays *int64 `json:"maxAgeInDays,omitempty" tf:"max_age_in_days,omitempty"`

	// +kubebuilder:validation:Optional
	MaxCount *int64 `json:"maxCount,omitempty" tf:"max_count,omitempty"`

	// +kubebuilder:validation:Required
	ServiceRole *string `json:"serviceRole" tf:"service_role,omitempty"`
}

type BeanstalkApplicationObservation struct {
	Arn *string `json:"arn,omitempty" tf:"arn,omitempty"`

	TagsAll map[string]*string `json:"tagsAll,omitempty" tf:"tags_all,omitempty"`
}

type BeanstalkApplicationParameters struct {

	// +kubebuilder:validation:Optional
	AppversionLifecycle []AppversionLifecycleParameters `json:"appversionLifecycle,omitempty" tf:"appversion_lifecycle,omitempty"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +terrajet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`

	// +kubebuilder:validation:Optional
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

// BeanstalkApplicationSpec defines the desired state of BeanstalkApplication
type BeanstalkApplicationSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     BeanstalkApplicationParameters `json:"forProvider"`
}

// BeanstalkApplicationStatus defines the observed state of BeanstalkApplication.
type BeanstalkApplicationStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        BeanstalkApplicationObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// BeanstalkApplication is the Schema for the BeanstalkApplications API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tfaws}
type BeanstalkApplication struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              BeanstalkApplicationSpec   `json:"spec"`
	Status            BeanstalkApplicationStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// BeanstalkApplicationList contains a list of BeanstalkApplications
type BeanstalkApplicationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []BeanstalkApplication `json:"items"`
}

// Repository type metadata.
var (
	BeanstalkApplicationKind             = "BeanstalkApplication"
	BeanstalkApplicationGroupKind        = schema.GroupKind{Group: Group, Kind: BeanstalkApplicationKind}.String()
	BeanstalkApplicationKindAPIVersion   = BeanstalkApplicationKind + "." + GroupVersion.String()
	BeanstalkApplicationGroupVersionKind = GroupVersion.WithKind(BeanstalkApplicationKind)
)

func init() {
	SchemeBuilder.Register(&BeanstalkApplication{}, &BeanstalkApplicationList{})
}
