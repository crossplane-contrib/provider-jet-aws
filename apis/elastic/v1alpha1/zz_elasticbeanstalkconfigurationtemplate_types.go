/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type ElasticBeanstalkConfigurationTemplateObservation struct {
}

type ElasticBeanstalkConfigurationTemplateParameters struct {
	Application string `json:"application" tf:"application"`

	Description *string `json:"description,omitempty" tf:"description"`

	EnvironmentID *string `json:"environmentID,omitempty" tf:"environment_id"`

	Name string `json:"name" tf:"name"`

	Setting []SettingParameters `json:"setting,omitempty" tf:"setting"`

	SolutionStackName *string `json:"solutionStackName,omitempty" tf:"solution_stack_name"`
}

type SettingObservation struct {
}

type SettingParameters struct {
	Name string `json:"name" tf:"name"`

	Namespace string `json:"namespace" tf:"namespace"`

	Resource *string `json:"resource,omitempty" tf:"resource"`

	Value string `json:"value" tf:"value"`
}

// ElasticBeanstalkConfigurationTemplateSpec defines the desired state of ElasticBeanstalkConfigurationTemplate
type ElasticBeanstalkConfigurationTemplateSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       ElasticBeanstalkConfigurationTemplateParameters `json:"forProvider"`
}

// ElasticBeanstalkConfigurationTemplateStatus defines the observed state of ElasticBeanstalkConfigurationTemplate.
type ElasticBeanstalkConfigurationTemplateStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          ElasticBeanstalkConfigurationTemplateObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ElasticBeanstalkConfigurationTemplate is the Schema for the ElasticBeanstalkConfigurationTemplates API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tfaws}
type ElasticBeanstalkConfigurationTemplate struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ElasticBeanstalkConfigurationTemplateSpec   `json:"spec"`
	Status            ElasticBeanstalkConfigurationTemplateStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ElasticBeanstalkConfigurationTemplateList contains a list of ElasticBeanstalkConfigurationTemplates
type ElasticBeanstalkConfigurationTemplateList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ElasticBeanstalkConfigurationTemplate `json:"items"`
}

// Repository type metadata.
var (
	ElasticBeanstalkConfigurationTemplateKind             = "ElasticBeanstalkConfigurationTemplate"
	ElasticBeanstalkConfigurationTemplateGroupKind        = schema.GroupKind{Group: Group, Kind: ElasticBeanstalkConfigurationTemplateKind}.String()
	ElasticBeanstalkConfigurationTemplateKindAPIVersion   = ElasticBeanstalkConfigurationTemplateKind + "." + GroupVersion.String()
	ElasticBeanstalkConfigurationTemplateGroupVersionKind = GroupVersion.WithKind(ElasticBeanstalkConfigurationTemplateKind)
)

func init() {
	SchemeBuilder.Register(&ElasticBeanstalkConfigurationTemplate{}, &ElasticBeanstalkConfigurationTemplateList{})
}
