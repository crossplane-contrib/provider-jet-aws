/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type BeanstalkConfigurationTemplateObservation struct {
}

type BeanstalkConfigurationTemplateParameters struct {

	// +kubebuilder:validation:Required
	Application *string `json:"application" tf:"application,omitempty"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Optional
	EnvironmentID *string `json:"environmentId,omitempty" tf:"environment_id,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +terrajet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`

	// +kubebuilder:validation:Optional
	Setting []SettingParameters `json:"setting,omitempty" tf:"setting,omitempty"`

	// +kubebuilder:validation:Optional
	SolutionStackName *string `json:"solutionStackName,omitempty" tf:"solution_stack_name,omitempty"`
}

type SettingObservation struct {
}

type SettingParameters struct {

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Required
	Namespace *string `json:"namespace" tf:"namespace,omitempty"`

	// +kubebuilder:validation:Optional
	Resource *string `json:"resource,omitempty" tf:"resource,omitempty"`

	// +kubebuilder:validation:Required
	Value *string `json:"value" tf:"value,omitempty"`
}

// BeanstalkConfigurationTemplateSpec defines the desired state of BeanstalkConfigurationTemplate
type BeanstalkConfigurationTemplateSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     BeanstalkConfigurationTemplateParameters `json:"forProvider"`
}

// BeanstalkConfigurationTemplateStatus defines the observed state of BeanstalkConfigurationTemplate.
type BeanstalkConfigurationTemplateStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        BeanstalkConfigurationTemplateObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// BeanstalkConfigurationTemplate is the Schema for the BeanstalkConfigurationTemplates API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tfaws}
type BeanstalkConfigurationTemplate struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              BeanstalkConfigurationTemplateSpec   `json:"spec"`
	Status            BeanstalkConfigurationTemplateStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// BeanstalkConfigurationTemplateList contains a list of BeanstalkConfigurationTemplates
type BeanstalkConfigurationTemplateList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []BeanstalkConfigurationTemplate `json:"items"`
}

// Repository type metadata.
var (
	BeanstalkConfigurationTemplateKind             = "BeanstalkConfigurationTemplate"
	BeanstalkConfigurationTemplateGroupKind        = schema.GroupKind{Group: Group, Kind: BeanstalkConfigurationTemplateKind}.String()
	BeanstalkConfigurationTemplateKindAPIVersion   = BeanstalkConfigurationTemplateKind + "." + GroupVersion.String()
	BeanstalkConfigurationTemplateGroupVersionKind = GroupVersion.WithKind(BeanstalkConfigurationTemplateKind)
)

func init() {
	SchemeBuilder.Register(&BeanstalkConfigurationTemplate{}, &BeanstalkConfigurationTemplateList{})
}
