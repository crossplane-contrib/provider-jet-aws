/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

// +kubebuilder:object:generate=true
// +groupName=quicksight.aws.tf.crossplane.io
// +versionName=v1alpha1

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1alpha1 "github.com/crossplane-contrib/provider-tf-aws/apis/quicksight/v1alpha1"
)

type QuicksightUserObservation struct {
	Arn string `json:"arn" tf:"arn"`
}

type QuicksightUserParameters struct {
	AwsAccountId *string `json:"awsAccountId,omitempty" tf:"aws_account_id"`

	Email string `json:"email" tf:"email"`

	IamArn *string `json:"iamArn,omitempty" tf:"iam_arn"`

	IdentityType string `json:"identityType" tf:"identity_type"`

	Namespace *string `json:"namespace,omitempty" tf:"namespace"`

	SessionName *string `json:"sessionName,omitempty" tf:"session_name"`

	UserName *string `json:"userName,omitempty" tf:"user_name"`

	UserRole string `json:"userRole" tf:"user_role"`
}

// QuicksightUserSpec defines the desired state of QuicksightUser
type QuicksightUserSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       QuicksightUserParameters `json:"forProvider"`
}

// QuicksightUserStatus defines the observed state of QuicksightUser.
type QuicksightUserStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          QuicksightUserObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// QuicksightUser is the Schema for the QuicksightUsers API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type QuicksightUser struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              QuicksightUserSpec   `json:"spec"`
	Status            QuicksightUserStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// QuicksightUserList contains a list of QuicksightUsers
type QuicksightUserList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []QuicksightUser `json:"items"`
}

// Repository type metadata.
var (
	QuicksightUserKind             = "QuicksightUser"
	QuicksightUserGroupKind        = schema.GroupKind{Group: v1alpha1.Group, Kind: QuicksightUserKind}.String()
	QuicksightUserKindAPIVersion   = QuicksightUserKind + "." + v1alpha1.GroupVersion.String()
	QuicksightUserGroupVersionKind = v1alpha1.GroupVersion.WithKind(QuicksightUserKind)
)

func init() {
	v1alpha1.SchemeBuilder.Register(&QuicksightUser{}, &QuicksightUserList{})
}
