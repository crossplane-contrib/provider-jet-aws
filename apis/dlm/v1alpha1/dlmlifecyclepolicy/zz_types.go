/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

// +kubebuilder:object:generate=true
// +groupName=dlm.aws.tf.crossplane.io
// +versionName=v1alpha1

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1alpha1 "github.com/crossplane-contrib/provider-tf-aws/apis/dlm/v1alpha1"
)

type CreateRuleObservation struct {
}

type CreateRuleParameters struct {
	Interval int64 `json:"interval" tf:"interval"`

	IntervalUnit *string `json:"intervalUnit,omitempty" tf:"interval_unit"`

	Times []string `json:"times,omitempty" tf:"times"`
}

type DlmLifecyclePolicyObservation struct {
	Arn string `json:"arn" tf:"arn"`
}

type DlmLifecyclePolicyParameters struct {
	Description string `json:"description" tf:"description"`

	ExecutionRoleArn string `json:"executionRoleArn" tf:"execution_role_arn"`

	PolicyDetails []PolicyDetailsParameters `json:"policyDetails" tf:"policy_details"`

	State *string `json:"state,omitempty" tf:"state"`

	Tags map[string]string `json:"tags,omitempty" tf:"tags"`

	TagsAll map[string]string `json:"tagsAll,omitempty" tf:"tags_all"`
}

type PolicyDetailsObservation struct {
}

type PolicyDetailsParameters struct {
	ResourceTypes []string `json:"resourceTypes" tf:"resource_types"`

	Schedule []ScheduleParameters `json:"schedule" tf:"schedule"`

	TargetTags map[string]string `json:"targetTags" tf:"target_tags"`
}

type RetainRuleObservation struct {
}

type RetainRuleParameters struct {
	Count int64 `json:"count" tf:"count"`
}

type ScheduleObservation struct {
}

type ScheduleParameters struct {
	CopyTags *bool `json:"copyTags,omitempty" tf:"copy_tags"`

	CreateRule []CreateRuleParameters `json:"createRule" tf:"create_rule"`

	Name string `json:"name" tf:"name"`

	RetainRule []RetainRuleParameters `json:"retainRule" tf:"retain_rule"`

	TagsToAdd map[string]string `json:"tagsToAdd,omitempty" tf:"tags_to_add"`
}

// DlmLifecyclePolicySpec defines the desired state of DlmLifecyclePolicy
type DlmLifecyclePolicySpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       DlmLifecyclePolicyParameters `json:"forProvider"`
}

// DlmLifecyclePolicyStatus defines the observed state of DlmLifecyclePolicy.
type DlmLifecyclePolicyStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          DlmLifecyclePolicyObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// DlmLifecyclePolicy is the Schema for the DlmLifecyclePolicys API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type DlmLifecyclePolicy struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DlmLifecyclePolicySpec   `json:"spec"`
	Status            DlmLifecyclePolicyStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DlmLifecyclePolicyList contains a list of DlmLifecyclePolicys
type DlmLifecyclePolicyList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DlmLifecyclePolicy `json:"items"`
}

// Repository type metadata.
var (
	DlmLifecyclePolicyKind             = "DlmLifecyclePolicy"
	DlmLifecyclePolicyGroupKind        = schema.GroupKind{Group: v1alpha1.Group, Kind: DlmLifecyclePolicyKind}.String()
	DlmLifecyclePolicyKindAPIVersion   = DlmLifecyclePolicyKind + "." + v1alpha1.GroupVersion.String()
	DlmLifecyclePolicyGroupVersionKind = v1alpha1.GroupVersion.WithKind(DlmLifecyclePolicyKind)
)

func init() {
	v1alpha1.SchemeBuilder.Register(&DlmLifecyclePolicy{}, &DlmLifecyclePolicyList{})
}
