/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

// +kubebuilder:object:generate=true
// +groupName=appmesh.aws.tf.crossplane.io
// +versionName=v1alpha1

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1alpha1 "github.com/crossplane-contrib/provider-tf-aws/apis/appmesh/v1alpha1"
)

type ActionObservation struct {
}

type ActionParameters struct {
	WeightedTarget []WeightedTargetParameters `json:"weightedTarget" tf:"weighted_target"`
}

type AppmeshRouteObservation struct {
	Arn string `json:"arn" tf:"arn"`

	CreatedDate string `json:"createdDate" tf:"created_date"`

	LastUpdatedDate string `json:"lastUpdatedDate" tf:"last_updated_date"`

	ResourceOwner string `json:"resourceOwner" tf:"resource_owner"`
}

type AppmeshRouteParameters struct {
	MeshName string `json:"meshName" tf:"mesh_name"`

	MeshOwner *string `json:"meshOwner,omitempty" tf:"mesh_owner"`

	Name string `json:"name" tf:"name"`

	Spec []SpecParameters `json:"spec" tf:"spec"`

	Tags map[string]string `json:"tags,omitempty" tf:"tags"`

	TagsAll map[string]string `json:"tagsAll,omitempty" tf:"tags_all"`

	VirtualRouterName string `json:"virtualRouterName" tf:"virtual_router_name"`
}

type GrpcRouteObservation struct {
}

type GrpcRouteParameters struct {
	Action []ActionParameters `json:"action" tf:"action"`

	Match []MatchParameters `json:"match,omitempty" tf:"match"`

	RetryPolicy []RetryPolicyParameters `json:"retryPolicy,omitempty" tf:"retry_policy"`

	Timeout []TimeoutParameters `json:"timeout,omitempty" tf:"timeout"`
}

type Http2RouteObservation struct {
}

type Http2RouteParameters struct {
	Action []ActionParameters `json:"action" tf:"action"`

	Match []MatchParameters `json:"match" tf:"match"`

	RetryPolicy []RetryPolicyParameters `json:"retryPolicy,omitempty" tf:"retry_policy"`

	Timeout []TimeoutParameters `json:"timeout,omitempty" tf:"timeout"`
}

type HttpRouteObservation struct {
}

type HttpRouteParameters struct {
	Action []ActionParameters `json:"action" tf:"action"`

	Match []MatchParameters `json:"match" tf:"match"`

	RetryPolicy []RetryPolicyParameters `json:"retryPolicy,omitempty" tf:"retry_policy"`

	Timeout []TimeoutParameters `json:"timeout,omitempty" tf:"timeout"`
}

type IdleObservation struct {
}

type IdleParameters struct {
	Unit string `json:"unit" tf:"unit"`

	Value int64 `json:"value" tf:"value"`
}

type MatchObservation struct {
}

type MatchParameters struct {
	Metadata []MetadataParameters `json:"metadata,omitempty" tf:"metadata"`

	MethodName *string `json:"methodName,omitempty" tf:"method_name"`

	Prefix *string `json:"prefix,omitempty" tf:"prefix"`

	ServiceName *string `json:"serviceName,omitempty" tf:"service_name"`
}

type MetadataObservation struct {
}

type MetadataParameters struct {
	Invert *bool `json:"invert,omitempty" tf:"invert"`

	Match []MatchParameters `json:"match,omitempty" tf:"match"`

	Name string `json:"name" tf:"name"`
}

type PerRequestObservation struct {
}

type PerRequestParameters struct {
	Unit string `json:"unit" tf:"unit"`

	Value int64 `json:"value" tf:"value"`
}

type PerRetryTimeoutObservation struct {
}

type PerRetryTimeoutParameters struct {
	Unit string `json:"unit" tf:"unit"`

	Value int64 `json:"value" tf:"value"`
}

type RangeObservation struct {
}

type RangeParameters struct {
	End int64 `json:"end" tf:"end"`

	Start int64 `json:"start" tf:"start"`
}

type RetryPolicyObservation struct {
}

type RetryPolicyParameters struct {
	GrpcRetryEvents []string `json:"grpcRetryEvents,omitempty" tf:"grpc_retry_events"`

	HttpRetryEvents []string `json:"httpRetryEvents,omitempty" tf:"http_retry_events"`

	MaxRetries int64 `json:"maxRetries" tf:"max_retries"`

	PerRetryTimeout []PerRetryTimeoutParameters `json:"perRetryTimeout" tf:"per_retry_timeout"`

	TcpRetryEvents []string `json:"tcpRetryEvents,omitempty" tf:"tcp_retry_events"`
}

type SpecObservation struct {
}

type SpecParameters struct {
	GrpcRoute []GrpcRouteParameters `json:"grpcRoute,omitempty" tf:"grpc_route"`

	Http2Route []Http2RouteParameters `json:"http2Route,omitempty" tf:"http2_route"`

	HttpRoute []HttpRouteParameters `json:"httpRoute,omitempty" tf:"http_route"`

	Priority *int64 `json:"priority,omitempty" tf:"priority"`

	TcpRoute []TcpRouteParameters `json:"tcpRoute,omitempty" tf:"tcp_route"`
}

type TcpRouteObservation struct {
}

type TcpRouteParameters struct {
	Action []ActionParameters `json:"action" tf:"action"`

	Timeout []TimeoutParameters `json:"timeout,omitempty" tf:"timeout"`
}

type TimeoutObservation struct {
}

type TimeoutParameters struct {
	Idle []IdleParameters `json:"idle,omitempty" tf:"idle"`

	PerRequest []PerRequestParameters `json:"perRequest,omitempty" tf:"per_request"`
}

type WeightedTargetObservation struct {
}

type WeightedTargetParameters struct {
	VirtualNode string `json:"virtualNode" tf:"virtual_node"`

	Weight int64 `json:"weight" tf:"weight"`
}

// AppmeshRouteSpec defines the desired state of AppmeshRoute
type AppmeshRouteSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       AppmeshRouteParameters `json:"forProvider"`
}

// AppmeshRouteStatus defines the observed state of AppmeshRoute.
type AppmeshRouteStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          AppmeshRouteObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// AppmeshRoute is the Schema for the AppmeshRoutes API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type AppmeshRoute struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              AppmeshRouteSpec   `json:"spec"`
	Status            AppmeshRouteStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// AppmeshRouteList contains a list of AppmeshRoutes
type AppmeshRouteList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []AppmeshRoute `json:"items"`
}

// Repository type metadata.
var (
	AppmeshRouteKind             = "AppmeshRoute"
	AppmeshRouteGroupKind        = schema.GroupKind{Group: v1alpha1.Group, Kind: AppmeshRouteKind}.String()
	AppmeshRouteKindAPIVersion   = AppmeshRouteKind + "." + v1alpha1.GroupVersion.String()
	AppmeshRouteGroupVersionKind = v1alpha1.GroupVersion.WithKind(AppmeshRouteKind)
)

func init() {
	v1alpha1.SchemeBuilder.Register(&AppmeshRoute{}, &AppmeshRouteList{})
}
