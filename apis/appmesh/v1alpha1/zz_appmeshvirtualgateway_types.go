/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type AccessLogFileObservation struct {
}

type AccessLogFileParameters struct {
	Path string `json:"path" tf:"path"`
}

type AccessLogObservation struct {
}

type AccessLogParameters struct {
	File []AccessLogFileParameters `json:"file,omitempty" tf:"file"`
}

type AcmObservation struct {
}

type AcmParameters struct {
	CertificateAuthorityArns []string `json:"certificateAuthorityArns" tf:"certificate_authority_arns"`
}

type AppmeshVirtualGatewayObservation struct {
	ARN string `json:"arn" tf:"arn"`

	CreatedDate string `json:"createdDate" tf:"created_date"`

	LastUpdatedDate string `json:"lastUpdatedDate" tf:"last_updated_date"`

	ResourceOwner string `json:"resourceOwner" tf:"resource_owner"`
}

type AppmeshVirtualGatewayParameters struct {
	MeshName string `json:"meshName" tf:"mesh_name"`

	MeshOwner *string `json:"meshOwner,omitempty" tf:"mesh_owner"`

	Name string `json:"name" tf:"name"`

	Spec []AppmeshVirtualGatewaySpecParameters `json:"spec" tf:"spec"`

	Tags map[string]string `json:"tags,omitempty" tf:"tags"`

	TagsAll map[string]string `json:"tagsAll,omitempty" tf:"tags_all"`
}

type AppmeshVirtualGatewaySpecObservation struct {
}

type AppmeshVirtualGatewaySpecParameters struct {
	BackendDefaults []BackendDefaultsParameters `json:"backendDefaults,omitempty" tf:"backend_defaults"`

	Listener []ListenerParameters `json:"listener" tf:"listener"`

	Logging []LoggingParameters `json:"logging,omitempty" tf:"logging"`
}

type BackendDefaultsObservation struct {
}

type BackendDefaultsParameters struct {
	ClientPolicy []ClientPolicyParameters `json:"clientPolicy,omitempty" tf:"client_policy"`
}

type CertificateAcmObservation struct {
}

type CertificateAcmParameters struct {
	CertificateARN string `json:"certificateARN" tf:"certificate_arn"`
}

type CertificateFileObservation struct {
}

type CertificateFileParameters struct {
	CertificateChain string `json:"certificateChain" tf:"certificate_chain"`

	PrivateKey string `json:"privateKey" tf:"private_key"`
}

type CertificateObservation struct {
}

type CertificateParameters struct {
	File []FileParameters `json:"file,omitempty" tf:"file"`

	Sds []SdsParameters `json:"sds,omitempty" tf:"sds"`
}

type CertificateSdsObservation struct {
}

type CertificateSdsParameters struct {
	SecretName string `json:"secretName" tf:"secret_name"`
}

type ClientPolicyObservation struct {
}

type ClientPolicyParameters struct {
	TLS []TLSParameters `json:"tls,omitempty" tf:"tls"`
}

type ConnectionPoolObservation struct {
}

type ConnectionPoolParameters struct {
	Grpc []GrpcParameters `json:"grpc,omitempty" tf:"grpc"`

	HTTP []HTTPParameters `json:"http,omitempty" tf:"http"`

	Http2 []Http2Parameters `json:"http2,omitempty" tf:"http2"`
}

type FileObservation struct {
}

type FileParameters struct {
	CertificateChain string `json:"certificateChain" tf:"certificate_chain"`

	PrivateKey string `json:"privateKey" tf:"private_key"`
}

type GrpcObservation struct {
}

type GrpcParameters struct {
	MaxRequests int64 `json:"maxRequests" tf:"max_requests"`
}

type HTTPObservation struct {
}

type HTTPParameters struct {
	MaxConnections int64 `json:"maxConnections" tf:"max_connections"`

	MaxPendingRequests *int64 `json:"maxPendingRequests,omitempty" tf:"max_pending_requests"`
}

type HealthCheckObservation struct {
}

type HealthCheckParameters struct {
	HealthyThreshold int64 `json:"healthyThreshold" tf:"healthy_threshold"`

	IntervalMillis int64 `json:"intervalMillis" tf:"interval_millis"`

	Path *string `json:"path,omitempty" tf:"path"`

	Port *int64 `json:"port,omitempty" tf:"port"`

	Protocol string `json:"protocol" tf:"protocol"`

	TimeoutMillis int64 `json:"timeoutMillis" tf:"timeout_millis"`

	UnhealthyThreshold int64 `json:"unhealthyThreshold" tf:"unhealthy_threshold"`
}

type Http2Observation struct {
}

type Http2Parameters struct {
	MaxRequests int64 `json:"maxRequests" tf:"max_requests"`
}

type ListenerObservation struct {
}

type ListenerParameters struct {
	ConnectionPool []ConnectionPoolParameters `json:"connectionPool,omitempty" tf:"connection_pool"`

	HealthCheck []HealthCheckParameters `json:"healthCheck,omitempty" tf:"health_check"`

	PortMapping []PortMappingParameters `json:"portMapping" tf:"port_mapping"`

	TLS []ListenerTLSParameters `json:"tls,omitempty" tf:"tls"`
}

type ListenerTLSObservation struct {
}

type ListenerTLSParameters struct {
	Certificate []TLSCertificateParameters `json:"certificate" tf:"certificate"`

	Mode string `json:"mode" tf:"mode"`

	Validation []TLSValidationParameters `json:"validation,omitempty" tf:"validation"`
}

type LoggingObservation struct {
}

type LoggingParameters struct {
	AccessLog []AccessLogParameters `json:"accessLog,omitempty" tf:"access_log"`
}

type PortMappingObservation struct {
}

type PortMappingParameters struct {
	Port int64 `json:"port" tf:"port"`

	Protocol string `json:"protocol" tf:"protocol"`
}

type SdsObservation struct {
}

type SdsParameters struct {
	SecretName string `json:"secretName" tf:"secret_name"`
}

type SubjectAlternativeNamesMatchObservation struct {
}

type SubjectAlternativeNamesMatchParameters struct {
	Exact []string `json:"exact" tf:"exact"`
}

type SubjectAlternativeNamesObservation struct {
}

type SubjectAlternativeNamesParameters struct {
	Match []SubjectAlternativeNamesMatchParameters `json:"match" tf:"match"`
}

type TLSCertificateObservation struct {
}

type TLSCertificateParameters struct {
	Acm []CertificateAcmParameters `json:"acm,omitempty" tf:"acm"`

	File []CertificateFileParameters `json:"file,omitempty" tf:"file"`

	Sds []CertificateSdsParameters `json:"sds,omitempty" tf:"sds"`
}

type TLSObservation struct {
}

type TLSParameters struct {
	Certificate []CertificateParameters `json:"certificate,omitempty" tf:"certificate"`

	Enforce *bool `json:"enforce,omitempty" tf:"enforce"`

	Ports []int64 `json:"ports,omitempty" tf:"ports"`

	Validation []ValidationParameters `json:"validation" tf:"validation"`
}

type TLSValidationObservation struct {
}

type TLSValidationParameters struct {
	SubjectAlternativeNames []ValidationSubjectAlternativeNamesParameters `json:"subjectAlternativeNames,omitempty" tf:"subject_alternative_names"`

	Trust []ValidationTrustParameters `json:"trust" tf:"trust"`
}

type TrustFileObservation struct {
}

type TrustFileParameters struct {
	CertificateChain string `json:"certificateChain" tf:"certificate_chain"`
}

type TrustObservation struct {
}

type TrustParameters struct {
	Acm []AcmParameters `json:"acm,omitempty" tf:"acm"`

	File []TrustFileParameters `json:"file,omitempty" tf:"file"`

	Sds []TrustSdsParameters `json:"sds,omitempty" tf:"sds"`
}

type TrustSdsObservation struct {
}

type TrustSdsParameters struct {
	SecretName string `json:"secretName" tf:"secret_name"`
}

type ValidationObservation struct {
}

type ValidationParameters struct {
	SubjectAlternativeNames []SubjectAlternativeNamesParameters `json:"subjectAlternativeNames,omitempty" tf:"subject_alternative_names"`

	Trust []TrustParameters `json:"trust" tf:"trust"`
}

type ValidationSubjectAlternativeNamesMatchObservation struct {
}

type ValidationSubjectAlternativeNamesMatchParameters struct {
	Exact []string `json:"exact" tf:"exact"`
}

type ValidationSubjectAlternativeNamesObservation struct {
}

type ValidationSubjectAlternativeNamesParameters struct {
	Match []ValidationSubjectAlternativeNamesMatchParameters `json:"match" tf:"match"`
}

type ValidationTrustFileObservation struct {
}

type ValidationTrustFileParameters struct {
	CertificateChain string `json:"certificateChain" tf:"certificate_chain"`
}

type ValidationTrustObservation struct {
}

type ValidationTrustParameters struct {
	File []ValidationTrustFileParameters `json:"file,omitempty" tf:"file"`

	Sds []ValidationTrustSdsParameters `json:"sds,omitempty" tf:"sds"`
}

type ValidationTrustSdsObservation struct {
}

type ValidationTrustSdsParameters struct {
	SecretName string `json:"secretName" tf:"secret_name"`
}

// AppmeshVirtualGatewaySpec defines the desired state of AppmeshVirtualGateway
type AppmeshVirtualGatewaySpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       AppmeshVirtualGatewayParameters `json:"forProvider"`
}

// AppmeshVirtualGatewayStatus defines the observed state of AppmeshVirtualGateway.
type AppmeshVirtualGatewayStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          AppmeshVirtualGatewayObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// AppmeshVirtualGateway is the Schema for the AppmeshVirtualGateways API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tfaws}
type AppmeshVirtualGateway struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              AppmeshVirtualGatewaySpec   `json:"spec"`
	Status            AppmeshVirtualGatewayStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// AppmeshVirtualGatewayList contains a list of AppmeshVirtualGateways
type AppmeshVirtualGatewayList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []AppmeshVirtualGateway `json:"items"`
}

// Repository type metadata.
var (
	AppmeshVirtualGatewayKind             = "AppmeshVirtualGateway"
	AppmeshVirtualGatewayGroupKind        = schema.GroupKind{Group: Group, Kind: AppmeshVirtualGatewayKind}.String()
	AppmeshVirtualGatewayKindAPIVersion   = AppmeshVirtualGatewayKind + "." + GroupVersion.String()
	AppmeshVirtualGatewayGroupVersionKind = GroupVersion.WithKind(AppmeshVirtualGatewayKind)
)

func init() {
	SchemeBuilder.Register(&AppmeshVirtualGateway{}, &AppmeshVirtualGatewayList{})
}
