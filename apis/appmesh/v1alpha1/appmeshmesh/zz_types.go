/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

// +kubebuilder:object:generate=true
// +groupName=appmesh.aws.tf.crossplane.io
// +versionName=v1alpha1

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1alpha1 "github.com/crossplane-contrib/provider-tf-aws/apis/appmesh/v1alpha1"
)

type AppmeshMeshObservation struct {
	Arn string `json:"arn" tf:"arn"`

	CreatedDate string `json:"createdDate" tf:"created_date"`

	LastUpdatedDate string `json:"lastUpdatedDate" tf:"last_updated_date"`

	MeshOwner string `json:"meshOwner" tf:"mesh_owner"`

	ResourceOwner string `json:"resourceOwner" tf:"resource_owner"`
}

type AppmeshMeshParameters struct {
	Name string `json:"name" tf:"name"`

	Spec []SpecParameters `json:"spec,omitempty" tf:"spec"`

	Tags map[string]string `json:"tags,omitempty" tf:"tags"`

	TagsAll map[string]string `json:"tagsAll,omitempty" tf:"tags_all"`
}

type EgressFilterObservation struct {
}

type EgressFilterParameters struct {
	Type *string `json:"type,omitempty" tf:"type"`
}

type SpecObservation struct {
}

type SpecParameters struct {
	EgressFilter []EgressFilterParameters `json:"egressFilter,omitempty" tf:"egress_filter"`
}

// AppmeshMeshSpec defines the desired state of AppmeshMesh
type AppmeshMeshSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       AppmeshMeshParameters `json:"forProvider"`
}

// AppmeshMeshStatus defines the observed state of AppmeshMesh.
type AppmeshMeshStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          AppmeshMeshObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// AppmeshMesh is the Schema for the AppmeshMeshs API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type AppmeshMesh struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              AppmeshMeshSpec   `json:"spec"`
	Status            AppmeshMeshStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// AppmeshMeshList contains a list of AppmeshMeshs
type AppmeshMeshList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []AppmeshMesh `json:"items"`
}

// Repository type metadata.
var (
	AppmeshMeshKind             = "AppmeshMesh"
	AppmeshMeshGroupKind        = schema.GroupKind{Group: v1alpha1.Group, Kind: AppmeshMeshKind}.String()
	AppmeshMeshKindAPIVersion   = AppmeshMeshKind + "." + v1alpha1.GroupVersion.String()
	AppmeshMeshGroupVersionKind = v1alpha1.GroupVersion.WithKind(AppmeshMeshKind)
)

func init() {
	v1alpha1.SchemeBuilder.Register(&AppmeshMesh{}, &AppmeshMeshList{})
}
