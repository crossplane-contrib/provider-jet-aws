/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type VideoStreamObservation struct {
	Arn *string `json:"arn,omitempty" tf:"arn,omitempty"`

	CreationTime *string `json:"creationTime,omitempty" tf:"creation_time,omitempty"`

	TagsAll map[string]*string `json:"tagsAll,omitempty" tf:"tags_all,omitempty"`

	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

type VideoStreamParameters struct {

	// +kubebuilder:validation:Optional
	DataRetentionInHours *int64 `json:"dataRetentionInHours,omitempty" tf:"data_retention_in_hours,omitempty"`

	// +kubebuilder:validation:Optional
	DeviceName *string `json:"deviceName,omitempty" tf:"device_name,omitempty"`

	// +kubebuilder:validation:Optional
	KmsKeyID *string `json:"kmsKeyId,omitempty" tf:"kms_key_id,omitempty"`

	// +kubebuilder:validation:Optional
	MediaType *string `json:"mediaType,omitempty" tf:"media_type,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +terrajet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`

	// +kubebuilder:validation:Optional
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

// VideoStreamSpec defines the desired state of VideoStream
type VideoStreamSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     VideoStreamParameters `json:"forProvider"`
}

// VideoStreamStatus defines the observed state of VideoStream.
type VideoStreamStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        VideoStreamObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// VideoStream is the Schema for the VideoStreams API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tfaws}
type VideoStream struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              VideoStreamSpec   `json:"spec"`
	Status            VideoStreamStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// VideoStreamList contains a list of VideoStreams
type VideoStreamList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []VideoStream `json:"items"`
}

// Repository type metadata.
var (
	VideoStreamKind             = "VideoStream"
	VideoStreamGroupKind        = schema.GroupKind{Group: Group, Kind: VideoStreamKind}.String()
	VideoStreamKindAPIVersion   = VideoStreamKind + "." + GroupVersion.String()
	VideoStreamGroupVersionKind = GroupVersion.WithKind(VideoStreamKind)
)

func init() {
	SchemeBuilder.Register(&VideoStream{}, &VideoStreamList{})
}
