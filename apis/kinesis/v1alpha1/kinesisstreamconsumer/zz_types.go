/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

// +kubebuilder:object:generate=true
// +groupName=kinesis.aws.tf.crossplane.io
// +versionName=v1alpha1

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1alpha1 "github.com/crossplane-contrib/provider-tf-aws/apis/kinesis/v1alpha1"
)

type KinesisStreamConsumerObservation struct {
	Arn string `json:"arn" tf:"arn"`

	CreationTimestamp string `json:"creationTimestamp" tf:"creation_timestamp"`
}

type KinesisStreamConsumerParameters struct {
	Name string `json:"name" tf:"name"`

	StreamArn string `json:"streamArn" tf:"stream_arn"`
}

// KinesisStreamConsumerSpec defines the desired state of KinesisStreamConsumer
type KinesisStreamConsumerSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       KinesisStreamConsumerParameters `json:"forProvider"`
}

// KinesisStreamConsumerStatus defines the observed state of KinesisStreamConsumer.
type KinesisStreamConsumerStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          KinesisStreamConsumerObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// KinesisStreamConsumer is the Schema for the KinesisStreamConsumers API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type KinesisStreamConsumer struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              KinesisStreamConsumerSpec   `json:"spec"`
	Status            KinesisStreamConsumerStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// KinesisStreamConsumerList contains a list of KinesisStreamConsumers
type KinesisStreamConsumerList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []KinesisStreamConsumer `json:"items"`
}

// Repository type metadata.
var (
	KinesisStreamConsumerKind             = "KinesisStreamConsumer"
	KinesisStreamConsumerGroupKind        = schema.GroupKind{Group: v1alpha1.Group, Kind: KinesisStreamConsumerKind}.String()
	KinesisStreamConsumerKindAPIVersion   = KinesisStreamConsumerKind + "." + v1alpha1.GroupVersion.String()
	KinesisStreamConsumerGroupVersionKind = v1alpha1.GroupVersion.WithKind(KinesisStreamConsumerKind)
)

func init() {
	v1alpha1.SchemeBuilder.Register(&KinesisStreamConsumer{}, &KinesisStreamConsumerList{})
}
