/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type CloudwatchLoggingOptionsObservation struct {
}

type CloudwatchLoggingOptionsParameters struct {
	Enabled *bool `json:"enabled,omitempty" tf:"enabled"`

	LogGroupName *string `json:"logGroupName,omitempty" tf:"log_group_name"`

	LogStreamName *string `json:"logStreamName,omitempty" tf:"log_stream_name"`
}

type CommonAttributesObservation struct {
}

type CommonAttributesParameters struct {
	Name string `json:"name" tf:"name"`

	Value string `json:"value" tf:"value"`
}

type DataFormatConversionConfigurationObservation struct {
}

type DataFormatConversionConfigurationParameters struct {
	Enabled *bool `json:"enabled,omitempty" tf:"enabled"`

	InputFormatConfiguration []InputFormatConfigurationParameters `json:"inputFormatConfiguration" tf:"input_format_configuration"`

	OutputFormatConfiguration []OutputFormatConfigurationParameters `json:"outputFormatConfiguration" tf:"output_format_configuration"`

	SchemaConfiguration []SchemaConfigurationParameters `json:"schemaConfiguration" tf:"schema_configuration"`
}

type DeserializerObservation struct {
}

type DeserializerParameters struct {
	HiveJSONSerDe []HiveJSONSerDeParameters `json:"hiveJSONSerDe,omitempty" tf:"hive_json_ser_de"`

	OpenXJSONSerDe []OpenXJSONSerDeParameters `json:"openXJSONSerDe,omitempty" tf:"open_x_json_ser_de"`
}

type ElasticsearchConfigurationObservation struct {
}

type ElasticsearchConfigurationParameters struct {
	BufferingInterval *int64 `json:"bufferingInterval,omitempty" tf:"buffering_interval"`

	BufferingSize *int64 `json:"bufferingSize,omitempty" tf:"buffering_size"`

	CloudwatchLoggingOptions []CloudwatchLoggingOptionsParameters `json:"cloudwatchLoggingOptions,omitempty" tf:"cloudwatch_logging_options"`

	ClusterEndpoint *string `json:"clusterEndpoint,omitempty" tf:"cluster_endpoint"`

	DomainARN *string `json:"domainARN,omitempty" tf:"domain_arn"`

	IndexName string `json:"indexName" tf:"index_name"`

	IndexRotationPeriod *string `json:"indexRotationPeriod,omitempty" tf:"index_rotation_period"`

	ProcessingConfiguration []ProcessingConfigurationParameters `json:"processingConfiguration,omitempty" tf:"processing_configuration"`

	RetryDuration *int64 `json:"retryDuration,omitempty" tf:"retry_duration"`

	RoleARN string `json:"roleARN" tf:"role_arn"`

	S3BackupMode *string `json:"s3BackupMode,omitempty" tf:"s3_backup_mode"`

	TypeName *string `json:"typeName,omitempty" tf:"type_name"`

	VPCConfig []VPCConfigParameters `json:"vpcConfig,omitempty" tf:"vpc_config"`
}

type ExtendedS3ConfigurationCloudwatchLoggingOptionsObservation struct {
}

type ExtendedS3ConfigurationCloudwatchLoggingOptionsParameters struct {
	Enabled *bool `json:"enabled,omitempty" tf:"enabled"`

	LogGroupName *string `json:"logGroupName,omitempty" tf:"log_group_name"`

	LogStreamName *string `json:"logStreamName,omitempty" tf:"log_stream_name"`
}

type ExtendedS3ConfigurationObservation struct {
}

type ExtendedS3ConfigurationParameters struct {
	BucketARN string `json:"bucketARN" tf:"bucket_arn"`

	BufferInterval *int64 `json:"bufferInterval,omitempty" tf:"buffer_interval"`

	BufferSize *int64 `json:"bufferSize,omitempty" tf:"buffer_size"`

	CloudwatchLoggingOptions []ExtendedS3ConfigurationCloudwatchLoggingOptionsParameters `json:"cloudwatchLoggingOptions,omitempty" tf:"cloudwatch_logging_options"`

	CompressionFormat *string `json:"compressionFormat,omitempty" tf:"compression_format"`

	DataFormatConversionConfiguration []DataFormatConversionConfigurationParameters `json:"dataFormatConversionConfiguration,omitempty" tf:"data_format_conversion_configuration"`

	ErrorOutputPrefix *string `json:"errorOutputPrefix,omitempty" tf:"error_output_prefix"`

	KmsKeyARN *string `json:"kmsKeyARN,omitempty" tf:"kms_key_arn"`

	Prefix *string `json:"prefix,omitempty" tf:"prefix"`

	ProcessingConfiguration []ExtendedS3ConfigurationProcessingConfigurationParameters `json:"processingConfiguration,omitempty" tf:"processing_configuration"`

	RoleARN string `json:"roleARN" tf:"role_arn"`

	S3BackupConfiguration []S3BackupConfigurationParameters `json:"s3BackupConfiguration,omitempty" tf:"s3_backup_configuration"`

	S3BackupMode *string `json:"s3BackupMode,omitempty" tf:"s3_backup_mode"`
}

type ExtendedS3ConfigurationProcessingConfigurationObservation struct {
}

type ExtendedS3ConfigurationProcessingConfigurationParameters struct {
	Enabled *bool `json:"enabled,omitempty" tf:"enabled"`

	Processors []ProcessingConfigurationProcessorsParameters `json:"processors,omitempty" tf:"processors"`
}

type HTTPEndpointConfigurationCloudwatchLoggingOptionsObservation struct {
}

type HTTPEndpointConfigurationCloudwatchLoggingOptionsParameters struct {
	Enabled *bool `json:"enabled,omitempty" tf:"enabled"`

	LogGroupName *string `json:"logGroupName,omitempty" tf:"log_group_name"`

	LogStreamName *string `json:"logStreamName,omitempty" tf:"log_stream_name"`
}

type HTTPEndpointConfigurationObservation struct {
}

type HTTPEndpointConfigurationParameters struct {
	AccessKey *string `json:"accessKey,omitempty" tf:"access_key"`

	BufferingInterval *int64 `json:"bufferingInterval,omitempty" tf:"buffering_interval"`

	BufferingSize *int64 `json:"bufferingSize,omitempty" tf:"buffering_size"`

	CloudwatchLoggingOptions []HTTPEndpointConfigurationCloudwatchLoggingOptionsParameters `json:"cloudwatchLoggingOptions,omitempty" tf:"cloudwatch_logging_options"`

	Name *string `json:"name,omitempty" tf:"name"`

	ProcessingConfiguration []HTTPEndpointConfigurationProcessingConfigurationParameters `json:"processingConfiguration,omitempty" tf:"processing_configuration"`

	RequestConfiguration []RequestConfigurationParameters `json:"requestConfiguration,omitempty" tf:"request_configuration"`

	RetryDuration *int64 `json:"retryDuration,omitempty" tf:"retry_duration"`

	RoleARN *string `json:"roleARN,omitempty" tf:"role_arn"`

	S3BackupMode *string `json:"s3BackupMode,omitempty" tf:"s3_backup_mode"`

	URL string `json:"url" tf:"url"`
}

type HTTPEndpointConfigurationProcessingConfigurationObservation struct {
}

type HTTPEndpointConfigurationProcessingConfigurationParameters struct {
	Enabled *bool `json:"enabled,omitempty" tf:"enabled"`

	Processors []HTTPEndpointConfigurationProcessingConfigurationProcessorsParameters `json:"processors,omitempty" tf:"processors"`
}

type HTTPEndpointConfigurationProcessingConfigurationProcessorsObservation struct {
}

type HTTPEndpointConfigurationProcessingConfigurationProcessorsParameters struct {
	Parameters []ProcessingConfigurationProcessorsParametersParameters `json:"parameters,omitempty" tf:"parameters"`

	Type string `json:"type" tf:"type"`
}

type HiveJSONSerDeObservation struct {
}

type HiveJSONSerDeParameters struct {
	TimestampFormats []string `json:"timestampFormats,omitempty" tf:"timestamp_formats"`
}

type InputFormatConfigurationObservation struct {
}

type InputFormatConfigurationParameters struct {
	Deserializer []DeserializerParameters `json:"deserializer" tf:"deserializer"`
}

type KinesisFirehoseDeliveryStreamObservation struct {
}

type KinesisFirehoseDeliveryStreamParameters struct {
	ARN *string `json:"arn,omitempty" tf:"arn"`

	Destination string `json:"destination" tf:"destination"`

	DestinationID *string `json:"destinationID,omitempty" tf:"destination_id"`

	ElasticsearchConfiguration []ElasticsearchConfigurationParameters `json:"elasticsearchConfiguration,omitempty" tf:"elasticsearch_configuration"`

	ExtendedS3Configuration []ExtendedS3ConfigurationParameters `json:"extendedS3Configuration,omitempty" tf:"extended_s3_configuration"`

	HTTPEndpointConfiguration []HTTPEndpointConfigurationParameters `json:"httpEndpointConfiguration,omitempty" tf:"http_endpoint_configuration"`

	KinesisSourceConfiguration []KinesisSourceConfigurationParameters `json:"kinesisSourceConfiguration,omitempty" tf:"kinesis_source_configuration"`

	Name string `json:"name" tf:"name"`

	RedshiftConfiguration []RedshiftConfigurationParameters `json:"redshiftConfiguration,omitempty" tf:"redshift_configuration"`

	S3Configuration []S3ConfigurationParameters `json:"s3Configuration,omitempty" tf:"s3_configuration"`

	ServerSideEncryption []ServerSideEncryptionParameters `json:"serverSideEncryption,omitempty" tf:"server_side_encryption"`

	SplunkConfiguration []SplunkConfigurationParameters `json:"splunkConfiguration,omitempty" tf:"splunk_configuration"`

	Tags map[string]string `json:"tags,omitempty" tf:"tags"`

	TagsAll map[string]string `json:"tagsAll,omitempty" tf:"tags_all"`

	VersionID *string `json:"versionID,omitempty" tf:"version_id"`
}

type KinesisSourceConfigurationObservation struct {
}

type KinesisSourceConfigurationParameters struct {
	KinesisStreamARN string `json:"kinesisStreamARN" tf:"kinesis_stream_arn"`

	RoleARN string `json:"roleARN" tf:"role_arn"`
}

type OpenXJSONSerDeObservation struct {
}

type OpenXJSONSerDeParameters struct {
	CaseInsensitive *bool `json:"caseInsensitive,omitempty" tf:"case_insensitive"`

	ColumnToJSONKeyMappings map[string]string `json:"columnToJSONKeyMappings,omitempty" tf:"column_to_json_key_mappings"`

	ConvertDotsInJSONKeysToUnderscores *bool `json:"convertDotsInJSONKeysToUnderscores,omitempty" tf:"convert_dots_in_json_keys_to_underscores"`
}

type OrcSerDeObservation struct {
}

type OrcSerDeParameters struct {
	BlockSizeBytes *int64 `json:"blockSizeBytes,omitempty" tf:"block_size_bytes"`

	BloomFilterColumns []string `json:"bloomFilterColumns,omitempty" tf:"bloom_filter_columns"`

	BloomFilterFalsePositiveProbability *float64 `json:"bloomFilterFalsePositiveProbability,omitempty" tf:"bloom_filter_false_positive_probability"`

	Compression *string `json:"compression,omitempty" tf:"compression"`

	DictionaryKeyThreshold *float64 `json:"dictionaryKeyThreshold,omitempty" tf:"dictionary_key_threshold"`

	EnablePadding *bool `json:"enablePadding,omitempty" tf:"enable_padding"`

	FormatVersion *string `json:"formatVersion,omitempty" tf:"format_version"`

	PaddingTolerance *float64 `json:"paddingTolerance,omitempty" tf:"padding_tolerance"`

	RowIndexStride *int64 `json:"rowIndexStride,omitempty" tf:"row_index_stride"`

	StripeSizeBytes *int64 `json:"stripeSizeBytes,omitempty" tf:"stripe_size_bytes"`
}

type OutputFormatConfigurationObservation struct {
}

type OutputFormatConfigurationParameters struct {
	Serializer []SerializerParameters `json:"serializer" tf:"serializer"`
}

type ParametersObservation struct {
}

type ParametersParameters struct {
	ParameterName string `json:"parameterName" tf:"parameter_name"`

	ParameterValue string `json:"parameterValue" tf:"parameter_value"`
}

type ParquetSerDeObservation struct {
}

type ParquetSerDeParameters struct {
	BlockSizeBytes *int64 `json:"blockSizeBytes,omitempty" tf:"block_size_bytes"`

	Compression *string `json:"compression,omitempty" tf:"compression"`

	EnableDictionaryCompression *bool `json:"enableDictionaryCompression,omitempty" tf:"enable_dictionary_compression"`

	MaxPaddingBytes *int64 `json:"maxPaddingBytes,omitempty" tf:"max_padding_bytes"`

	PageSizeBytes *int64 `json:"pageSizeBytes,omitempty" tf:"page_size_bytes"`

	WriterVersion *string `json:"writerVersion,omitempty" tf:"writer_version"`
}

type ProcessingConfigurationObservation struct {
}

type ProcessingConfigurationParameters struct {
	Enabled *bool `json:"enabled,omitempty" tf:"enabled"`

	Processors []ProcessorsParameters `json:"processors,omitempty" tf:"processors"`
}

type ProcessingConfigurationProcessorsObservation struct {
}

type ProcessingConfigurationProcessorsParameters struct {
	Parameters []ProcessorsParametersParameters `json:"parameters,omitempty" tf:"parameters"`

	Type string `json:"type" tf:"type"`
}

type ProcessingConfigurationProcessorsParametersObservation struct {
}

type ProcessingConfigurationProcessorsParametersParameters struct {
	ParameterName string `json:"parameterName" tf:"parameter_name"`

	ParameterValue string `json:"parameterValue" tf:"parameter_value"`
}

type ProcessorsObservation struct {
}

type ProcessorsParameters struct {
	Parameters []ParametersParameters `json:"parameters,omitempty" tf:"parameters"`

	Type string `json:"type" tf:"type"`
}

type ProcessorsParametersObservation struct {
}

type ProcessorsParametersParameters struct {
	ParameterName string `json:"parameterName" tf:"parameter_name"`

	ParameterValue string `json:"parameterValue" tf:"parameter_value"`
}

type RedshiftConfigurationCloudwatchLoggingOptionsObservation struct {
}

type RedshiftConfigurationCloudwatchLoggingOptionsParameters struct {
	Enabled *bool `json:"enabled,omitempty" tf:"enabled"`

	LogGroupName *string `json:"logGroupName,omitempty" tf:"log_group_name"`

	LogStreamName *string `json:"logStreamName,omitempty" tf:"log_stream_name"`
}

type RedshiftConfigurationObservation struct {
}

type RedshiftConfigurationParameters struct {
	CloudwatchLoggingOptions []RedshiftConfigurationCloudwatchLoggingOptionsParameters `json:"cloudwatchLoggingOptions,omitempty" tf:"cloudwatch_logging_options"`

	ClusterJdbcurl string `json:"clusterJdbcurl" tf:"cluster_jdbcurl"`

	CopyOptions *string `json:"copyOptions,omitempty" tf:"copy_options"`

	DataTableColumns *string `json:"dataTableColumns,omitempty" tf:"data_table_columns"`

	DataTableName string `json:"dataTableName" tf:"data_table_name"`

	Password string `json:"password" tf:"password"`

	ProcessingConfiguration []RedshiftConfigurationProcessingConfigurationParameters `json:"processingConfiguration,omitempty" tf:"processing_configuration"`

	RetryDuration *int64 `json:"retryDuration,omitempty" tf:"retry_duration"`

	RoleARN string `json:"roleARN" tf:"role_arn"`

	S3BackupConfiguration []RedshiftConfigurationS3BackupConfigurationParameters `json:"s3BackupConfiguration,omitempty" tf:"s3_backup_configuration"`

	S3BackupMode *string `json:"s3BackupMode,omitempty" tf:"s3_backup_mode"`

	Username string `json:"username" tf:"username"`
}

type RedshiftConfigurationProcessingConfigurationObservation struct {
}

type RedshiftConfigurationProcessingConfigurationParameters struct {
	Enabled *bool `json:"enabled,omitempty" tf:"enabled"`

	Processors []RedshiftConfigurationProcessingConfigurationProcessorsParameters `json:"processors,omitempty" tf:"processors"`
}

type RedshiftConfigurationProcessingConfigurationProcessorsObservation struct {
}

type RedshiftConfigurationProcessingConfigurationProcessorsParameters struct {
	Parameters []RedshiftConfigurationProcessingConfigurationProcessorsParametersParameters `json:"parameters,omitempty" tf:"parameters"`

	Type string `json:"type" tf:"type"`
}

type RedshiftConfigurationProcessingConfigurationProcessorsParametersObservation struct {
}

type RedshiftConfigurationProcessingConfigurationProcessorsParametersParameters struct {
	ParameterName string `json:"parameterName" tf:"parameter_name"`

	ParameterValue string `json:"parameterValue" tf:"parameter_value"`
}

type RedshiftConfigurationS3BackupConfigurationCloudwatchLoggingOptionsObservation struct {
}

type RedshiftConfigurationS3BackupConfigurationCloudwatchLoggingOptionsParameters struct {
	Enabled *bool `json:"enabled,omitempty" tf:"enabled"`

	LogGroupName *string `json:"logGroupName,omitempty" tf:"log_group_name"`

	LogStreamName *string `json:"logStreamName,omitempty" tf:"log_stream_name"`
}

type RedshiftConfigurationS3BackupConfigurationObservation struct {
}

type RedshiftConfigurationS3BackupConfigurationParameters struct {
	BucketARN string `json:"bucketARN" tf:"bucket_arn"`

	BufferInterval *int64 `json:"bufferInterval,omitempty" tf:"buffer_interval"`

	BufferSize *int64 `json:"bufferSize,omitempty" tf:"buffer_size"`

	CloudwatchLoggingOptions []RedshiftConfigurationS3BackupConfigurationCloudwatchLoggingOptionsParameters `json:"cloudwatchLoggingOptions,omitempty" tf:"cloudwatch_logging_options"`

	CompressionFormat *string `json:"compressionFormat,omitempty" tf:"compression_format"`

	KmsKeyARN *string `json:"kmsKeyARN,omitempty" tf:"kms_key_arn"`

	Prefix *string `json:"prefix,omitempty" tf:"prefix"`

	RoleARN string `json:"roleARN" tf:"role_arn"`
}

type RequestConfigurationObservation struct {
}

type RequestConfigurationParameters struct {
	CommonAttributes []CommonAttributesParameters `json:"commonAttributes,omitempty" tf:"common_attributes"`

	ContentEncoding *string `json:"contentEncoding,omitempty" tf:"content_encoding"`
}

type S3BackupConfigurationCloudwatchLoggingOptionsObservation struct {
}

type S3BackupConfigurationCloudwatchLoggingOptionsParameters struct {
	Enabled *bool `json:"enabled,omitempty" tf:"enabled"`

	LogGroupName *string `json:"logGroupName,omitempty" tf:"log_group_name"`

	LogStreamName *string `json:"logStreamName,omitempty" tf:"log_stream_name"`
}

type S3BackupConfigurationObservation struct {
}

type S3BackupConfigurationParameters struct {
	BucketARN string `json:"bucketARN" tf:"bucket_arn"`

	BufferInterval *int64 `json:"bufferInterval,omitempty" tf:"buffer_interval"`

	BufferSize *int64 `json:"bufferSize,omitempty" tf:"buffer_size"`

	CloudwatchLoggingOptions []S3BackupConfigurationCloudwatchLoggingOptionsParameters `json:"cloudwatchLoggingOptions,omitempty" tf:"cloudwatch_logging_options"`

	CompressionFormat *string `json:"compressionFormat,omitempty" tf:"compression_format"`

	KmsKeyARN *string `json:"kmsKeyARN,omitempty" tf:"kms_key_arn"`

	Prefix *string `json:"prefix,omitempty" tf:"prefix"`

	RoleARN string `json:"roleARN" tf:"role_arn"`
}

type S3ConfigurationCloudwatchLoggingOptionsObservation struct {
}

type S3ConfigurationCloudwatchLoggingOptionsParameters struct {
	Enabled *bool `json:"enabled,omitempty" tf:"enabled"`

	LogGroupName *string `json:"logGroupName,omitempty" tf:"log_group_name"`

	LogStreamName *string `json:"logStreamName,omitempty" tf:"log_stream_name"`
}

type S3ConfigurationObservation struct {
}

type S3ConfigurationParameters struct {
	BucketARN string `json:"bucketARN" tf:"bucket_arn"`

	BufferInterval *int64 `json:"bufferInterval,omitempty" tf:"buffer_interval"`

	BufferSize *int64 `json:"bufferSize,omitempty" tf:"buffer_size"`

	CloudwatchLoggingOptions []S3ConfigurationCloudwatchLoggingOptionsParameters `json:"cloudwatchLoggingOptions,omitempty" tf:"cloudwatch_logging_options"`

	CompressionFormat *string `json:"compressionFormat,omitempty" tf:"compression_format"`

	KmsKeyARN *string `json:"kmsKeyARN,omitempty" tf:"kms_key_arn"`

	Prefix *string `json:"prefix,omitempty" tf:"prefix"`

	RoleARN string `json:"roleARN" tf:"role_arn"`
}

type SchemaConfigurationObservation struct {
}

type SchemaConfigurationParameters struct {
	CatalogID *string `json:"catalogID,omitempty" tf:"catalog_id"`

	DatabaseName string `json:"databaseName" tf:"database_name"`

	Region *string `json:"region,omitempty" tf:"region"`

	RoleARN string `json:"roleARN" tf:"role_arn"`

	TableName string `json:"tableName" tf:"table_name"`

	VersionID *string `json:"versionID,omitempty" tf:"version_id"`
}

type SerializerObservation struct {
}

type SerializerParameters struct {
	OrcSerDe []OrcSerDeParameters `json:"orcSerDe,omitempty" tf:"orc_ser_de"`

	ParquetSerDe []ParquetSerDeParameters `json:"parquetSerDe,omitempty" tf:"parquet_ser_de"`
}

type ServerSideEncryptionObservation struct {
}

type ServerSideEncryptionParameters struct {
	Enabled *bool `json:"enabled,omitempty" tf:"enabled"`

	KeyARN *string `json:"keyARN,omitempty" tf:"key_arn"`

	KeyType *string `json:"keyType,omitempty" tf:"key_type"`
}

type SplunkConfigurationCloudwatchLoggingOptionsObservation struct {
}

type SplunkConfigurationCloudwatchLoggingOptionsParameters struct {
	Enabled *bool `json:"enabled,omitempty" tf:"enabled"`

	LogGroupName *string `json:"logGroupName,omitempty" tf:"log_group_name"`

	LogStreamName *string `json:"logStreamName,omitempty" tf:"log_stream_name"`
}

type SplunkConfigurationObservation struct {
}

type SplunkConfigurationParameters struct {
	CloudwatchLoggingOptions []SplunkConfigurationCloudwatchLoggingOptionsParameters `json:"cloudwatchLoggingOptions,omitempty" tf:"cloudwatch_logging_options"`

	HecAcknowledgmentTimeout *int64 `json:"hecAcknowledgmentTimeout,omitempty" tf:"hec_acknowledgment_timeout"`

	HecEndpoint string `json:"hecEndpoint" tf:"hec_endpoint"`

	HecEndpointType *string `json:"hecEndpointType,omitempty" tf:"hec_endpoint_type"`

	HecToken string `json:"hecToken" tf:"hec_token"`

	ProcessingConfiguration []SplunkConfigurationProcessingConfigurationParameters `json:"processingConfiguration,omitempty" tf:"processing_configuration"`

	RetryDuration *int64 `json:"retryDuration,omitempty" tf:"retry_duration"`

	S3BackupMode *string `json:"s3BackupMode,omitempty" tf:"s3_backup_mode"`
}

type SplunkConfigurationProcessingConfigurationObservation struct {
}

type SplunkConfigurationProcessingConfigurationParameters struct {
	Enabled *bool `json:"enabled,omitempty" tf:"enabled"`

	Processors []SplunkConfigurationProcessingConfigurationProcessorsParameters `json:"processors,omitempty" tf:"processors"`
}

type SplunkConfigurationProcessingConfigurationProcessorsObservation struct {
}

type SplunkConfigurationProcessingConfigurationProcessorsParameters struct {
	Parameters []SplunkConfigurationProcessingConfigurationProcessorsParametersParameters `json:"parameters,omitempty" tf:"parameters"`

	Type string `json:"type" tf:"type"`
}

type SplunkConfigurationProcessingConfigurationProcessorsParametersObservation struct {
}

type SplunkConfigurationProcessingConfigurationProcessorsParametersParameters struct {
	ParameterName string `json:"parameterName" tf:"parameter_name"`

	ParameterValue string `json:"parameterValue" tf:"parameter_value"`
}

type VPCConfigObservation struct {
	VPCID string `json:"vpcID" tf:"vpc_id"`
}

type VPCConfigParameters struct {
	RoleARN string `json:"roleARN" tf:"role_arn"`

	SecurityGroupIds []string `json:"securityGroupIds" tf:"security_group_ids"`

	SubnetIds []string `json:"subnetIds" tf:"subnet_ids"`
}

// KinesisFirehoseDeliveryStreamSpec defines the desired state of KinesisFirehoseDeliveryStream
type KinesisFirehoseDeliveryStreamSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       KinesisFirehoseDeliveryStreamParameters `json:"forProvider"`
}

// KinesisFirehoseDeliveryStreamStatus defines the observed state of KinesisFirehoseDeliveryStream.
type KinesisFirehoseDeliveryStreamStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          KinesisFirehoseDeliveryStreamObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// KinesisFirehoseDeliveryStream is the Schema for the KinesisFirehoseDeliveryStreams API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tfaws}
type KinesisFirehoseDeliveryStream struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              KinesisFirehoseDeliveryStreamSpec   `json:"spec"`
	Status            KinesisFirehoseDeliveryStreamStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// KinesisFirehoseDeliveryStreamList contains a list of KinesisFirehoseDeliveryStreams
type KinesisFirehoseDeliveryStreamList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []KinesisFirehoseDeliveryStream `json:"items"`
}

// Repository type metadata.
var (
	KinesisFirehoseDeliveryStreamKind             = "KinesisFirehoseDeliveryStream"
	KinesisFirehoseDeliveryStreamGroupKind        = schema.GroupKind{Group: Group, Kind: KinesisFirehoseDeliveryStreamKind}.String()
	KinesisFirehoseDeliveryStreamKindAPIVersion   = KinesisFirehoseDeliveryStreamKind + "." + GroupVersion.String()
	KinesisFirehoseDeliveryStreamGroupVersionKind = GroupVersion.WithKind(KinesisFirehoseDeliveryStreamKind)
)

func init() {
	SchemeBuilder.Register(&KinesisFirehoseDeliveryStream{}, &KinesisFirehoseDeliveryStreamList{})
}
