/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

// +kubebuilder:object:generate=true
// +groupName=ses.aws.tf.crossplane.io
// +versionName=v1alpha1

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1alpha1 "github.com/crossplane-contrib/provider-tf-aws/apis/ses/v1alpha1"
)

type SesIdentityNotificationTopicObservation struct {
}

type SesIdentityNotificationTopicParameters struct {
	Identity string `json:"identity" tf:"identity"`

	IncludeOriginalHeaders *bool `json:"includeOriginalHeaders,omitempty" tf:"include_original_headers"`

	NotificationType string `json:"notificationType" tf:"notification_type"`

	TopicArn *string `json:"topicArn,omitempty" tf:"topic_arn"`
}

// SesIdentityNotificationTopicSpec defines the desired state of SesIdentityNotificationTopic
type SesIdentityNotificationTopicSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       SesIdentityNotificationTopicParameters `json:"forProvider"`
}

// SesIdentityNotificationTopicStatus defines the observed state of SesIdentityNotificationTopic.
type SesIdentityNotificationTopicStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          SesIdentityNotificationTopicObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// SesIdentityNotificationTopic is the Schema for the SesIdentityNotificationTopics API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type SesIdentityNotificationTopic struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              SesIdentityNotificationTopicSpec   `json:"spec"`
	Status            SesIdentityNotificationTopicStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SesIdentityNotificationTopicList contains a list of SesIdentityNotificationTopics
type SesIdentityNotificationTopicList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []SesIdentityNotificationTopic `json:"items"`
}

// Repository type metadata.
var (
	SesIdentityNotificationTopicKind             = "SesIdentityNotificationTopic"
	SesIdentityNotificationTopicGroupKind        = schema.GroupKind{Group: v1alpha1.Group, Kind: SesIdentityNotificationTopicKind}.String()
	SesIdentityNotificationTopicKindAPIVersion   = SesIdentityNotificationTopicKind + "." + v1alpha1.GroupVersion.String()
	SesIdentityNotificationTopicGroupVersionKind = v1alpha1.GroupVersion.WithKind(SesIdentityNotificationTopicKind)
)

func init() {
	v1alpha1.SchemeBuilder.Register(&SesIdentityNotificationTopic{}, &SesIdentityNotificationTopicList{})
}
