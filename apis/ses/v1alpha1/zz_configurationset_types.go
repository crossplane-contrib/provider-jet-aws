/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ConfigurationSetObservation struct {
	Arn *string `json:"arn,omitempty" tf:"arn,omitempty"`

	LastFreshStart *string `json:"lastFreshStart,omitempty" tf:"last_fresh_start,omitempty"`
}

type ConfigurationSetParameters struct {

	// +kubebuilder:validation:Optional
	DeliveryOptions []DeliveryOptionsParameters `json:"deliveryOptions,omitempty" tf:"delivery_options,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +terrajet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`

	// +kubebuilder:validation:Optional
	ReputationMetricsEnabled *bool `json:"reputationMetricsEnabled,omitempty" tf:"reputation_metrics_enabled,omitempty"`

	// +kubebuilder:validation:Optional
	SendingEnabled *bool `json:"sendingEnabled,omitempty" tf:"sending_enabled,omitempty"`
}

type DeliveryOptionsObservation struct {
}

type DeliveryOptionsParameters struct {

	// +kubebuilder:validation:Optional
	TLSPolicy *string `json:"tlsPolicy,omitempty" tf:"tls_policy,omitempty"`
}

// ConfigurationSetSpec defines the desired state of ConfigurationSet
type ConfigurationSetSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ConfigurationSetParameters `json:"forProvider"`
}

// ConfigurationSetStatus defines the observed state of ConfigurationSet.
type ConfigurationSetStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ConfigurationSetObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ConfigurationSet is the Schema for the ConfigurationSets API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tfaws}
type ConfigurationSet struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ConfigurationSetSpec   `json:"spec"`
	Status            ConfigurationSetStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ConfigurationSetList contains a list of ConfigurationSets
type ConfigurationSetList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ConfigurationSet `json:"items"`
}

// Repository type metadata.
var (
	ConfigurationSetKind             = "ConfigurationSet"
	ConfigurationSetGroupKind        = schema.GroupKind{Group: Group, Kind: ConfigurationSetKind}.String()
	ConfigurationSetKindAPIVersion   = ConfigurationSetKind + "." + GroupVersion.String()
	ConfigurationSetGroupVersionKind = GroupVersion.WithKind(ConfigurationSetKind)
)

func init() {
	SchemeBuilder.Register(&ConfigurationSet{}, &ConfigurationSetList{})
}
