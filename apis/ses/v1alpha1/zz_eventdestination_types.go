/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type CloudwatchDestinationObservation struct {
}

type CloudwatchDestinationParameters struct {

	// +kubebuilder:validation:Required
	DefaultValue *string `json:"defaultValue" tf:"default_value,omitempty"`

	// +kubebuilder:validation:Required
	DimensionName *string `json:"dimensionName" tf:"dimension_name,omitempty"`

	// +kubebuilder:validation:Required
	ValueSource *string `json:"valueSource" tf:"value_source,omitempty"`
}

type EventDestinationObservation struct {
	Arn *string `json:"arn,omitempty" tf:"arn,omitempty"`
}

type EventDestinationParameters struct {

	// +kubebuilder:validation:Optional
	CloudwatchDestination []CloudwatchDestinationParameters `json:"cloudwatchDestination,omitempty" tf:"cloudwatch_destination,omitempty"`

	// +kubebuilder:validation:Required
	ConfigurationSetName *string `json:"configurationSetName" tf:"configuration_set_name,omitempty"`

	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// +kubebuilder:validation:Optional
	KinesisDestination []KinesisDestinationParameters `json:"kinesisDestination,omitempty" tf:"kinesis_destination,omitempty"`

	// +kubebuilder:validation:Required
	MatchingTypes []*string `json:"matchingTypes" tf:"matching_types,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +terrajet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`

	// +kubebuilder:validation:Optional
	SnsDestination []SnsDestinationParameters `json:"snsDestination,omitempty" tf:"sns_destination,omitempty"`
}

type KinesisDestinationObservation struct {
}

type KinesisDestinationParameters struct {

	// +kubebuilder:validation:Required
	RoleArn *string `json:"roleArn" tf:"role_arn,omitempty"`

	// +kubebuilder:validation:Required
	StreamArn *string `json:"streamArn" tf:"stream_arn,omitempty"`
}

type SnsDestinationObservation struct {
}

type SnsDestinationParameters struct {

	// +kubebuilder:validation:Required
	TopicArn *string `json:"topicArn" tf:"topic_arn,omitempty"`
}

// EventDestinationSpec defines the desired state of EventDestination
type EventDestinationSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     EventDestinationParameters `json:"forProvider"`
}

// EventDestinationStatus defines the observed state of EventDestination.
type EventDestinationStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        EventDestinationObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// EventDestination is the Schema for the EventDestinations API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tfaws}
type EventDestination struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              EventDestinationSpec   `json:"spec"`
	Status            EventDestinationStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// EventDestinationList contains a list of EventDestinations
type EventDestinationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []EventDestination `json:"items"`
}

// Repository type metadata.
var (
	EventDestinationKind             = "EventDestination"
	EventDestinationGroupKind        = schema.GroupKind{Group: Group, Kind: EventDestinationKind}.String()
	EventDestinationKindAPIVersion   = EventDestinationKind + "." + GroupVersion.String()
	EventDestinationGroupVersionKind = GroupVersion.WithKind(EventDestinationKind)
)

func init() {
	SchemeBuilder.Register(&EventDestination{}, &EventDestinationList{})
}
