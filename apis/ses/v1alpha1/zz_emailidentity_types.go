/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type EmailIdentityObservation struct {
	Arn *string `json:"arn,omitempty" tf:"arn,omitempty"`
}

type EmailIdentityParameters struct {

	// +kubebuilder:validation:Required
	Email *string `json:"email" tf:"email,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +terrajet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`
}

// EmailIdentitySpec defines the desired state of EmailIdentity
type EmailIdentitySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     EmailIdentityParameters `json:"forProvider"`
}

// EmailIdentityStatus defines the observed state of EmailIdentity.
type EmailIdentityStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        EmailIdentityObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// EmailIdentity is the Schema for the EmailIdentitys API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tfaws}
type EmailIdentity struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              EmailIdentitySpec   `json:"spec"`
	Status            EmailIdentityStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// EmailIdentityList contains a list of EmailIdentitys
type EmailIdentityList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []EmailIdentity `json:"items"`
}

// Repository type metadata.
var (
	EmailIdentityKind             = "EmailIdentity"
	EmailIdentityGroupKind        = schema.GroupKind{Group: Group, Kind: EmailIdentityKind}.String()
	EmailIdentityKindAPIVersion   = EmailIdentityKind + "." + GroupVersion.String()
	EmailIdentityGroupVersionKind = GroupVersion.WithKind(EmailIdentityKind)
)

func init() {
	SchemeBuilder.Register(&EmailIdentity{}, &EmailIdentityList{})
}
