/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

// +kubebuilder:object:generate=true
// +groupName=dynamodb.aws.tf.crossplane.io
// +versionName=v1alpha1

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1alpha1 "github.com/crossplane-contrib/provider-tf-aws/apis/dynamodb/v1alpha1"
)

type DynamodbTableItemObservation struct {
}

type DynamodbTableItemParameters struct {
	HashKey string `json:"hashKey" tf:"hash_key"`

	Item string `json:"item" tf:"item"`

	RangeKey *string `json:"rangeKey,omitempty" tf:"range_key"`

	TableName string `json:"tableName" tf:"table_name"`
}

// DynamodbTableItemSpec defines the desired state of DynamodbTableItem
type DynamodbTableItemSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       DynamodbTableItemParameters `json:"forProvider"`
}

// DynamodbTableItemStatus defines the observed state of DynamodbTableItem.
type DynamodbTableItemStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          DynamodbTableItemObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// DynamodbTableItem is the Schema for the DynamodbTableItems API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type DynamodbTableItem struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DynamodbTableItemSpec   `json:"spec"`
	Status            DynamodbTableItemStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DynamodbTableItemList contains a list of DynamodbTableItems
type DynamodbTableItemList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DynamodbTableItem `json:"items"`
}

// Repository type metadata.
var (
	DynamodbTableItemKind             = "DynamodbTableItem"
	DynamodbTableItemGroupKind        = schema.GroupKind{Group: v1alpha1.Group, Kind: DynamodbTableItemKind}.String()
	DynamodbTableItemKindAPIVersion   = DynamodbTableItemKind + "." + v1alpha1.GroupVersion.String()
	DynamodbTableItemGroupVersionKind = v1alpha1.GroupVersion.WithKind(DynamodbTableItemKind)
)

func init() {
	v1alpha1.SchemeBuilder.Register(&DynamodbTableItem{}, &DynamodbTableItemList{})
}
