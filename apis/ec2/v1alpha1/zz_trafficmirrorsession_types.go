/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type TrafficMirrorSessionObservation struct {
	Arn *string `json:"arn,omitempty" tf:"arn,omitempty"`

	OwnerID *string `json:"ownerId,omitempty" tf:"owner_id,omitempty"`

	TagsAll map[string]*string `json:"tagsAll,omitempty" tf:"tags_all,omitempty"`
}

type TrafficMirrorSessionParameters struct {

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Required
	NetworkInterfaceID *string `json:"networkInterfaceId" tf:"network_interface_id,omitempty"`

	// +kubebuilder:validation:Optional
	PacketLength *int64 `json:"packetLength,omitempty" tf:"packet_length,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +terrajet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`

	// +kubebuilder:validation:Required
	SessionNumber *int64 `json:"sessionNumber" tf:"session_number,omitempty"`

	// +kubebuilder:validation:Optional
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// +kubebuilder:validation:Required
	TrafficMirrorFilterID *string `json:"trafficMirrorFilterId" tf:"traffic_mirror_filter_id,omitempty"`

	// +kubebuilder:validation:Required
	TrafficMirrorTargetID *string `json:"trafficMirrorTargetId" tf:"traffic_mirror_target_id,omitempty"`

	// +kubebuilder:validation:Optional
	VirtualNetworkID *int64 `json:"virtualNetworkId,omitempty" tf:"virtual_network_id,omitempty"`
}

// TrafficMirrorSessionSpec defines the desired state of TrafficMirrorSession
type TrafficMirrorSessionSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     TrafficMirrorSessionParameters `json:"forProvider"`
}

// TrafficMirrorSessionStatus defines the observed state of TrafficMirrorSession.
type TrafficMirrorSessionStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        TrafficMirrorSessionObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// TrafficMirrorSession is the Schema for the TrafficMirrorSessions API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tfaws}
type TrafficMirrorSession struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              TrafficMirrorSessionSpec   `json:"spec"`
	Status            TrafficMirrorSessionStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// TrafficMirrorSessionList contains a list of TrafficMirrorSessions
type TrafficMirrorSessionList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []TrafficMirrorSession `json:"items"`
}

// Repository type metadata.
var (
	TrafficMirrorSessionKind             = "TrafficMirrorSession"
	TrafficMirrorSessionGroupKind        = schema.GroupKind{Group: Group, Kind: TrafficMirrorSessionKind}.String()
	TrafficMirrorSessionKindAPIVersion   = TrafficMirrorSessionKind + "." + GroupVersion.String()
	TrafficMirrorSessionGroupVersionKind = GroupVersion.WithKind(TrafficMirrorSessionKind)
)

func init() {
	SchemeBuilder.Register(&TrafficMirrorSession{}, &TrafficMirrorSessionList{})
}
