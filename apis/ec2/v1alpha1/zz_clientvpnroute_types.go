/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ClientVpnRouteObservation struct {
	Origin *string `json:"origin,omitempty" tf:"origin,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type ClientVpnRouteParameters struct {

	// +kubebuilder:validation:Required
	ClientVpnEndpointID *string `json:"clientVpnEndpointId" tf:"client_vpn_endpoint_id,omitempty"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Required
	DestinationCidrBlock *string `json:"destinationCidrBlock" tf:"destination_cidr_block,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +terrajet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`

	// +kubebuilder:validation:Required
	TargetVpcSubnetID *string `json:"targetVpcSubnetId" tf:"target_vpc_subnet_id,omitempty"`
}

// ClientVpnRouteSpec defines the desired state of ClientVpnRoute
type ClientVpnRouteSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ClientVpnRouteParameters `json:"forProvider"`
}

// ClientVpnRouteStatus defines the observed state of ClientVpnRoute.
type ClientVpnRouteStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ClientVpnRouteObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ClientVpnRoute is the Schema for the ClientVpnRoutes API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tfaws}
type ClientVpnRoute struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ClientVpnRouteSpec   `json:"spec"`
	Status            ClientVpnRouteStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ClientVpnRouteList contains a list of ClientVpnRoutes
type ClientVpnRouteList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ClientVpnRoute `json:"items"`
}

// Repository type metadata.
var (
	ClientVpnRouteKind             = "ClientVpnRoute"
	ClientVpnRouteGroupKind        = schema.GroupKind{Group: Group, Kind: ClientVpnRouteKind}.String()
	ClientVpnRouteKindAPIVersion   = ClientVpnRouteKind + "." + GroupVersion.String()
	ClientVpnRouteGroupVersionKind = GroupVersion.WithKind(ClientVpnRouteKind)
)

func init() {
	SchemeBuilder.Register(&ClientVpnRoute{}, &ClientVpnRouteList{})
}
