/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

// +kubebuilder:object:generate=true
// +groupName=ec2.aws.tf.crossplane.io
// +versionName=v1alpha1

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1alpha1 "github.com/crossplane-contrib/provider-tf-aws/apis/ec2/v1alpha1"
)

type Ec2TrafficMirrorTargetObservation struct {
	Arn string `json:"arn" tf:"arn"`

	OwnerId string `json:"ownerId" tf:"owner_id"`
}

type Ec2TrafficMirrorTargetParameters struct {
	Description *string `json:"description,omitempty" tf:"description"`

	NetworkInterfaceId *string `json:"networkInterfaceId,omitempty" tf:"network_interface_id"`

	NetworkLoadBalancerArn *string `json:"networkLoadBalancerArn,omitempty" tf:"network_load_balancer_arn"`

	Tags map[string]string `json:"tags,omitempty" tf:"tags"`

	TagsAll map[string]string `json:"tagsAll,omitempty" tf:"tags_all"`
}

// Ec2TrafficMirrorTargetSpec defines the desired state of Ec2TrafficMirrorTarget
type Ec2TrafficMirrorTargetSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       Ec2TrafficMirrorTargetParameters `json:"forProvider"`
}

// Ec2TrafficMirrorTargetStatus defines the observed state of Ec2TrafficMirrorTarget.
type Ec2TrafficMirrorTargetStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          Ec2TrafficMirrorTargetObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Ec2TrafficMirrorTarget is the Schema for the Ec2TrafficMirrorTargets API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type Ec2TrafficMirrorTarget struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              Ec2TrafficMirrorTargetSpec   `json:"spec"`
	Status            Ec2TrafficMirrorTargetStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// Ec2TrafficMirrorTargetList contains a list of Ec2TrafficMirrorTargets
type Ec2TrafficMirrorTargetList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Ec2TrafficMirrorTarget `json:"items"`
}

// Repository type metadata.
var (
	Ec2TrafficMirrorTargetKind             = "Ec2TrafficMirrorTarget"
	Ec2TrafficMirrorTargetGroupKind        = schema.GroupKind{Group: v1alpha1.Group, Kind: Ec2TrafficMirrorTargetKind}.String()
	Ec2TrafficMirrorTargetKindAPIVersion   = Ec2TrafficMirrorTargetKind + "." + v1alpha1.GroupVersion.String()
	Ec2TrafficMirrorTargetGroupVersionKind = v1alpha1.GroupVersion.WithKind(Ec2TrafficMirrorTargetKind)
)

func init() {
	v1alpha1.SchemeBuilder.Register(&Ec2TrafficMirrorTarget{}, &Ec2TrafficMirrorTargetList{})
}
