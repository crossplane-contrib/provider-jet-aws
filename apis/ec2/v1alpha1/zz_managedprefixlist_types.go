/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type EntryObservation struct {
}

type EntryParameters struct {

	// +kubebuilder:validation:Required
	Cidr *string `json:"cidr" tf:"cidr,omitempty"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`
}

type ManagedPrefixListObservation struct {
	Arn *string `json:"arn,omitempty" tf:"arn,omitempty"`

	OwnerID *string `json:"ownerId,omitempty" tf:"owner_id,omitempty"`

	TagsAll map[string]*string `json:"tagsAll,omitempty" tf:"tags_all,omitempty"`

	Version *int64 `json:"version,omitempty" tf:"version,omitempty"`
}

type ManagedPrefixListParameters struct {

	// +kubebuilder:validation:Required
	AddressFamily *string `json:"addressFamily" tf:"address_family,omitempty"`

	// +kubebuilder:validation:Optional
	Entry []EntryParameters `json:"entry,omitempty" tf:"entry,omitempty"`

	// +kubebuilder:validation:Required
	MaxEntries *int64 `json:"maxEntries" tf:"max_entries,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +terrajet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`

	// +kubebuilder:validation:Optional
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

// ManagedPrefixListSpec defines the desired state of ManagedPrefixList
type ManagedPrefixListSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ManagedPrefixListParameters `json:"forProvider"`
}

// ManagedPrefixListStatus defines the observed state of ManagedPrefixList.
type ManagedPrefixListStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ManagedPrefixListObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ManagedPrefixList is the Schema for the ManagedPrefixLists API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tfaws}
type ManagedPrefixList struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ManagedPrefixListSpec   `json:"spec"`
	Status            ManagedPrefixListStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ManagedPrefixListList contains a list of ManagedPrefixLists
type ManagedPrefixListList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ManagedPrefixList `json:"items"`
}

// Repository type metadata.
var (
	ManagedPrefixListKind             = "ManagedPrefixList"
	ManagedPrefixListGroupKind        = schema.GroupKind{Group: Group, Kind: ManagedPrefixListKind}.String()
	ManagedPrefixListKindAPIVersion   = ManagedPrefixListKind + "." + GroupVersion.String()
	ManagedPrefixListGroupVersionKind = GroupVersion.WithKind(ManagedPrefixListKind)
)

func init() {
	SchemeBuilder.Register(&ManagedPrefixList{}, &ManagedPrefixListList{})
}
