/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type LogDestinationConfigObservation struct {
}

type LogDestinationConfigParameters struct {

	// +kubebuilder:validation:Required
	LogDestination map[string]*string `json:"logDestination" tf:"log_destination,omitempty"`

	// +kubebuilder:validation:Required
	LogDestinationType *string `json:"logDestinationType" tf:"log_destination_type,omitempty"`

	// +kubebuilder:validation:Required
	LogType *string `json:"logType" tf:"log_type,omitempty"`
}

type LoggingConfigurationObservation struct {
}

type LoggingConfigurationParameters struct {

	// +kubebuilder:validation:Required
	LogDestinationConfig []LogDestinationConfigParameters `json:"logDestinationConfig" tf:"log_destination_config,omitempty"`
}

type NetworkfirewallLoggingConfigurationObservation struct {
}

type NetworkfirewallLoggingConfigurationParameters struct {

	// +kubebuilder:validation:Required
	FirewallArn *string `json:"firewallArn" tf:"firewall_arn,omitempty"`

	// +kubebuilder:validation:Required
	LoggingConfiguration []LoggingConfigurationParameters `json:"loggingConfiguration" tf:"logging_configuration,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +terrajet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`
}

// NetworkfirewallLoggingConfigurationSpec defines the desired state of NetworkfirewallLoggingConfiguration
type NetworkfirewallLoggingConfigurationSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     NetworkfirewallLoggingConfigurationParameters `json:"forProvider"`
}

// NetworkfirewallLoggingConfigurationStatus defines the observed state of NetworkfirewallLoggingConfiguration.
type NetworkfirewallLoggingConfigurationStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        NetworkfirewallLoggingConfigurationObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// NetworkfirewallLoggingConfiguration is the Schema for the NetworkfirewallLoggingConfigurations API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tfaws}
type NetworkfirewallLoggingConfiguration struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              NetworkfirewallLoggingConfigurationSpec   `json:"spec"`
	Status            NetworkfirewallLoggingConfigurationStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// NetworkfirewallLoggingConfigurationList contains a list of NetworkfirewallLoggingConfigurations
type NetworkfirewallLoggingConfigurationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []NetworkfirewallLoggingConfiguration `json:"items"`
}

// Repository type metadata.
var (
	NetworkfirewallLoggingConfigurationKind             = "NetworkfirewallLoggingConfiguration"
	NetworkfirewallLoggingConfigurationGroupKind        = schema.GroupKind{Group: Group, Kind: NetworkfirewallLoggingConfigurationKind}.String()
	NetworkfirewallLoggingConfigurationKindAPIVersion   = NetworkfirewallLoggingConfigurationKind + "." + GroupVersion.String()
	NetworkfirewallLoggingConfigurationGroupVersionKind = GroupVersion.WithKind(NetworkfirewallLoggingConfigurationKind)
)

func init() {
	SchemeBuilder.Register(&NetworkfirewallLoggingConfiguration{}, &NetworkfirewallLoggingConfigurationList{})
}
