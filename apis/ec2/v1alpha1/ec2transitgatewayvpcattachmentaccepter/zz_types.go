/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

// +kubebuilder:object:generate=true
// +groupName=ec2.aws.tf.crossplane.io
// +versionName=v1alpha1

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1alpha1 "github.com/crossplane-contrib/provider-tf-aws/apis/ec2/v1alpha1"
)

type Ec2TransitGatewayVpcAttachmentAccepterObservation struct {
	ApplianceModeSupport string `json:"applianceModeSupport" tf:"appliance_mode_support"`

	DnsSupport string `json:"dnsSupport" tf:"dns_support"`

	Ipv6Support string `json:"ipv6Support" tf:"ipv6_support"`

	SubnetIds []string `json:"subnetIds" tf:"subnet_ids"`

	TransitGatewayId string `json:"transitGatewayId" tf:"transit_gateway_id"`

	VpcId string `json:"vpcId" tf:"vpc_id"`

	VpcOwnerId string `json:"vpcOwnerId" tf:"vpc_owner_id"`
}

type Ec2TransitGatewayVpcAttachmentAccepterParameters struct {
	Tags map[string]string `json:"tags,omitempty" tf:"tags"`

	TagsAll map[string]string `json:"tagsAll,omitempty" tf:"tags_all"`

	TransitGatewayAttachmentId string `json:"transitGatewayAttachmentId" tf:"transit_gateway_attachment_id"`

	TransitGatewayDefaultRouteTableAssociation *bool `json:"transitGatewayDefaultRouteTableAssociation,omitempty" tf:"transit_gateway_default_route_table_association"`

	TransitGatewayDefaultRouteTablePropagation *bool `json:"transitGatewayDefaultRouteTablePropagation,omitempty" tf:"transit_gateway_default_route_table_propagation"`
}

// Ec2TransitGatewayVpcAttachmentAccepterSpec defines the desired state of Ec2TransitGatewayVpcAttachmentAccepter
type Ec2TransitGatewayVpcAttachmentAccepterSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       Ec2TransitGatewayVpcAttachmentAccepterParameters `json:"forProvider"`
}

// Ec2TransitGatewayVpcAttachmentAccepterStatus defines the observed state of Ec2TransitGatewayVpcAttachmentAccepter.
type Ec2TransitGatewayVpcAttachmentAccepterStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          Ec2TransitGatewayVpcAttachmentAccepterObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Ec2TransitGatewayVpcAttachmentAccepter is the Schema for the Ec2TransitGatewayVpcAttachmentAccepters API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type Ec2TransitGatewayVpcAttachmentAccepter struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              Ec2TransitGatewayVpcAttachmentAccepterSpec   `json:"spec"`
	Status            Ec2TransitGatewayVpcAttachmentAccepterStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// Ec2TransitGatewayVpcAttachmentAccepterList contains a list of Ec2TransitGatewayVpcAttachmentAccepters
type Ec2TransitGatewayVpcAttachmentAccepterList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Ec2TransitGatewayVpcAttachmentAccepter `json:"items"`
}

// Repository type metadata.
var (
	Ec2TransitGatewayVpcAttachmentAccepterKind             = "Ec2TransitGatewayVpcAttachmentAccepter"
	Ec2TransitGatewayVpcAttachmentAccepterGroupKind        = schema.GroupKind{Group: v1alpha1.Group, Kind: Ec2TransitGatewayVpcAttachmentAccepterKind}.String()
	Ec2TransitGatewayVpcAttachmentAccepterKindAPIVersion   = Ec2TransitGatewayVpcAttachmentAccepterKind + "." + v1alpha1.GroupVersion.String()
	Ec2TransitGatewayVpcAttachmentAccepterGroupVersionKind = v1alpha1.GroupVersion.WithKind(Ec2TransitGatewayVpcAttachmentAccepterKind)
)

func init() {
	v1alpha1.SchemeBuilder.Register(&Ec2TransitGatewayVpcAttachmentAccepter{}, &Ec2TransitGatewayVpcAttachmentAccepterList{})
}
