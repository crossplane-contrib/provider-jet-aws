/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type Route53ResolverDnssecConfigObservation struct {
	Arn *string `json:"arn,omitempty" tf:"arn,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	OwnerID *string `json:"ownerId,omitempty" tf:"owner_id,omitempty"`

	ValidationStatus *string `json:"validationStatus,omitempty" tf:"validation_status,omitempty"`
}

type Route53ResolverDnssecConfigParameters struct {

	// Region is the region you'd like your resource to be created in.
	// +terrajet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`

	// +kubebuilder:validation:Required
	ResourceID *string `json:"resourceId" tf:"resource_id,omitempty"`
}

// Route53ResolverDnssecConfigSpec defines the desired state of Route53ResolverDnssecConfig
type Route53ResolverDnssecConfigSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     Route53ResolverDnssecConfigParameters `json:"forProvider"`
}

// Route53ResolverDnssecConfigStatus defines the observed state of Route53ResolverDnssecConfig.
type Route53ResolverDnssecConfigStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        Route53ResolverDnssecConfigObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Route53ResolverDnssecConfig is the Schema for the Route53ResolverDnssecConfigs API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tfaws}
type Route53ResolverDnssecConfig struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              Route53ResolverDnssecConfigSpec   `json:"spec"`
	Status            Route53ResolverDnssecConfigStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// Route53ResolverDnssecConfigList contains a list of Route53ResolverDnssecConfigs
type Route53ResolverDnssecConfigList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Route53ResolverDnssecConfig `json:"items"`
}

// Repository type metadata.
var (
	Route53ResolverDnssecConfigKind             = "Route53ResolverDnssecConfig"
	Route53ResolverDnssecConfigGroupKind        = schema.GroupKind{Group: Group, Kind: Route53ResolverDnssecConfigKind}.String()
	Route53ResolverDnssecConfigKindAPIVersion   = Route53ResolverDnssecConfigKind + "." + GroupVersion.String()
	Route53ResolverDnssecConfigGroupVersionKind = GroupVersion.WithKind(Route53ResolverDnssecConfigKind)
)

func init() {
	SchemeBuilder.Register(&Route53ResolverDnssecConfig{}, &Route53ResolverDnssecConfigList{})
}
