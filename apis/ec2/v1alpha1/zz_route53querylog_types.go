/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type Route53QueryLogObservation struct {
}

type Route53QueryLogParameters struct {

	// +kubebuilder:validation:Required
	CloudwatchLogGroupArn *string `json:"cloudwatchLogGroupArn" tf:"cloudwatch_log_group_arn,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +terrajet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`

	// +kubebuilder:validation:Required
	ZoneID *string `json:"zoneId" tf:"zone_id,omitempty"`
}

// Route53QueryLogSpec defines the desired state of Route53QueryLog
type Route53QueryLogSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     Route53QueryLogParameters `json:"forProvider"`
}

// Route53QueryLogStatus defines the observed state of Route53QueryLog.
type Route53QueryLogStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        Route53QueryLogObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Route53QueryLog is the Schema for the Route53QueryLogs API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tfaws}
type Route53QueryLog struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              Route53QueryLogSpec   `json:"spec"`
	Status            Route53QueryLogStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// Route53QueryLogList contains a list of Route53QueryLogs
type Route53QueryLogList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Route53QueryLog `json:"items"`
}

// Repository type metadata.
var (
	Route53QueryLogKind             = "Route53QueryLog"
	Route53QueryLogGroupKind        = schema.GroupKind{Group: Group, Kind: Route53QueryLogKind}.String()
	Route53QueryLogKindAPIVersion   = Route53QueryLogKind + "." + GroupVersion.String()
	Route53QueryLogGroupVersionKind = GroupVersion.WithKind(Route53QueryLogKind)
)

func init() {
	SchemeBuilder.Register(&Route53QueryLog{}, &Route53QueryLogList{})
}
