/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type Ec2TransitGatewayRouteTablePropagationObservation struct {
	ResourceID string `json:"resourceID" tf:"resource_id"`

	ResourceType string `json:"resourceType" tf:"resource_type"`
}

type Ec2TransitGatewayRouteTablePropagationParameters struct {
	TransitGatewayAttachmentID string `json:"transitGatewayAttachmentID" tf:"transit_gateway_attachment_id"`

	TransitGatewayRouteTableID string `json:"transitGatewayRouteTableID" tf:"transit_gateway_route_table_id"`
}

// Ec2TransitGatewayRouteTablePropagationSpec defines the desired state of Ec2TransitGatewayRouteTablePropagation
type Ec2TransitGatewayRouteTablePropagationSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       Ec2TransitGatewayRouteTablePropagationParameters `json:"forProvider"`
}

// Ec2TransitGatewayRouteTablePropagationStatus defines the observed state of Ec2TransitGatewayRouteTablePropagation.
type Ec2TransitGatewayRouteTablePropagationStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          Ec2TransitGatewayRouteTablePropagationObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Ec2TransitGatewayRouteTablePropagation is the Schema for the Ec2TransitGatewayRouteTablePropagations API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tfaws}
type Ec2TransitGatewayRouteTablePropagation struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              Ec2TransitGatewayRouteTablePropagationSpec   `json:"spec"`
	Status            Ec2TransitGatewayRouteTablePropagationStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// Ec2TransitGatewayRouteTablePropagationList contains a list of Ec2TransitGatewayRouteTablePropagations
type Ec2TransitGatewayRouteTablePropagationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Ec2TransitGatewayRouteTablePropagation `json:"items"`
}

// Repository type metadata.
var (
	Ec2TransitGatewayRouteTablePropagationKind             = "Ec2TransitGatewayRouteTablePropagation"
	Ec2TransitGatewayRouteTablePropagationGroupKind        = schema.GroupKind{Group: Group, Kind: Ec2TransitGatewayRouteTablePropagationKind}.String()
	Ec2TransitGatewayRouteTablePropagationKindAPIVersion   = Ec2TransitGatewayRouteTablePropagationKind + "." + GroupVersion.String()
	Ec2TransitGatewayRouteTablePropagationGroupVersionKind = GroupVersion.WithKind(Ec2TransitGatewayRouteTablePropagationKind)
)

func init() {
	SchemeBuilder.Register(&Ec2TransitGatewayRouteTablePropagation{}, &Ec2TransitGatewayRouteTablePropagationList{})
}
