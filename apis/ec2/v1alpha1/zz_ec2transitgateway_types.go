/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type Ec2TransitGatewayObservation struct {
	ARN string `json:"arn" tf:"arn"`

	AssociationDefaultRouteTableID string `json:"associationDefaultRouteTableID" tf:"association_default_route_table_id"`

	OwnerID string `json:"ownerID" tf:"owner_id"`

	PropagationDefaultRouteTableID string `json:"propagationDefaultRouteTableID" tf:"propagation_default_route_table_id"`
}

type Ec2TransitGatewayParameters struct {
	AmazonSideAsn *int64 `json:"amazonSideAsn,omitempty" tf:"amazon_side_asn"`

	AutoAcceptSharedAttachments *string `json:"autoAcceptSharedAttachments,omitempty" tf:"auto_accept_shared_attachments"`

	DNSSupport *string `json:"dnsSupport,omitempty" tf:"dns_support"`

	DefaultRouteTableAssociation *string `json:"defaultRouteTableAssociation,omitempty" tf:"default_route_table_association"`

	DefaultRouteTablePropagation *string `json:"defaultRouteTablePropagation,omitempty" tf:"default_route_table_propagation"`

	Description *string `json:"description,omitempty" tf:"description"`

	Tags map[string]string `json:"tags,omitempty" tf:"tags"`

	TagsAll map[string]string `json:"tagsAll,omitempty" tf:"tags_all"`

	VpnEcmpSupport *string `json:"vpnEcmpSupport,omitempty" tf:"vpn_ecmp_support"`
}

// Ec2TransitGatewaySpec defines the desired state of Ec2TransitGateway
type Ec2TransitGatewaySpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       Ec2TransitGatewayParameters `json:"forProvider"`
}

// Ec2TransitGatewayStatus defines the observed state of Ec2TransitGateway.
type Ec2TransitGatewayStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          Ec2TransitGatewayObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Ec2TransitGateway is the Schema for the Ec2TransitGateways API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tfaws}
type Ec2TransitGateway struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              Ec2TransitGatewaySpec   `json:"spec"`
	Status            Ec2TransitGatewayStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// Ec2TransitGatewayList contains a list of Ec2TransitGateways
type Ec2TransitGatewayList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Ec2TransitGateway `json:"items"`
}

// Repository type metadata.
var (
	Ec2TransitGatewayKind             = "Ec2TransitGateway"
	Ec2TransitGatewayGroupKind        = schema.GroupKind{Group: Group, Kind: Ec2TransitGatewayKind}.String()
	Ec2TransitGatewayKindAPIVersion   = Ec2TransitGatewayKind + "." + GroupVersion.String()
	Ec2TransitGatewayGroupVersionKind = GroupVersion.WithKind(Ec2TransitGatewayKind)
)

func init() {
	SchemeBuilder.Register(&Ec2TransitGateway{}, &Ec2TransitGatewayList{})
}
