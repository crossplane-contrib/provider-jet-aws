/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type Route53KeySigningKeyObservation struct {
	DigestAlgorithmMnemonic *string `json:"digestAlgorithmMnemonic,omitempty" tf:"digest_algorithm_mnemonic,omitempty"`

	DigestAlgorithmType *int64 `json:"digestAlgorithmType,omitempty" tf:"digest_algorithm_type,omitempty"`

	DigestValue *string `json:"digestValue,omitempty" tf:"digest_value,omitempty"`

	DnskeyRecord *string `json:"dnskeyRecord,omitempty" tf:"dnskey_record,omitempty"`

	DsRecord *string `json:"dsRecord,omitempty" tf:"ds_record,omitempty"`

	Flag *int64 `json:"flag,omitempty" tf:"flag,omitempty"`

	KeyTag *int64 `json:"keyTag,omitempty" tf:"key_tag,omitempty"`

	PublicKey *string `json:"publicKey,omitempty" tf:"public_key,omitempty"`

	SigningAlgorithmMnemonic *string `json:"signingAlgorithmMnemonic,omitempty" tf:"signing_algorithm_mnemonic,omitempty"`

	SigningAlgorithmType *int64 `json:"signingAlgorithmType,omitempty" tf:"signing_algorithm_type,omitempty"`
}

type Route53KeySigningKeyParameters struct {

	// +kubebuilder:validation:Required
	HostedZoneID *string `json:"hostedZoneId" tf:"hosted_zone_id,omitempty"`

	// +kubebuilder:validation:Required
	KeyManagementServiceArn *string `json:"keyManagementServiceArn" tf:"key_management_service_arn,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +terrajet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`

	// +kubebuilder:validation:Optional
	Status *string `json:"status,omitempty" tf:"status,omitempty"`
}

// Route53KeySigningKeySpec defines the desired state of Route53KeySigningKey
type Route53KeySigningKeySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     Route53KeySigningKeyParameters `json:"forProvider"`
}

// Route53KeySigningKeyStatus defines the observed state of Route53KeySigningKey.
type Route53KeySigningKeyStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        Route53KeySigningKeyObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Route53KeySigningKey is the Schema for the Route53KeySigningKeys API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tfaws}
type Route53KeySigningKey struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              Route53KeySigningKeySpec   `json:"spec"`
	Status            Route53KeySigningKeyStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// Route53KeySigningKeyList contains a list of Route53KeySigningKeys
type Route53KeySigningKeyList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Route53KeySigningKey `json:"items"`
}

// Repository type metadata.
var (
	Route53KeySigningKeyKind             = "Route53KeySigningKey"
	Route53KeySigningKeyGroupKind        = schema.GroupKind{Group: Group, Kind: Route53KeySigningKeyKind}.String()
	Route53KeySigningKeyKindAPIVersion   = Route53KeySigningKeyKind + "." + GroupVersion.String()
	Route53KeySigningKeyGroupVersionKind = GroupVersion.WithKind(Route53KeySigningKeyKind)
)

func init() {
	SchemeBuilder.Register(&Route53KeySigningKey{}, &Route53KeySigningKeyList{})
}
