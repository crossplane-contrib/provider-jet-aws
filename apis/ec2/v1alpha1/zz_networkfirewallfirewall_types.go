/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type FirewallStatusObservation struct {
	SyncStates []SyncStatesObservation `json:"syncStates,omitempty" tf:"sync_states,omitempty"`
}

type FirewallStatusParameters struct {
}

type NetworkfirewallFirewallObservation struct {
	Arn *string `json:"arn,omitempty" tf:"arn,omitempty"`

	FirewallStatus []FirewallStatusObservation `json:"firewallStatus,omitempty" tf:"firewall_status,omitempty"`

	TagsAll map[string]*string `json:"tagsAll,omitempty" tf:"tags_all,omitempty"`

	UpdateToken *string `json:"updateToken,omitempty" tf:"update_token,omitempty"`
}

type NetworkfirewallFirewallParameters struct {

	// +kubebuilder:validation:Optional
	DeleteProtection *bool `json:"deleteProtection,omitempty" tf:"delete_protection,omitempty"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Required
	FirewallPolicyArn *string `json:"firewallPolicyArn" tf:"firewall_policy_arn,omitempty"`

	// +kubebuilder:validation:Optional
	FirewallPolicyChangeProtection *bool `json:"firewallPolicyChangeProtection,omitempty" tf:"firewall_policy_change_protection,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +terrajet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`

	// +kubebuilder:validation:Optional
	SubnetChangeProtection *bool `json:"subnetChangeProtection,omitempty" tf:"subnet_change_protection,omitempty"`

	// +kubebuilder:validation:Required
	SubnetMapping []SubnetMappingParameters `json:"subnetMapping" tf:"subnet_mapping,omitempty"`

	// +kubebuilder:validation:Optional
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// +kubebuilder:validation:Required
	VpcID *string `json:"vpcId" tf:"vpc_id,omitempty"`
}

type SubnetMappingObservation struct {
}

type SubnetMappingParameters struct {

	// +kubebuilder:validation:Required
	SubnetID *string `json:"subnetId" tf:"subnet_id,omitempty"`
}

type SyncStatesAttachmentObservation struct {
	EndpointID *string `json:"endpointId,omitempty" tf:"endpoint_id,omitempty"`

	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id,omitempty"`
}

type SyncStatesAttachmentParameters struct {
}

type SyncStatesObservation struct {
	Attachment []SyncStatesAttachmentObservation `json:"attachment,omitempty" tf:"attachment,omitempty"`

	AvailabilityZone *string `json:"availabilityZone,omitempty" tf:"availability_zone,omitempty"`
}

type SyncStatesParameters struct {
}

// NetworkfirewallFirewallSpec defines the desired state of NetworkfirewallFirewall
type NetworkfirewallFirewallSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     NetworkfirewallFirewallParameters `json:"forProvider"`
}

// NetworkfirewallFirewallStatus defines the observed state of NetworkfirewallFirewall.
type NetworkfirewallFirewallStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        NetworkfirewallFirewallObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// NetworkfirewallFirewall is the Schema for the NetworkfirewallFirewalls API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tfaws}
type NetworkfirewallFirewall struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              NetworkfirewallFirewallSpec   `json:"spec"`
	Status            NetworkfirewallFirewallStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// NetworkfirewallFirewallList contains a list of NetworkfirewallFirewalls
type NetworkfirewallFirewallList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []NetworkfirewallFirewall `json:"items"`
}

// Repository type metadata.
var (
	NetworkfirewallFirewallKind             = "NetworkfirewallFirewall"
	NetworkfirewallFirewallGroupKind        = schema.GroupKind{Group: Group, Kind: NetworkfirewallFirewallKind}.String()
	NetworkfirewallFirewallKindAPIVersion   = NetworkfirewallFirewallKind + "." + GroupVersion.String()
	NetworkfirewallFirewallGroupVersionKind = GroupVersion.WithKind(NetworkfirewallFirewallKind)
)

func init() {
	SchemeBuilder.Register(&NetworkfirewallFirewall{}, &NetworkfirewallFirewallList{})
}
