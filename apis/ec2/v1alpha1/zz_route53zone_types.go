/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type Route53ZoneObservation struct {
	NameServers []*string `json:"nameServers,omitempty" tf:"name_servers,omitempty"`

	TagsAll map[string]*string `json:"tagsAll,omitempty" tf:"tags_all,omitempty"`

	ZoneID *string `json:"zoneId,omitempty" tf:"zone_id,omitempty"`
}

type Route53ZoneParameters struct {

	// +kubebuilder:validation:Optional
	Comment *string `json:"comment,omitempty" tf:"comment,omitempty"`

	// +kubebuilder:validation:Optional
	DelegationSetID *string `json:"delegationSetId,omitempty" tf:"delegation_set_id,omitempty"`

	// +kubebuilder:validation:Optional
	ForceDestroy *bool `json:"forceDestroy,omitempty" tf:"force_destroy,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +terrajet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`

	// +kubebuilder:validation:Optional
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// +kubebuilder:validation:Optional
	Vpc []VpcParameters `json:"vpc,omitempty" tf:"vpc,omitempty"`
}

type VpcObservation struct {
}

type VpcParameters struct {

	// +kubebuilder:validation:Required
	VpcID *string `json:"vpcId" tf:"vpc_id,omitempty"`

	// +kubebuilder:validation:Optional
	VpcRegion *string `json:"vpcRegion,omitempty" tf:"vpc_region,omitempty"`
}

// Route53ZoneSpec defines the desired state of Route53Zone
type Route53ZoneSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     Route53ZoneParameters `json:"forProvider"`
}

// Route53ZoneStatus defines the observed state of Route53Zone.
type Route53ZoneStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        Route53ZoneObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Route53Zone is the Schema for the Route53Zones API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tfaws}
type Route53Zone struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              Route53ZoneSpec   `json:"spec"`
	Status            Route53ZoneStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// Route53ZoneList contains a list of Route53Zones
type Route53ZoneList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Route53Zone `json:"items"`
}

// Repository type metadata.
var (
	Route53ZoneKind             = "Route53Zone"
	Route53ZoneGroupKind        = schema.GroupKind{Group: Group, Kind: Route53ZoneKind}.String()
	Route53ZoneKindAPIVersion   = Route53ZoneKind + "." + GroupVersion.String()
	Route53ZoneGroupVersionKind = GroupVersion.WithKind(Route53ZoneKind)
)

func init() {
	SchemeBuilder.Register(&Route53Zone{}, &Route53ZoneList{})
}
