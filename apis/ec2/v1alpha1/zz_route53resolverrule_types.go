/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type Route53ResolverRuleObservation struct {
	Arn *string `json:"arn,omitempty" tf:"arn,omitempty"`

	OwnerID *string `json:"ownerId,omitempty" tf:"owner_id,omitempty"`

	ShareStatus *string `json:"shareStatus,omitempty" tf:"share_status,omitempty"`

	TagsAll map[string]*string `json:"tagsAll,omitempty" tf:"tags_all,omitempty"`
}

type Route53ResolverRuleParameters struct {

	// +kubebuilder:validation:Required
	DomainName *string `json:"domainName" tf:"domain_name,omitempty"`

	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +terrajet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`

	// +kubebuilder:validation:Optional
	ResolverEndpointID *string `json:"resolverEndpointId,omitempty" tf:"resolver_endpoint_id,omitempty"`

	// +kubebuilder:validation:Required
	RuleType *string `json:"ruleType" tf:"rule_type,omitempty"`

	// +kubebuilder:validation:Optional
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// +kubebuilder:validation:Optional
	TargetIP []TargetIPParameters `json:"targetIp,omitempty" tf:"target_ip,omitempty"`
}

type TargetIPObservation struct {
}

type TargetIPParameters struct {

	// +kubebuilder:validation:Required
	IP *string `json:"ip" tf:"ip,omitempty"`

	// +kubebuilder:validation:Optional
	Port *int64 `json:"port,omitempty" tf:"port,omitempty"`
}

// Route53ResolverRuleSpec defines the desired state of Route53ResolverRule
type Route53ResolverRuleSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     Route53ResolverRuleParameters `json:"forProvider"`
}

// Route53ResolverRuleStatus defines the observed state of Route53ResolverRule.
type Route53ResolverRuleStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        Route53ResolverRuleObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Route53ResolverRule is the Schema for the Route53ResolverRules API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tfaws}
type Route53ResolverRule struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              Route53ResolverRuleSpec   `json:"spec"`
	Status            Route53ResolverRuleStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// Route53ResolverRuleList contains a list of Route53ResolverRules
type Route53ResolverRuleList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Route53ResolverRule `json:"items"`
}

// Repository type metadata.
var (
	Route53ResolverRuleKind             = "Route53ResolverRule"
	Route53ResolverRuleGroupKind        = schema.GroupKind{Group: Group, Kind: Route53ResolverRuleKind}.String()
	Route53ResolverRuleKindAPIVersion   = Route53ResolverRuleKind + "." + GroupVersion.String()
	Route53ResolverRuleGroupVersionKind = GroupVersion.WithKind(Route53ResolverRuleKind)
)

func init() {
	SchemeBuilder.Register(&Route53ResolverRule{}, &Route53ResolverRuleList{})
}
