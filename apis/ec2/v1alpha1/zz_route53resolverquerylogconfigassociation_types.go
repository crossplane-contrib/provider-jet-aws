/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type Route53ResolverQueryLogConfigAssociationObservation struct {
}

type Route53ResolverQueryLogConfigAssociationParameters struct {

	// Region is the region you'd like your resource to be created in.
	// +terrajet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`

	// +kubebuilder:validation:Required
	ResolverQueryLogConfigID *string `json:"resolverQueryLogConfigId" tf:"resolver_query_log_config_id,omitempty"`

	// +kubebuilder:validation:Required
	ResourceID *string `json:"resourceId" tf:"resource_id,omitempty"`
}

// Route53ResolverQueryLogConfigAssociationSpec defines the desired state of Route53ResolverQueryLogConfigAssociation
type Route53ResolverQueryLogConfigAssociationSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     Route53ResolverQueryLogConfigAssociationParameters `json:"forProvider"`
}

// Route53ResolverQueryLogConfigAssociationStatus defines the observed state of Route53ResolverQueryLogConfigAssociation.
type Route53ResolverQueryLogConfigAssociationStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        Route53ResolverQueryLogConfigAssociationObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Route53ResolverQueryLogConfigAssociation is the Schema for the Route53ResolverQueryLogConfigAssociations API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tfaws}
type Route53ResolverQueryLogConfigAssociation struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              Route53ResolverQueryLogConfigAssociationSpec   `json:"spec"`
	Status            Route53ResolverQueryLogConfigAssociationStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// Route53ResolverQueryLogConfigAssociationList contains a list of Route53ResolverQueryLogConfigAssociations
type Route53ResolverQueryLogConfigAssociationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Route53ResolverQueryLogConfigAssociation `json:"items"`
}

// Repository type metadata.
var (
	Route53ResolverQueryLogConfigAssociationKind             = "Route53ResolverQueryLogConfigAssociation"
	Route53ResolverQueryLogConfigAssociationGroupKind        = schema.GroupKind{Group: Group, Kind: Route53ResolverQueryLogConfigAssociationKind}.String()
	Route53ResolverQueryLogConfigAssociationKindAPIVersion   = Route53ResolverQueryLogConfigAssociationKind + "." + GroupVersion.String()
	Route53ResolverQueryLogConfigAssociationGroupVersionKind = GroupVersion.WithKind(Route53ResolverQueryLogConfigAssociationKind)
)

func init() {
	SchemeBuilder.Register(&Route53ResolverQueryLogConfigAssociation{}, &Route53ResolverQueryLogConfigAssociationList{})
}
