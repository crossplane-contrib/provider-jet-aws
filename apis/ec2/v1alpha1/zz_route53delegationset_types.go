/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type Route53DelegationSetObservation struct {
	NameServers []*string `json:"nameServers,omitempty" tf:"name_servers,omitempty"`
}

type Route53DelegationSetParameters struct {

	// +kubebuilder:validation:Optional
	ReferenceName *string `json:"referenceName,omitempty" tf:"reference_name,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +terrajet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`
}

// Route53DelegationSetSpec defines the desired state of Route53DelegationSet
type Route53DelegationSetSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     Route53DelegationSetParameters `json:"forProvider"`
}

// Route53DelegationSetStatus defines the observed state of Route53DelegationSet.
type Route53DelegationSetStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        Route53DelegationSetObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Route53DelegationSet is the Schema for the Route53DelegationSets API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tfaws}
type Route53DelegationSet struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              Route53DelegationSetSpec   `json:"spec"`
	Status            Route53DelegationSetStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// Route53DelegationSetList contains a list of Route53DelegationSets
type Route53DelegationSetList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Route53DelegationSet `json:"items"`
}

// Repository type metadata.
var (
	Route53DelegationSetKind             = "Route53DelegationSet"
	Route53DelegationSetGroupKind        = schema.GroupKind{Group: Group, Kind: Route53DelegationSetKind}.String()
	Route53DelegationSetKindAPIVersion   = Route53DelegationSetKind + "." + GroupVersion.String()
	Route53DelegationSetGroupVersionKind = GroupVersion.WithKind(Route53DelegationSetKind)
)

func init() {
	SchemeBuilder.Register(&Route53DelegationSet{}, &Route53DelegationSetList{})
}
