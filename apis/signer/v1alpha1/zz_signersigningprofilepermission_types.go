/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type SignerSigningProfilePermissionObservation struct {
}

type SignerSigningProfilePermissionParameters struct {
	Action string `json:"action" tf:"action"`

	Principal string `json:"principal" tf:"principal"`

	ProfileName string `json:"profileName" tf:"profile_name"`

	ProfileVersion *string `json:"profileVersion,omitempty" tf:"profile_version"`

	StatementID *string `json:"statementID,omitempty" tf:"statement_id"`

	StatementIDPrefix *string `json:"statementIDPrefix,omitempty" tf:"statement_id_prefix"`
}

// SignerSigningProfilePermissionSpec defines the desired state of SignerSigningProfilePermission
type SignerSigningProfilePermissionSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       SignerSigningProfilePermissionParameters `json:"forProvider"`
}

// SignerSigningProfilePermissionStatus defines the observed state of SignerSigningProfilePermission.
type SignerSigningProfilePermissionStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          SignerSigningProfilePermissionObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// SignerSigningProfilePermission is the Schema for the SignerSigningProfilePermissions API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tfaws}
type SignerSigningProfilePermission struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              SignerSigningProfilePermissionSpec   `json:"spec"`
	Status            SignerSigningProfilePermissionStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SignerSigningProfilePermissionList contains a list of SignerSigningProfilePermissions
type SignerSigningProfilePermissionList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []SignerSigningProfilePermission `json:"items"`
}

// Repository type metadata.
var (
	SignerSigningProfilePermissionKind             = "SignerSigningProfilePermission"
	SignerSigningProfilePermissionGroupKind        = schema.GroupKind{Group: Group, Kind: SignerSigningProfilePermissionKind}.String()
	SignerSigningProfilePermissionKindAPIVersion   = SignerSigningProfilePermissionKind + "." + GroupVersion.String()
	SignerSigningProfilePermissionGroupVersionKind = GroupVersion.WithKind(SignerSigningProfilePermissionKind)
)

func init() {
	SchemeBuilder.Register(&SignerSigningProfilePermission{}, &SignerSigningProfilePermissionList{})
}
