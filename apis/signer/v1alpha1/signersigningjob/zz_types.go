/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

// +kubebuilder:object:generate=true
// +groupName=signer.aws.tf.crossplane.io
// +versionName=v1alpha1

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1alpha1 "github.com/crossplane-contrib/provider-tf-aws/apis/signer/v1alpha1"
)

type DestinationObservation struct {
}

type DestinationParameters struct {
	S3 []S3Parameters `json:"s3" tf:"s3"`
}

type RevocationRecordObservation struct {
	Reason string `json:"reason" tf:"reason"`

	RevokedAt string `json:"revokedAt" tf:"revoked_at"`

	RevokedBy string `json:"revokedBy" tf:"revoked_by"`
}

type RevocationRecordParameters struct {
}

type S3Observation struct {
	Bucket string `json:"bucket" tf:"bucket"`

	Key string `json:"key" tf:"key"`
}

type S3Parameters struct {
}

type SignedObjectObservation struct {
	S3 []S3Observation `json:"s3" tf:"s3"`
}

type SignedObjectParameters struct {
}

type SignerSigningJobObservation struct {
	CompletedAt string `json:"completedAt" tf:"completed_at"`

	CreatedAt string `json:"createdAt" tf:"created_at"`

	JobId string `json:"jobId" tf:"job_id"`

	JobInvoker string `json:"jobInvoker" tf:"job_invoker"`

	JobOwner string `json:"jobOwner" tf:"job_owner"`

	PlatformDisplayName string `json:"platformDisplayName" tf:"platform_display_name"`

	PlatformId string `json:"platformId" tf:"platform_id"`

	ProfileVersion string `json:"profileVersion" tf:"profile_version"`

	RequestedBy string `json:"requestedBy" tf:"requested_by"`

	RevocationRecord []RevocationRecordObservation `json:"revocationRecord" tf:"revocation_record"`

	SignatureExpiresAt string `json:"signatureExpiresAt" tf:"signature_expires_at"`

	SignedObject []SignedObjectObservation `json:"signedObject" tf:"signed_object"`

	Status string `json:"status" tf:"status"`

	StatusReason string `json:"statusReason" tf:"status_reason"`
}

type SignerSigningJobParameters struct {
	Destination []DestinationParameters `json:"destination" tf:"destination"`

	IgnoreSigningJobFailure *bool `json:"ignoreSigningJobFailure,omitempty" tf:"ignore_signing_job_failure"`

	ProfileName string `json:"profileName" tf:"profile_name"`

	Source []SourceParameters `json:"source" tf:"source"`
}

type SourceObservation struct {
}

type SourceParameters struct {
	S3 []S3Parameters `json:"s3" tf:"s3"`
}

// SignerSigningJobSpec defines the desired state of SignerSigningJob
type SignerSigningJobSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       SignerSigningJobParameters `json:"forProvider"`
}

// SignerSigningJobStatus defines the observed state of SignerSigningJob.
type SignerSigningJobStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          SignerSigningJobObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// SignerSigningJob is the Schema for the SignerSigningJobs API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type SignerSigningJob struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              SignerSigningJobSpec   `json:"spec"`
	Status            SignerSigningJobStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SignerSigningJobList contains a list of SignerSigningJobs
type SignerSigningJobList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []SignerSigningJob `json:"items"`
}

// Repository type metadata.
var (
	SignerSigningJobKind             = "SignerSigningJob"
	SignerSigningJobGroupKind        = schema.GroupKind{Group: v1alpha1.Group, Kind: SignerSigningJobKind}.String()
	SignerSigningJobKindAPIVersion   = SignerSigningJobKind + "." + v1alpha1.GroupVersion.String()
	SignerSigningJobGroupVersionKind = v1alpha1.GroupVersion.WithKind(SignerSigningJobKind)
)

func init() {
	v1alpha1.SchemeBuilder.Register(&SignerSigningJob{}, &SignerSigningJobList{})
}
