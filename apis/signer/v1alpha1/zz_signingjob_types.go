/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type DestinationObservation struct {
}

type DestinationParameters struct {

	// +kubebuilder:validation:Required
	S3 []S3Parameters `json:"s3" tf:"s3,omitempty"`
}

type RevocationRecordObservation struct {
	Reason *string `json:"reason,omitempty" tf:"reason,omitempty"`

	RevokedAt *string `json:"revokedAt,omitempty" tf:"revoked_at,omitempty"`

	RevokedBy *string `json:"revokedBy,omitempty" tf:"revoked_by,omitempty"`
}

type RevocationRecordParameters struct {
}

type S3Observation struct {
}

type S3Parameters struct {

	// +kubebuilder:validation:Required
	Bucket *string `json:"bucket" tf:"bucket,omitempty"`

	// +kubebuilder:validation:Optional
	Prefix *string `json:"prefix,omitempty" tf:"prefix,omitempty"`
}

type SignedObjectObservation struct {
	S3 []SignedObjectS3Observation `json:"s3,omitempty" tf:"s3,omitempty"`
}

type SignedObjectParameters struct {
}

type SignedObjectS3Observation struct {
	Bucket *string `json:"bucket,omitempty" tf:"bucket,omitempty"`

	Key *string `json:"key,omitempty" tf:"key,omitempty"`
}

type SignedObjectS3Parameters struct {
}

type SigningJobObservation struct {
	CompletedAt *string `json:"completedAt,omitempty" tf:"completed_at,omitempty"`

	CreatedAt *string `json:"createdAt,omitempty" tf:"created_at,omitempty"`

	JobID *string `json:"jobId,omitempty" tf:"job_id,omitempty"`

	JobInvoker *string `json:"jobInvoker,omitempty" tf:"job_invoker,omitempty"`

	JobOwner *string `json:"jobOwner,omitempty" tf:"job_owner,omitempty"`

	PlatformDisplayName *string `json:"platformDisplayName,omitempty" tf:"platform_display_name,omitempty"`

	PlatformID *string `json:"platformId,omitempty" tf:"platform_id,omitempty"`

	ProfileVersion *string `json:"profileVersion,omitempty" tf:"profile_version,omitempty"`

	RequestedBy *string `json:"requestedBy,omitempty" tf:"requested_by,omitempty"`

	RevocationRecord []RevocationRecordObservation `json:"revocationRecord,omitempty" tf:"revocation_record,omitempty"`

	SignatureExpiresAt *string `json:"signatureExpiresAt,omitempty" tf:"signature_expires_at,omitempty"`

	SignedObject []SignedObjectObservation `json:"signedObject,omitempty" tf:"signed_object,omitempty"`

	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	StatusReason *string `json:"statusReason,omitempty" tf:"status_reason,omitempty"`
}

type SigningJobParameters struct {

	// +kubebuilder:validation:Required
	Destination []DestinationParameters `json:"destination" tf:"destination,omitempty"`

	// +kubebuilder:validation:Optional
	IgnoreSigningJobFailure *bool `json:"ignoreSigningJobFailure,omitempty" tf:"ignore_signing_job_failure,omitempty"`

	// +kubebuilder:validation:Required
	ProfileName *string `json:"profileName" tf:"profile_name,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +terrajet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`

	// +kubebuilder:validation:Required
	Source []SourceParameters `json:"source" tf:"source,omitempty"`
}

type SourceObservation struct {
}

type SourceParameters struct {

	// +kubebuilder:validation:Required
	S3 []SourceS3Parameters `json:"s3" tf:"s3,omitempty"`
}

type SourceS3Observation struct {
}

type SourceS3Parameters struct {

	// +kubebuilder:validation:Required
	Bucket *string `json:"bucket" tf:"bucket,omitempty"`

	// +kubebuilder:validation:Required
	Key *string `json:"key" tf:"key,omitempty"`

	// +kubebuilder:validation:Required
	Version *string `json:"version" tf:"version,omitempty"`
}

// SigningJobSpec defines the desired state of SigningJob
type SigningJobSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     SigningJobParameters `json:"forProvider"`
}

// SigningJobStatus defines the observed state of SigningJob.
type SigningJobStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        SigningJobObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// SigningJob is the Schema for the SigningJobs API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tfaws}
type SigningJob struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              SigningJobSpec   `json:"spec"`
	Status            SigningJobStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SigningJobList contains a list of SigningJobs
type SigningJobList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []SigningJob `json:"items"`
}

// Repository type metadata.
var (
	SigningJobKind             = "SigningJob"
	SigningJobGroupKind        = schema.GroupKind{Group: Group, Kind: SigningJobKind}.String()
	SigningJobKindAPIVersion   = SigningJobKind + "." + GroupVersion.String()
	SigningJobGroupVersionKind = GroupVersion.WithKind(SigningJobKind)
)

func init() {
	SchemeBuilder.Register(&SigningJob{}, &SigningJobList{})
}
