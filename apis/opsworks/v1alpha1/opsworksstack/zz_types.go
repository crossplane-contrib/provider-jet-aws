/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

// +kubebuilder:object:generate=true
// +groupName=opsworks.aws.tf.crossplane.io
// +versionName=v1alpha1

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1alpha1 "github.com/crossplane-contrib/provider-tf-aws/apis/opsworks/v1alpha1"
)

type CustomCookbooksSourceObservation struct {
}

type CustomCookbooksSourceParameters struct {
	Password *string `json:"password,omitempty" tf:"password"`

	Revision *string `json:"revision,omitempty" tf:"revision"`

	SshKey *string `json:"sshKey,omitempty" tf:"ssh_key"`

	Type string `json:"type" tf:"type"`

	Url string `json:"url" tf:"url"`

	Username *string `json:"username,omitempty" tf:"username"`
}

type OpsworksStackObservation struct {
	Arn string `json:"arn" tf:"arn"`

	StackEndpoint string `json:"stackEndpoint" tf:"stack_endpoint"`
}

type OpsworksStackParameters struct {
	AgentVersion *string `json:"agentVersion,omitempty" tf:"agent_version"`

	BerkshelfVersion *string `json:"berkshelfVersion,omitempty" tf:"berkshelf_version"`

	Color *string `json:"color,omitempty" tf:"color"`

	ConfigurationManagerName *string `json:"configurationManagerName,omitempty" tf:"configuration_manager_name"`

	ConfigurationManagerVersion *string `json:"configurationManagerVersion,omitempty" tf:"configuration_manager_version"`

	CustomCookbooksSource []CustomCookbooksSourceParameters `json:"customCookbooksSource,omitempty" tf:"custom_cookbooks_source"`

	CustomJson *string `json:"customJson,omitempty" tf:"custom_json"`

	DefaultAvailabilityZone *string `json:"defaultAvailabilityZone,omitempty" tf:"default_availability_zone"`

	DefaultInstanceProfileArn string `json:"defaultInstanceProfileArn" tf:"default_instance_profile_arn"`

	DefaultOs *string `json:"defaultOs,omitempty" tf:"default_os"`

	DefaultRootDeviceType *string `json:"defaultRootDeviceType,omitempty" tf:"default_root_device_type"`

	DefaultSshKeyName *string `json:"defaultSshKeyName,omitempty" tf:"default_ssh_key_name"`

	DefaultSubnetId *string `json:"defaultSubnetId,omitempty" tf:"default_subnet_id"`

	HostnameTheme *string `json:"hostnameTheme,omitempty" tf:"hostname_theme"`

	ManageBerkshelf *bool `json:"manageBerkshelf,omitempty" tf:"manage_berkshelf"`

	Name string `json:"name" tf:"name"`

	Region string `json:"region" tf:"region"`

	ServiceRoleArn string `json:"serviceRoleArn" tf:"service_role_arn"`

	Tags map[string]string `json:"tags,omitempty" tf:"tags"`

	TagsAll map[string]string `json:"tagsAll,omitempty" tf:"tags_all"`

	UseCustomCookbooks *bool `json:"useCustomCookbooks,omitempty" tf:"use_custom_cookbooks"`

	UseOpsworksSecurityGroups *bool `json:"useOpsworksSecurityGroups,omitempty" tf:"use_opsworks_security_groups"`

	VpcId *string `json:"vpcId,omitempty" tf:"vpc_id"`
}

// OpsworksStackSpec defines the desired state of OpsworksStack
type OpsworksStackSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       OpsworksStackParameters `json:"forProvider"`
}

// OpsworksStackStatus defines the observed state of OpsworksStack.
type OpsworksStackStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          OpsworksStackObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// OpsworksStack is the Schema for the OpsworksStacks API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type OpsworksStack struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              OpsworksStackSpec   `json:"spec"`
	Status            OpsworksStackStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// OpsworksStackList contains a list of OpsworksStacks
type OpsworksStackList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []OpsworksStack `json:"items"`
}

// Repository type metadata.
var (
	OpsworksStackKind             = "OpsworksStack"
	OpsworksStackGroupKind        = schema.GroupKind{Group: v1alpha1.Group, Kind: OpsworksStackKind}.String()
	OpsworksStackKindAPIVersion   = OpsworksStackKind + "." + v1alpha1.GroupVersion.String()
	OpsworksStackGroupVersionKind = v1alpha1.GroupVersion.WithKind(OpsworksStackKind)
)

func init() {
	v1alpha1.SchemeBuilder.Register(&OpsworksStack{}, &OpsworksStackList{})
}
