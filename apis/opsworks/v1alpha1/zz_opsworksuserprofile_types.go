/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type OpsworksUserProfileObservation struct {
}

type OpsworksUserProfileParameters struct {
	AllowSelfManagement *bool `json:"allowSelfManagement,omitempty" tf:"allow_self_management"`

	SSHPublicKey *string `json:"sshPublicKey,omitempty" tf:"ssh_public_key"`

	SSHUsername string `json:"sshUsername" tf:"ssh_username"`

	UserARN string `json:"userARN" tf:"user_arn"`
}

// OpsworksUserProfileSpec defines the desired state of OpsworksUserProfile
type OpsworksUserProfileSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       OpsworksUserProfileParameters `json:"forProvider"`
}

// OpsworksUserProfileStatus defines the observed state of OpsworksUserProfile.
type OpsworksUserProfileStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          OpsworksUserProfileObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// OpsworksUserProfile is the Schema for the OpsworksUserProfiles API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tfaws}
type OpsworksUserProfile struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              OpsworksUserProfileSpec   `json:"spec"`
	Status            OpsworksUserProfileStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// OpsworksUserProfileList contains a list of OpsworksUserProfiles
type OpsworksUserProfileList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []OpsworksUserProfile `json:"items"`
}

// Repository type metadata.
var (
	OpsworksUserProfileKind             = "OpsworksUserProfile"
	OpsworksUserProfileGroupKind        = schema.GroupKind{Group: Group, Kind: OpsworksUserProfileKind}.String()
	OpsworksUserProfileKindAPIVersion   = OpsworksUserProfileKind + "." + GroupVersion.String()
	OpsworksUserProfileGroupVersionKind = GroupVersion.WithKind(OpsworksUserProfileKind)
)

func init() {
	SchemeBuilder.Register(&OpsworksUserProfile{}, &OpsworksUserProfileList{})
}
