/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

// +kubebuilder:object:generate=true
// +groupName=opsworks.aws.tf.crossplane.io
// +versionName=v1alpha1

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1alpha1 "github.com/crossplane-contrib/provider-tf-aws/apis/opsworks/v1alpha1"
)

type OpsworksRdsDbInstanceObservation struct {
}

type OpsworksRdsDbInstanceParameters struct {
	DbPassword string `json:"dbPassword" tf:"db_password"`

	DbUser string `json:"dbUser" tf:"db_user"`

	RdsDbInstanceArn string `json:"rdsDbInstanceArn" tf:"rds_db_instance_arn"`

	StackId string `json:"stackId" tf:"stack_id"`
}

// OpsworksRdsDbInstanceSpec defines the desired state of OpsworksRdsDbInstance
type OpsworksRdsDbInstanceSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       OpsworksRdsDbInstanceParameters `json:"forProvider"`
}

// OpsworksRdsDbInstanceStatus defines the observed state of OpsworksRdsDbInstance.
type OpsworksRdsDbInstanceStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          OpsworksRdsDbInstanceObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// OpsworksRdsDbInstance is the Schema for the OpsworksRdsDbInstances API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type OpsworksRdsDbInstance struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              OpsworksRdsDbInstanceSpec   `json:"spec"`
	Status            OpsworksRdsDbInstanceStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// OpsworksRdsDbInstanceList contains a list of OpsworksRdsDbInstances
type OpsworksRdsDbInstanceList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []OpsworksRdsDbInstance `json:"items"`
}

// Repository type metadata.
var (
	OpsworksRdsDbInstanceKind             = "OpsworksRdsDbInstance"
	OpsworksRdsDbInstanceGroupKind        = schema.GroupKind{Group: v1alpha1.Group, Kind: OpsworksRdsDbInstanceKind}.String()
	OpsworksRdsDbInstanceKindAPIVersion   = OpsworksRdsDbInstanceKind + "." + v1alpha1.GroupVersion.String()
	OpsworksRdsDbInstanceGroupVersionKind = v1alpha1.GroupVersion.WithKind(OpsworksRdsDbInstanceKind)
)

func init() {
	v1alpha1.SchemeBuilder.Register(&OpsworksRdsDbInstance{}, &OpsworksRdsDbInstanceList{})
}
