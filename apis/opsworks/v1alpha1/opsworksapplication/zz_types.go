/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

// +kubebuilder:object:generate=true
// +groupName=opsworks.aws.tf.crossplane.io
// +versionName=v1alpha1

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1alpha1 "github.com/crossplane-contrib/provider-tf-aws/apis/opsworks/v1alpha1"
)

type AppSourceObservation struct {
}

type AppSourceParameters struct {
	Password *string `json:"password,omitempty" tf:"password"`

	Revision *string `json:"revision,omitempty" tf:"revision"`

	SshKey *string `json:"sshKey,omitempty" tf:"ssh_key"`

	Type string `json:"type" tf:"type"`

	Url *string `json:"url,omitempty" tf:"url"`

	Username *string `json:"username,omitempty" tf:"username"`
}

type EnvironmentObservation struct {
}

type EnvironmentParameters struct {
	Key string `json:"key" tf:"key"`

	Secure *bool `json:"secure,omitempty" tf:"secure"`

	Value string `json:"value" tf:"value"`
}

type OpsworksApplicationObservation struct {
}

type OpsworksApplicationParameters struct {
	AppSource []AppSourceParameters `json:"appSource,omitempty" tf:"app_source"`

	AutoBundleOnDeploy *string `json:"autoBundleOnDeploy,omitempty" tf:"auto_bundle_on_deploy"`

	AwsFlowRubySettings *string `json:"awsFlowRubySettings,omitempty" tf:"aws_flow_ruby_settings"`

	DataSourceArn *string `json:"dataSourceArn,omitempty" tf:"data_source_arn"`

	DataSourceDatabaseName *string `json:"dataSourceDatabaseName,omitempty" tf:"data_source_database_name"`

	DataSourceType *string `json:"dataSourceType,omitempty" tf:"data_source_type"`

	Description *string `json:"description,omitempty" tf:"description"`

	DocumentRoot *string `json:"documentRoot,omitempty" tf:"document_root"`

	Domains []string `json:"domains,omitempty" tf:"domains"`

	EnableSsl *bool `json:"enableSsl,omitempty" tf:"enable_ssl"`

	Environment []EnvironmentParameters `json:"environment,omitempty" tf:"environment"`

	Name string `json:"name" tf:"name"`

	RailsEnv *string `json:"railsEnv,omitempty" tf:"rails_env"`

	ShortName *string `json:"shortName,omitempty" tf:"short_name"`

	SslConfiguration []SslConfigurationParameters `json:"sslConfiguration,omitempty" tf:"ssl_configuration"`

	StackId string `json:"stackId" tf:"stack_id"`

	Type string `json:"type" tf:"type"`
}

type SslConfigurationObservation struct {
}

type SslConfigurationParameters struct {
	Certificate string `json:"certificate" tf:"certificate"`

	Chain *string `json:"chain,omitempty" tf:"chain"`

	PrivateKey string `json:"privateKey" tf:"private_key"`
}

// OpsworksApplicationSpec defines the desired state of OpsworksApplication
type OpsworksApplicationSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       OpsworksApplicationParameters `json:"forProvider"`
}

// OpsworksApplicationStatus defines the observed state of OpsworksApplication.
type OpsworksApplicationStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          OpsworksApplicationObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// OpsworksApplication is the Schema for the OpsworksApplications API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type OpsworksApplication struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              OpsworksApplicationSpec   `json:"spec"`
	Status            OpsworksApplicationStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// OpsworksApplicationList contains a list of OpsworksApplications
type OpsworksApplicationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []OpsworksApplication `json:"items"`
}

// Repository type metadata.
var (
	OpsworksApplicationKind             = "OpsworksApplication"
	OpsworksApplicationGroupKind        = schema.GroupKind{Group: v1alpha1.Group, Kind: OpsworksApplicationKind}.String()
	OpsworksApplicationKindAPIVersion   = OpsworksApplicationKind + "." + v1alpha1.GroupVersion.String()
	OpsworksApplicationGroupVersionKind = v1alpha1.GroupVersion.WithKind(OpsworksApplicationKind)
)

func init() {
	v1alpha1.SchemeBuilder.Register(&OpsworksApplication{}, &OpsworksApplicationList{})
}
