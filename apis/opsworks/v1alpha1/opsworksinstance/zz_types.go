/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

// +kubebuilder:object:generate=true
// +groupName=opsworks.aws.tf.crossplane.io
// +versionName=v1alpha1

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1alpha1 "github.com/crossplane-contrib/provider-tf-aws/apis/opsworks/v1alpha1"
)

type EbsBlockDeviceObservation struct {
}

type EbsBlockDeviceParameters struct {
	DeleteOnTermination *bool `json:"deleteOnTermination,omitempty" tf:"delete_on_termination"`

	DeviceName string `json:"deviceName" tf:"device_name"`

	Iops *int64 `json:"iops,omitempty" tf:"iops"`

	SnapshotId *string `json:"snapshotId,omitempty" tf:"snapshot_id"`

	VolumeSize *int64 `json:"volumeSize,omitempty" tf:"volume_size"`

	VolumeType *string `json:"volumeType,omitempty" tf:"volume_type"`
}

type EphemeralBlockDeviceObservation struct {
}

type EphemeralBlockDeviceParameters struct {
	DeviceName string `json:"deviceName" tf:"device_name"`

	VirtualName string `json:"virtualName" tf:"virtual_name"`
}

type OpsworksInstanceObservation struct {
	Ec2InstanceId string `json:"ec2InstanceId" tf:"ec2_instance_id"`
}

type OpsworksInstanceParameters struct {
	AgentVersion *string `json:"agentVersion,omitempty" tf:"agent_version"`

	AmiId *string `json:"amiId,omitempty" tf:"ami_id"`

	Architecture *string `json:"architecture,omitempty" tf:"architecture"`

	AutoScalingType *string `json:"autoScalingType,omitempty" tf:"auto_scaling_type"`

	AvailabilityZone *string `json:"availabilityZone,omitempty" tf:"availability_zone"`

	CreatedAt *string `json:"createdAt,omitempty" tf:"created_at"`

	DeleteEbs *bool `json:"deleteEbs,omitempty" tf:"delete_ebs"`

	DeleteEip *bool `json:"deleteEip,omitempty" tf:"delete_eip"`

	EbsBlockDevice []EbsBlockDeviceParameters `json:"ebsBlockDevice,omitempty" tf:"ebs_block_device"`

	EbsOptimized *bool `json:"ebsOptimized,omitempty" tf:"ebs_optimized"`

	EcsClusterArn *string `json:"ecsClusterArn,omitempty" tf:"ecs_cluster_arn"`

	ElasticIp *string `json:"elasticIp,omitempty" tf:"elastic_ip"`

	EphemeralBlockDevice []EphemeralBlockDeviceParameters `json:"ephemeralBlockDevice,omitempty" tf:"ephemeral_block_device"`

	Hostname *string `json:"hostname,omitempty" tf:"hostname"`

	InfrastructureClass *string `json:"infrastructureClass,omitempty" tf:"infrastructure_class"`

	InstallUpdatesOnBoot *bool `json:"installUpdatesOnBoot,omitempty" tf:"install_updates_on_boot"`

	InstanceProfileArn *string `json:"instanceProfileArn,omitempty" tf:"instance_profile_arn"`

	InstanceType *string `json:"instanceType,omitempty" tf:"instance_type"`

	LastServiceErrorId *string `json:"lastServiceErrorId,omitempty" tf:"last_service_error_id"`

	LayerIds []string `json:"layerIds" tf:"layer_ids"`

	Os *string `json:"os,omitempty" tf:"os"`

	Platform *string `json:"platform,omitempty" tf:"platform"`

	PrivateDns *string `json:"privateDns,omitempty" tf:"private_dns"`

	PrivateIp *string `json:"privateIp,omitempty" tf:"private_ip"`

	PublicDns *string `json:"publicDns,omitempty" tf:"public_dns"`

	PublicIp *string `json:"publicIp,omitempty" tf:"public_ip"`

	RegisteredBy *string `json:"registeredBy,omitempty" tf:"registered_by"`

	ReportedAgentVersion *string `json:"reportedAgentVersion,omitempty" tf:"reported_agent_version"`

	ReportedOsFamily *string `json:"reportedOsFamily,omitempty" tf:"reported_os_family"`

	ReportedOsName *string `json:"reportedOsName,omitempty" tf:"reported_os_name"`

	ReportedOsVersion *string `json:"reportedOsVersion,omitempty" tf:"reported_os_version"`

	RootBlockDevice []RootBlockDeviceParameters `json:"rootBlockDevice,omitempty" tf:"root_block_device"`

	RootDeviceType *string `json:"rootDeviceType,omitempty" tf:"root_device_type"`

	RootDeviceVolumeId *string `json:"rootDeviceVolumeId,omitempty" tf:"root_device_volume_id"`

	SecurityGroupIds []string `json:"securityGroupIds,omitempty" tf:"security_group_ids"`

	SshHostDsaKeyFingerprint *string `json:"sshHostDsaKeyFingerprint,omitempty" tf:"ssh_host_dsa_key_fingerprint"`

	SshHostRsaKeyFingerprint *string `json:"sshHostRsaKeyFingerprint,omitempty" tf:"ssh_host_rsa_key_fingerprint"`

	SshKeyName *string `json:"sshKeyName,omitempty" tf:"ssh_key_name"`

	StackId string `json:"stackId" tf:"stack_id"`

	State *string `json:"state,omitempty" tf:"state"`

	Status *string `json:"status,omitempty" tf:"status"`

	SubnetId *string `json:"subnetId,omitempty" tf:"subnet_id"`

	Tenancy *string `json:"tenancy,omitempty" tf:"tenancy"`

	VirtualizationType *string `json:"virtualizationType,omitempty" tf:"virtualization_type"`
}

type RootBlockDeviceObservation struct {
}

type RootBlockDeviceParameters struct {
	DeleteOnTermination *bool `json:"deleteOnTermination,omitempty" tf:"delete_on_termination"`

	Iops *int64 `json:"iops,omitempty" tf:"iops"`

	VolumeSize *int64 `json:"volumeSize,omitempty" tf:"volume_size"`

	VolumeType *string `json:"volumeType,omitempty" tf:"volume_type"`
}

// OpsworksInstanceSpec defines the desired state of OpsworksInstance
type OpsworksInstanceSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       OpsworksInstanceParameters `json:"forProvider"`
}

// OpsworksInstanceStatus defines the observed state of OpsworksInstance.
type OpsworksInstanceStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          OpsworksInstanceObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// OpsworksInstance is the Schema for the OpsworksInstances API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type OpsworksInstance struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              OpsworksInstanceSpec   `json:"spec"`
	Status            OpsworksInstanceStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// OpsworksInstanceList contains a list of OpsworksInstances
type OpsworksInstanceList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []OpsworksInstance `json:"items"`
}

// Repository type metadata.
var (
	OpsworksInstanceKind             = "OpsworksInstance"
	OpsworksInstanceGroupKind        = schema.GroupKind{Group: v1alpha1.Group, Kind: OpsworksInstanceKind}.String()
	OpsworksInstanceKindAPIVersion   = OpsworksInstanceKind + "." + v1alpha1.GroupVersion.String()
	OpsworksInstanceGroupVersionKind = v1alpha1.GroupVersion.WithKind(OpsworksInstanceKind)
)

func init() {
	v1alpha1.SchemeBuilder.Register(&OpsworksInstance{}, &OpsworksInstanceList{})
}
