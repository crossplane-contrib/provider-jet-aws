/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha2

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ConnectionAssociationObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type ConnectionAssociationParameters struct {

	// +crossplane:generate:reference:type=Connection
	// +kubebuilder:validation:Optional
	ConnectionID *string `json:"connectionId,omitempty" tf:"connection_id,omitempty"`

	// +kubebuilder:validation:Optional
	ConnectionIDRef *v1.Reference `json:"connectionIdRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	ConnectionIDSelector *v1.Selector `json:"connectionIdSelector,omitempty" tf:"-"`

	// +crossplane:generate:reference:type=Lag
	// +kubebuilder:validation:Optional
	LagID *string `json:"lagId,omitempty" tf:"lag_id,omitempty"`

	// +kubebuilder:validation:Optional
	LagIDRef *v1.Reference `json:"lagIdRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	LagIDSelector *v1.Selector `json:"lagIdSelector,omitempty" tf:"-"`

	// Region is the region you'd like your resource to be created in.
	// +terrajet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`
}

// ConnectionAssociationSpec defines the desired state of ConnectionAssociation
type ConnectionAssociationSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ConnectionAssociationParameters `json:"forProvider"`
}

// ConnectionAssociationStatus defines the observed state of ConnectionAssociation.
type ConnectionAssociationStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ConnectionAssociationObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ConnectionAssociation is the Schema for the ConnectionAssociations API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,awsjet}
type ConnectionAssociation struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ConnectionAssociationSpec   `json:"spec"`
	Status            ConnectionAssociationStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ConnectionAssociationList contains a list of ConnectionAssociations
type ConnectionAssociationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ConnectionAssociation `json:"items"`
}

// Repository type metadata.
var (
	ConnectionAssociation_Kind             = "ConnectionAssociation"
	ConnectionAssociation_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ConnectionAssociation_Kind}.String()
	ConnectionAssociation_KindAPIVersion   = ConnectionAssociation_Kind + "." + CRDGroupVersion.String()
	ConnectionAssociation_GroupVersionKind = CRDGroupVersion.WithKind(ConnectionAssociation_Kind)
)

func init() {
	SchemeBuilder.Register(&ConnectionAssociation{}, &ConnectionAssociationList{})
}
