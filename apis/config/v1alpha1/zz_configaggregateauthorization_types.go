/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type ConfigAggregateAuthorizationObservation struct {
	ARN string `json:"arn" tf:"arn"`
}

type ConfigAggregateAuthorizationParameters struct {
	AccountID string `json:"accountID" tf:"account_id"`

	Region string `json:"region" tf:"region"`

	Tags map[string]string `json:"tags,omitempty" tf:"tags"`

	TagsAll map[string]string `json:"tagsAll,omitempty" tf:"tags_all"`
}

// ConfigAggregateAuthorizationSpec defines the desired state of ConfigAggregateAuthorization
type ConfigAggregateAuthorizationSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       ConfigAggregateAuthorizationParameters `json:"forProvider"`
}

// ConfigAggregateAuthorizationStatus defines the observed state of ConfigAggregateAuthorization.
type ConfigAggregateAuthorizationStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          ConfigAggregateAuthorizationObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ConfigAggregateAuthorization is the Schema for the ConfigAggregateAuthorizations API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tfaws}
type ConfigAggregateAuthorization struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ConfigAggregateAuthorizationSpec   `json:"spec"`
	Status            ConfigAggregateAuthorizationStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ConfigAggregateAuthorizationList contains a list of ConfigAggregateAuthorizations
type ConfigAggregateAuthorizationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ConfigAggregateAuthorization `json:"items"`
}

// Repository type metadata.
var (
	ConfigAggregateAuthorizationKind             = "ConfigAggregateAuthorization"
	ConfigAggregateAuthorizationGroupKind        = schema.GroupKind{Group: Group, Kind: ConfigAggregateAuthorizationKind}.String()
	ConfigAggregateAuthorizationKindAPIVersion   = ConfigAggregateAuthorizationKind + "." + GroupVersion.String()
	ConfigAggregateAuthorizationGroupVersionKind = GroupVersion.WithKind(ConfigAggregateAuthorizationKind)
)

func init() {
	SchemeBuilder.Register(&ConfigAggregateAuthorization{}, &ConfigAggregateAuthorizationList{})
}
