/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type ConfigConformancePackObservation struct {
	ARN string `json:"arn" tf:"arn"`
}

type ConfigConformancePackParameters struct {
	DeliveryS3Bucket *string `json:"deliveryS3Bucket,omitempty" tf:"delivery_s3_bucket"`

	DeliveryS3KeyPrefix *string `json:"deliveryS3KeyPrefix,omitempty" tf:"delivery_s3_key_prefix"`

	InputParameter []InputParameterParameters `json:"inputParameter,omitempty" tf:"input_parameter"`

	Name string `json:"name" tf:"name"`

	TemplateBody *string `json:"templateBody,omitempty" tf:"template_body"`

	TemplateS3URI *string `json:"templateS3URI,omitempty" tf:"template_s3_uri"`
}

type InputParameterObservation struct {
}

type InputParameterParameters struct {
	ParameterName string `json:"parameterName" tf:"parameter_name"`

	ParameterValue string `json:"parameterValue" tf:"parameter_value"`
}

// ConfigConformancePackSpec defines the desired state of ConfigConformancePack
type ConfigConformancePackSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       ConfigConformancePackParameters `json:"forProvider"`
}

// ConfigConformancePackStatus defines the observed state of ConfigConformancePack.
type ConfigConformancePackStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          ConfigConformancePackObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ConfigConformancePack is the Schema for the ConfigConformancePacks API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tfaws}
type ConfigConformancePack struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ConfigConformancePackSpec   `json:"spec"`
	Status            ConfigConformancePackStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ConfigConformancePackList contains a list of ConfigConformancePacks
type ConfigConformancePackList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ConfigConformancePack `json:"items"`
}

// Repository type metadata.
var (
	ConfigConformancePackKind             = "ConfigConformancePack"
	ConfigConformancePackGroupKind        = schema.GroupKind{Group: Group, Kind: ConfigConformancePackKind}.String()
	ConfigConformancePackKindAPIVersion   = ConfigConformancePackKind + "." + GroupVersion.String()
	ConfigConformancePackGroupVersionKind = GroupVersion.WithKind(ConfigConformancePackKind)
)

func init() {
	SchemeBuilder.Register(&ConfigConformancePack{}, &ConfigConformancePackList{})
}
