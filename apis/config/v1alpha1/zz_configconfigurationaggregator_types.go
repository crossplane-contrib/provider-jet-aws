/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type AccountAggregationSourceObservation struct {
}

type AccountAggregationSourceParameters struct {
	AccountIds []string `json:"accountIds" tf:"account_ids"`

	AllRegions *bool `json:"allRegions,omitempty" tf:"all_regions"`

	Regions []string `json:"regions,omitempty" tf:"regions"`
}

type ConfigConfigurationAggregatorObservation struct {
	ARN string `json:"arn" tf:"arn"`
}

type ConfigConfigurationAggregatorParameters struct {
	AccountAggregationSource []AccountAggregationSourceParameters `json:"accountAggregationSource,omitempty" tf:"account_aggregation_source"`

	Name string `json:"name" tf:"name"`

	OrganizationAggregationSource []OrganizationAggregationSourceParameters `json:"organizationAggregationSource,omitempty" tf:"organization_aggregation_source"`

	Tags map[string]string `json:"tags,omitempty" tf:"tags"`

	TagsAll map[string]string `json:"tagsAll,omitempty" tf:"tags_all"`
}

type OrganizationAggregationSourceObservation struct {
}

type OrganizationAggregationSourceParameters struct {
	AllRegions *bool `json:"allRegions,omitempty" tf:"all_regions"`

	Regions []string `json:"regions,omitempty" tf:"regions"`

	RoleARN string `json:"roleARN" tf:"role_arn"`
}

// ConfigConfigurationAggregatorSpec defines the desired state of ConfigConfigurationAggregator
type ConfigConfigurationAggregatorSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       ConfigConfigurationAggregatorParameters `json:"forProvider"`
}

// ConfigConfigurationAggregatorStatus defines the observed state of ConfigConfigurationAggregator.
type ConfigConfigurationAggregatorStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          ConfigConfigurationAggregatorObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ConfigConfigurationAggregator is the Schema for the ConfigConfigurationAggregators API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tfaws}
type ConfigConfigurationAggregator struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ConfigConfigurationAggregatorSpec   `json:"spec"`
	Status            ConfigConfigurationAggregatorStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ConfigConfigurationAggregatorList contains a list of ConfigConfigurationAggregators
type ConfigConfigurationAggregatorList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ConfigConfigurationAggregator `json:"items"`
}

// Repository type metadata.
var (
	ConfigConfigurationAggregatorKind             = "ConfigConfigurationAggregator"
	ConfigConfigurationAggregatorGroupKind        = schema.GroupKind{Group: Group, Kind: ConfigConfigurationAggregatorKind}.String()
	ConfigConfigurationAggregatorKindAPIVersion   = ConfigConfigurationAggregatorKind + "." + GroupVersion.String()
	ConfigConfigurationAggregatorGroupVersionKind = GroupVersion.WithKind(ConfigConfigurationAggregatorKind)
)

func init() {
	SchemeBuilder.Register(&ConfigConfigurationAggregator{}, &ConfigConfigurationAggregatorList{})
}
