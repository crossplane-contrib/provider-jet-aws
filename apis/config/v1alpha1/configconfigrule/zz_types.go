/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

// +kubebuilder:object:generate=true
// +groupName=config.aws.tf.crossplane.io
// +versionName=v1alpha1

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1alpha1 "github.com/crossplane-contrib/provider-tf-aws/apis/config/v1alpha1"
)

type ConfigConfigRuleObservation struct {
	Arn string `json:"arn" tf:"arn"`

	RuleId string `json:"ruleId" tf:"rule_id"`
}

type ConfigConfigRuleParameters struct {
	Description *string `json:"description,omitempty" tf:"description"`

	InputParameters *string `json:"inputParameters,omitempty" tf:"input_parameters"`

	MaximumExecutionFrequency *string `json:"maximumExecutionFrequency,omitempty" tf:"maximum_execution_frequency"`

	Name string `json:"name" tf:"name"`

	Scope []ScopeParameters `json:"scope,omitempty" tf:"scope"`

	Source []SourceParameters `json:"source" tf:"source"`

	Tags map[string]string `json:"tags,omitempty" tf:"tags"`

	TagsAll map[string]string `json:"tagsAll,omitempty" tf:"tags_all"`
}

type ScopeObservation struct {
}

type ScopeParameters struct {
	ComplianceResourceId *string `json:"complianceResourceId,omitempty" tf:"compliance_resource_id"`

	ComplianceResourceTypes []string `json:"complianceResourceTypes,omitempty" tf:"compliance_resource_types"`

	TagKey *string `json:"tagKey,omitempty" tf:"tag_key"`

	TagValue *string `json:"tagValue,omitempty" tf:"tag_value"`
}

type SourceDetailObservation struct {
}

type SourceDetailParameters struct {
	EventSource *string `json:"eventSource,omitempty" tf:"event_source"`

	MaximumExecutionFrequency *string `json:"maximumExecutionFrequency,omitempty" tf:"maximum_execution_frequency"`

	MessageType *string `json:"messageType,omitempty" tf:"message_type"`
}

type SourceObservation struct {
}

type SourceParameters struct {
	Owner string `json:"owner" tf:"owner"`

	SourceDetail []SourceDetailParameters `json:"sourceDetail,omitempty" tf:"source_detail"`

	SourceIdentifier string `json:"sourceIdentifier" tf:"source_identifier"`
}

// ConfigConfigRuleSpec defines the desired state of ConfigConfigRule
type ConfigConfigRuleSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       ConfigConfigRuleParameters `json:"forProvider"`
}

// ConfigConfigRuleStatus defines the observed state of ConfigConfigRule.
type ConfigConfigRuleStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          ConfigConfigRuleObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ConfigConfigRule is the Schema for the ConfigConfigRules API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type ConfigConfigRule struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ConfigConfigRuleSpec   `json:"spec"`
	Status            ConfigConfigRuleStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ConfigConfigRuleList contains a list of ConfigConfigRules
type ConfigConfigRuleList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ConfigConfigRule `json:"items"`
}

// Repository type metadata.
var (
	ConfigConfigRuleKind             = "ConfigConfigRule"
	ConfigConfigRuleGroupKind        = schema.GroupKind{Group: v1alpha1.Group, Kind: ConfigConfigRuleKind}.String()
	ConfigConfigRuleKindAPIVersion   = ConfigConfigRuleKind + "." + v1alpha1.GroupVersion.String()
	ConfigConfigRuleGroupVersionKind = v1alpha1.GroupVersion.WithKind(ConfigConfigRuleKind)
)

func init() {
	v1alpha1.SchemeBuilder.Register(&ConfigConfigRule{}, &ConfigConfigRuleList{})
}
