/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

// +kubebuilder:object:generate=true
// +groupName=config.aws.tf.crossplane.io
// +versionName=v1alpha1

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1alpha1 "github.com/crossplane-contrib/provider-tf-aws/apis/config/v1alpha1"
)

type ConfigOrganizationConformancePackObservation struct {
	Arn string `json:"arn" tf:"arn"`
}

type ConfigOrganizationConformancePackParameters struct {
	DeliveryS3Bucket *string `json:"deliveryS3Bucket,omitempty" tf:"delivery_s3_bucket"`

	DeliveryS3KeyPrefix *string `json:"deliveryS3KeyPrefix,omitempty" tf:"delivery_s3_key_prefix"`

	ExcludedAccounts []string `json:"excludedAccounts,omitempty" tf:"excluded_accounts"`

	InputParameter []InputParameterParameters `json:"inputParameter,omitempty" tf:"input_parameter"`

	Name string `json:"name" tf:"name"`

	TemplateBody *string `json:"templateBody,omitempty" tf:"template_body"`

	TemplateS3Uri *string `json:"templateS3Uri,omitempty" tf:"template_s3_uri"`
}

type InputParameterObservation struct {
}

type InputParameterParameters struct {
	ParameterName string `json:"parameterName" tf:"parameter_name"`

	ParameterValue string `json:"parameterValue" tf:"parameter_value"`
}

// ConfigOrganizationConformancePackSpec defines the desired state of ConfigOrganizationConformancePack
type ConfigOrganizationConformancePackSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       ConfigOrganizationConformancePackParameters `json:"forProvider"`
}

// ConfigOrganizationConformancePackStatus defines the observed state of ConfigOrganizationConformancePack.
type ConfigOrganizationConformancePackStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          ConfigOrganizationConformancePackObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ConfigOrganizationConformancePack is the Schema for the ConfigOrganizationConformancePacks API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type ConfigOrganizationConformancePack struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ConfigOrganizationConformancePackSpec   `json:"spec"`
	Status            ConfigOrganizationConformancePackStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ConfigOrganizationConformancePackList contains a list of ConfigOrganizationConformancePacks
type ConfigOrganizationConformancePackList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ConfigOrganizationConformancePack `json:"items"`
}

// Repository type metadata.
var (
	ConfigOrganizationConformancePackKind             = "ConfigOrganizationConformancePack"
	ConfigOrganizationConformancePackGroupKind        = schema.GroupKind{Group: v1alpha1.Group, Kind: ConfigOrganizationConformancePackKind}.String()
	ConfigOrganizationConformancePackKindAPIVersion   = ConfigOrganizationConformancePackKind + "." + v1alpha1.GroupVersion.String()
	ConfigOrganizationConformancePackGroupVersionKind = v1alpha1.GroupVersion.WithKind(ConfigOrganizationConformancePackKind)
)

func init() {
	v1alpha1.SchemeBuilder.Register(&ConfigOrganizationConformancePack{}, &ConfigOrganizationConformancePackList{})
}
