/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AccountAggregationSourceObservation struct {
}

type AccountAggregationSourceParameters struct {

	// +kubebuilder:validation:Required
	AccountIds []*string `json:"accountIds" tf:"account_ids,omitempty"`

	// +kubebuilder:validation:Optional
	AllRegions *bool `json:"allRegions,omitempty" tf:"all_regions,omitempty"`

	// +kubebuilder:validation:Optional
	Regions []*string `json:"regions,omitempty" tf:"regions,omitempty"`
}

type ConfigurationAggregatorObservation struct {
	Arn *string `json:"arn,omitempty" tf:"arn,omitempty"`

	TagsAll map[string]*string `json:"tagsAll,omitempty" tf:"tags_all,omitempty"`
}

type ConfigurationAggregatorParameters struct {

	// +kubebuilder:validation:Optional
	AccountAggregationSource []AccountAggregationSourceParameters `json:"accountAggregationSource,omitempty" tf:"account_aggregation_source,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	OrganizationAggregationSource []OrganizationAggregationSourceParameters `json:"organizationAggregationSource,omitempty" tf:"organization_aggregation_source,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +terrajet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`

	// +kubebuilder:validation:Optional
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

type OrganizationAggregationSourceObservation struct {
}

type OrganizationAggregationSourceParameters struct {

	// +kubebuilder:validation:Optional
	AllRegions *bool `json:"allRegions,omitempty" tf:"all_regions,omitempty"`

	// +kubebuilder:validation:Optional
	Regions []*string `json:"regions,omitempty" tf:"regions,omitempty"`

	// +kubebuilder:validation:Required
	RoleArn *string `json:"roleArn" tf:"role_arn,omitempty"`
}

// ConfigurationAggregatorSpec defines the desired state of ConfigurationAggregator
type ConfigurationAggregatorSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ConfigurationAggregatorParameters `json:"forProvider"`
}

// ConfigurationAggregatorStatus defines the observed state of ConfigurationAggregator.
type ConfigurationAggregatorStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ConfigurationAggregatorObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ConfigurationAggregator is the Schema for the ConfigurationAggregators API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tfaws}
type ConfigurationAggregator struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ConfigurationAggregatorSpec   `json:"spec"`
	Status            ConfigurationAggregatorStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ConfigurationAggregatorList contains a list of ConfigurationAggregators
type ConfigurationAggregatorList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ConfigurationAggregator `json:"items"`
}

// Repository type metadata.
var (
	ConfigurationAggregatorKind             = "ConfigurationAggregator"
	ConfigurationAggregatorGroupKind        = schema.GroupKind{Group: Group, Kind: ConfigurationAggregatorKind}.String()
	ConfigurationAggregatorKindAPIVersion   = ConfigurationAggregatorKind + "." + GroupVersion.String()
	ConfigurationAggregatorGroupVersionKind = GroupVersion.WithKind(ConfigurationAggregatorKind)
)

func init() {
	SchemeBuilder.Register(&ConfigurationAggregator{}, &ConfigurationAggregatorList{})
}
