/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type OrganizationConformancePackInputParameterObservation struct {
}

type OrganizationConformancePackInputParameterParameters struct {

	// +kubebuilder:validation:Required
	ParameterName *string `json:"parameterName" tf:"parameter_name,omitempty"`

	// +kubebuilder:validation:Required
	ParameterValue *string `json:"parameterValue" tf:"parameter_value,omitempty"`
}

type OrganizationConformancePackObservation struct {
	Arn *string `json:"arn,omitempty" tf:"arn,omitempty"`
}

type OrganizationConformancePackParameters struct {

	// +kubebuilder:validation:Optional
	DeliveryS3Bucket *string `json:"deliveryS3Bucket,omitempty" tf:"delivery_s3_bucket,omitempty"`

	// +kubebuilder:validation:Optional
	DeliveryS3KeyPrefix *string `json:"deliveryS3KeyPrefix,omitempty" tf:"delivery_s3_key_prefix,omitempty"`

	// +kubebuilder:validation:Optional
	ExcludedAccounts []*string `json:"excludedAccounts,omitempty" tf:"excluded_accounts,omitempty"`

	// +kubebuilder:validation:Optional
	InputParameter []OrganizationConformancePackInputParameterParameters `json:"inputParameter,omitempty" tf:"input_parameter,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +terrajet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`

	// +kubebuilder:validation:Optional
	TemplateBody *string `json:"templateBody,omitempty" tf:"template_body,omitempty"`

	// +kubebuilder:validation:Optional
	TemplateS3URI *string `json:"templateS3Uri,omitempty" tf:"template_s3_uri,omitempty"`
}

// OrganizationConformancePackSpec defines the desired state of OrganizationConformancePack
type OrganizationConformancePackSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     OrganizationConformancePackParameters `json:"forProvider"`
}

// OrganizationConformancePackStatus defines the observed state of OrganizationConformancePack.
type OrganizationConformancePackStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        OrganizationConformancePackObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// OrganizationConformancePack is the Schema for the OrganizationConformancePacks API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tfaws}
type OrganizationConformancePack struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              OrganizationConformancePackSpec   `json:"spec"`
	Status            OrganizationConformancePackStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// OrganizationConformancePackList contains a list of OrganizationConformancePacks
type OrganizationConformancePackList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []OrganizationConformancePack `json:"items"`
}

// Repository type metadata.
var (
	OrganizationConformancePackKind             = "OrganizationConformancePack"
	OrganizationConformancePackGroupKind        = schema.GroupKind{Group: Group, Kind: OrganizationConformancePackKind}.String()
	OrganizationConformancePackKindAPIVersion   = OrganizationConformancePackKind + "." + GroupVersion.String()
	OrganizationConformancePackGroupVersionKind = GroupVersion.WithKind(OrganizationConformancePackKind)
)

func init() {
	SchemeBuilder.Register(&OrganizationConformancePack{}, &OrganizationConformancePackList{})
}
