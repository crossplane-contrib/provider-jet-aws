/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ParameterObservation struct {
}

type ParameterParameters struct {

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	ResourceValue *string `json:"resourceValue,omitempty" tf:"resource_value,omitempty"`

	// +kubebuilder:validation:Optional
	StaticValue *string `json:"staticValue,omitempty" tf:"static_value,omitempty"`
}

type RemediationConfigurationObservation struct {
	Arn *string `json:"arn,omitempty" tf:"arn,omitempty"`
}

type RemediationConfigurationParameters struct {

	// +kubebuilder:validation:Required
	ConfigRuleName *string `json:"configRuleName" tf:"config_rule_name,omitempty"`

	// +kubebuilder:validation:Optional
	Parameter []ParameterParameters `json:"parameter,omitempty" tf:"parameter,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +terrajet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`

	// +kubebuilder:validation:Optional
	ResourceType *string `json:"resourceType,omitempty" tf:"resource_type,omitempty"`

	// +kubebuilder:validation:Required
	TargetID *string `json:"targetId" tf:"target_id,omitempty"`

	// +kubebuilder:validation:Required
	TargetType *string `json:"targetType" tf:"target_type,omitempty"`

	// +kubebuilder:validation:Optional
	TargetVersion *string `json:"targetVersion,omitempty" tf:"target_version,omitempty"`
}

// RemediationConfigurationSpec defines the desired state of RemediationConfiguration
type RemediationConfigurationSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     RemediationConfigurationParameters `json:"forProvider"`
}

// RemediationConfigurationStatus defines the observed state of RemediationConfiguration.
type RemediationConfigurationStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        RemediationConfigurationObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// RemediationConfiguration is the Schema for the RemediationConfigurations API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tfaws}
type RemediationConfiguration struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              RemediationConfigurationSpec   `json:"spec"`
	Status            RemediationConfigurationStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// RemediationConfigurationList contains a list of RemediationConfigurations
type RemediationConfigurationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []RemediationConfiguration `json:"items"`
}

// Repository type metadata.
var (
	RemediationConfigurationKind             = "RemediationConfiguration"
	RemediationConfigurationGroupKind        = schema.GroupKind{Group: Group, Kind: RemediationConfigurationKind}.String()
	RemediationConfigurationKindAPIVersion   = RemediationConfigurationKind + "." + GroupVersion.String()
	RemediationConfigurationGroupVersionKind = GroupVersion.WithKind(RemediationConfigurationKind)
)

func init() {
	SchemeBuilder.Register(&RemediationConfiguration{}, &RemediationConfigurationList{})
}
