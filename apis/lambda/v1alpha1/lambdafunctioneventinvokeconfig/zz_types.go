/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

// +kubebuilder:object:generate=true
// +groupName=lambda.aws.tf.crossplane.io
// +versionName=v1alpha1

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1alpha1 "github.com/crossplane-contrib/provider-tf-aws/apis/lambda/v1alpha1"
)

type DestinationConfigObservation struct {
}

type DestinationConfigParameters struct {
	OnFailure []OnFailureParameters `json:"onFailure,omitempty" tf:"on_failure"`

	OnSuccess []OnSuccessParameters `json:"onSuccess,omitempty" tf:"on_success"`
}

type LambdaFunctionEventInvokeConfigObservation struct {
}

type LambdaFunctionEventInvokeConfigParameters struct {
	DestinationConfig []DestinationConfigParameters `json:"destinationConfig,omitempty" tf:"destination_config"`

	FunctionName string `json:"functionName" tf:"function_name"`

	MaximumEventAgeInSeconds *int64 `json:"maximumEventAgeInSeconds,omitempty" tf:"maximum_event_age_in_seconds"`

	MaximumRetryAttempts *int64 `json:"maximumRetryAttempts,omitempty" tf:"maximum_retry_attempts"`

	Qualifier *string `json:"qualifier,omitempty" tf:"qualifier"`
}

type OnFailureObservation struct {
}

type OnFailureParameters struct {
	Destination string `json:"destination" tf:"destination"`
}

type OnSuccessObservation struct {
}

type OnSuccessParameters struct {
	Destination string `json:"destination" tf:"destination"`
}

// LambdaFunctionEventInvokeConfigSpec defines the desired state of LambdaFunctionEventInvokeConfig
type LambdaFunctionEventInvokeConfigSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       LambdaFunctionEventInvokeConfigParameters `json:"forProvider"`
}

// LambdaFunctionEventInvokeConfigStatus defines the observed state of LambdaFunctionEventInvokeConfig.
type LambdaFunctionEventInvokeConfigStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          LambdaFunctionEventInvokeConfigObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// LambdaFunctionEventInvokeConfig is the Schema for the LambdaFunctionEventInvokeConfigs API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type LambdaFunctionEventInvokeConfig struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              LambdaFunctionEventInvokeConfigSpec   `json:"spec"`
	Status            LambdaFunctionEventInvokeConfigStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// LambdaFunctionEventInvokeConfigList contains a list of LambdaFunctionEventInvokeConfigs
type LambdaFunctionEventInvokeConfigList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []LambdaFunctionEventInvokeConfig `json:"items"`
}

// Repository type metadata.
var (
	LambdaFunctionEventInvokeConfigKind             = "LambdaFunctionEventInvokeConfig"
	LambdaFunctionEventInvokeConfigGroupKind        = schema.GroupKind{Group: v1alpha1.Group, Kind: LambdaFunctionEventInvokeConfigKind}.String()
	LambdaFunctionEventInvokeConfigKindAPIVersion   = LambdaFunctionEventInvokeConfigKind + "." + v1alpha1.GroupVersion.String()
	LambdaFunctionEventInvokeConfigGroupVersionKind = v1alpha1.GroupVersion.WithKind(LambdaFunctionEventInvokeConfigKind)
)

func init() {
	v1alpha1.SchemeBuilder.Register(&LambdaFunctionEventInvokeConfig{}, &LambdaFunctionEventInvokeConfigList{})
}
