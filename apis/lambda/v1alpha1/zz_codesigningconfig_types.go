/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AllowedPublishersObservation struct {
}

type AllowedPublishersParameters struct {

	// +kubebuilder:validation:Required
	SigningProfileVersionArns []*string `json:"signingProfileVersionArns" tf:"signing_profile_version_arns,omitempty"`
}

type CodeSigningConfigObservation struct {
	Arn *string `json:"arn,omitempty" tf:"arn,omitempty"`

	ConfigID *string `json:"configId,omitempty" tf:"config_id,omitempty"`

	LastModified *string `json:"lastModified,omitempty" tf:"last_modified,omitempty"`
}

type CodeSigningConfigParameters struct {

	// +kubebuilder:validation:Required
	AllowedPublishers []AllowedPublishersParameters `json:"allowedPublishers" tf:"allowed_publishers,omitempty"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Optional
	Policies []PoliciesParameters `json:"policies,omitempty" tf:"policies,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +terrajet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`
}

type PoliciesObservation struct {
}

type PoliciesParameters struct {

	// +kubebuilder:validation:Required
	UntrustedArtifactOnDeployment *string `json:"untrustedArtifactOnDeployment" tf:"untrusted_artifact_on_deployment,omitempty"`
}

// CodeSigningConfigSpec defines the desired state of CodeSigningConfig
type CodeSigningConfigSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     CodeSigningConfigParameters `json:"forProvider"`
}

// CodeSigningConfigStatus defines the observed state of CodeSigningConfig.
type CodeSigningConfigStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        CodeSigningConfigObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// CodeSigningConfig is the Schema for the CodeSigningConfigs API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tfaws}
type CodeSigningConfig struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              CodeSigningConfigSpec   `json:"spec"`
	Status            CodeSigningConfigStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// CodeSigningConfigList contains a list of CodeSigningConfigs
type CodeSigningConfigList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []CodeSigningConfig `json:"items"`
}

// Repository type metadata.
var (
	CodeSigningConfigKind             = "CodeSigningConfig"
	CodeSigningConfigGroupKind        = schema.GroupKind{Group: Group, Kind: CodeSigningConfigKind}.String()
	CodeSigningConfigKindAPIVersion   = CodeSigningConfigKind + "." + GroupVersion.String()
	CodeSigningConfigGroupVersionKind = GroupVersion.WithKind(CodeSigningConfigKind)
)

func init() {
	SchemeBuilder.Register(&CodeSigningConfig{}, &CodeSigningConfigList{})
}
