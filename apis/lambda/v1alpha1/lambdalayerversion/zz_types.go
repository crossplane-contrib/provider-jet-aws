/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

// +kubebuilder:object:generate=true
// +groupName=lambda.aws.tf.crossplane.io
// +versionName=v1alpha1

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1alpha1 "github.com/crossplane-contrib/provider-tf-aws/apis/lambda/v1alpha1"
)

type LambdaLayerVersionObservation struct {
	Arn string `json:"arn" tf:"arn"`

	CreatedDate string `json:"createdDate" tf:"created_date"`

	LayerArn string `json:"layerArn" tf:"layer_arn"`

	SigningJobArn string `json:"signingJobArn" tf:"signing_job_arn"`

	SigningProfileVersionArn string `json:"signingProfileVersionArn" tf:"signing_profile_version_arn"`

	SourceCodeSize int64 `json:"sourceCodeSize" tf:"source_code_size"`

	Version string `json:"version" tf:"version"`
}

type LambdaLayerVersionParameters struct {
	CompatibleRuntimes []string `json:"compatibleRuntimes,omitempty" tf:"compatible_runtimes"`

	Description *string `json:"description,omitempty" tf:"description"`

	Filename *string `json:"filename,omitempty" tf:"filename"`

	LayerName string `json:"layerName" tf:"layer_name"`

	LicenseInfo *string `json:"licenseInfo,omitempty" tf:"license_info"`

	S3Bucket *string `json:"s3Bucket,omitempty" tf:"s3_bucket"`

	S3Key *string `json:"s3Key,omitempty" tf:"s3_key"`

	S3ObjectVersion *string `json:"s3ObjectVersion,omitempty" tf:"s3_object_version"`

	SourceCodeHash *string `json:"sourceCodeHash,omitempty" tf:"source_code_hash"`
}

// LambdaLayerVersionSpec defines the desired state of LambdaLayerVersion
type LambdaLayerVersionSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       LambdaLayerVersionParameters `json:"forProvider"`
}

// LambdaLayerVersionStatus defines the observed state of LambdaLayerVersion.
type LambdaLayerVersionStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          LambdaLayerVersionObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// LambdaLayerVersion is the Schema for the LambdaLayerVersions API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type LambdaLayerVersion struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              LambdaLayerVersionSpec   `json:"spec"`
	Status            LambdaLayerVersionStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// LambdaLayerVersionList contains a list of LambdaLayerVersions
type LambdaLayerVersionList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []LambdaLayerVersion `json:"items"`
}

// Repository type metadata.
var (
	LambdaLayerVersionKind             = "LambdaLayerVersion"
	LambdaLayerVersionGroupKind        = schema.GroupKind{Group: v1alpha1.Group, Kind: LambdaLayerVersionKind}.String()
	LambdaLayerVersionKindAPIVersion   = LambdaLayerVersionKind + "." + v1alpha1.GroupVersion.String()
	LambdaLayerVersionGroupVersionKind = v1alpha1.GroupVersion.WithKind(LambdaLayerVersionKind)
)

func init() {
	v1alpha1.SchemeBuilder.Register(&LambdaLayerVersion{}, &LambdaLayerVersionList{})
}
