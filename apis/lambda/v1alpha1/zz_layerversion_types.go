/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type LayerVersionObservation struct {
	Arn *string `json:"arn,omitempty" tf:"arn,omitempty"`

	CreatedDate *string `json:"createdDate,omitempty" tf:"created_date,omitempty"`

	LayerArn *string `json:"layerArn,omitempty" tf:"layer_arn,omitempty"`

	SigningJobArn *string `json:"signingJobArn,omitempty" tf:"signing_job_arn,omitempty"`

	SigningProfileVersionArn *string `json:"signingProfileVersionArn,omitempty" tf:"signing_profile_version_arn,omitempty"`

	SourceCodeSize *int64 `json:"sourceCodeSize,omitempty" tf:"source_code_size,omitempty"`

	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

type LayerVersionParameters struct {

	// +kubebuilder:validation:Optional
	CompatibleRuntimes []*string `json:"compatibleRuntimes,omitempty" tf:"compatible_runtimes,omitempty"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Optional
	Filename *string `json:"filename,omitempty" tf:"filename,omitempty"`

	// +kubebuilder:validation:Required
	LayerName *string `json:"layerName" tf:"layer_name,omitempty"`

	// +kubebuilder:validation:Optional
	LicenseInfo *string `json:"licenseInfo,omitempty" tf:"license_info,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +terrajet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`

	// +kubebuilder:validation:Optional
	S3Bucket *string `json:"s3Bucket,omitempty" tf:"s3_bucket,omitempty"`

	// +kubebuilder:validation:Optional
	S3Key *string `json:"s3Key,omitempty" tf:"s3_key,omitempty"`

	// +kubebuilder:validation:Optional
	S3ObjectVersion *string `json:"s3ObjectVersion,omitempty" tf:"s3_object_version,omitempty"`

	// +kubebuilder:validation:Optional
	SourceCodeHash *string `json:"sourceCodeHash,omitempty" tf:"source_code_hash,omitempty"`
}

// LayerVersionSpec defines the desired state of LayerVersion
type LayerVersionSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     LayerVersionParameters `json:"forProvider"`
}

// LayerVersionStatus defines the observed state of LayerVersion.
type LayerVersionStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        LayerVersionObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// LayerVersion is the Schema for the LayerVersions API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tfaws}
type LayerVersion struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              LayerVersionSpec   `json:"spec"`
	Status            LayerVersionStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// LayerVersionList contains a list of LayerVersions
type LayerVersionList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []LayerVersion `json:"items"`
}

// Repository type metadata.
var (
	LayerVersionKind             = "LayerVersion"
	LayerVersionGroupKind        = schema.GroupKind{Group: Group, Kind: LayerVersionKind}.String()
	LayerVersionKindAPIVersion   = LayerVersionKind + "." + GroupVersion.String()
	LayerVersionGroupVersionKind = GroupVersion.WithKind(LayerVersionKind)
)

func init() {
	SchemeBuilder.Register(&LayerVersion{}, &LayerVersionList{})
}
