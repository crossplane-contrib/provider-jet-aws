/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AmiDistributionConfigurationObservation struct {
}

type AmiDistributionConfigurationParameters struct {

	// +kubebuilder:validation:Optional
	AmiTags map[string]*string `json:"amiTags,omitempty" tf:"ami_tags,omitempty"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Optional
	KmsKeyID *string `json:"kmsKeyId,omitempty" tf:"kms_key_id,omitempty"`

	// +kubebuilder:validation:Optional
	LaunchPermission []LaunchPermissionParameters `json:"launchPermission,omitempty" tf:"launch_permission,omitempty"`

	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	TargetAccountIds []*string `json:"targetAccountIds,omitempty" tf:"target_account_ids,omitempty"`
}

type DistributionConfigurationObservation struct {
	Arn *string `json:"arn,omitempty" tf:"arn,omitempty"`

	DateCreated *string `json:"dateCreated,omitempty" tf:"date_created,omitempty"`

	DateUpdated *string `json:"dateUpdated,omitempty" tf:"date_updated,omitempty"`

	TagsAll map[string]*string `json:"tagsAll,omitempty" tf:"tags_all,omitempty"`
}

type DistributionConfigurationParameters struct {

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Required
	Distribution []DistributionParameters `json:"distribution" tf:"distribution,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +terrajet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`

	// +kubebuilder:validation:Optional
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

type DistributionObservation struct {
}

type DistributionParameters struct {

	// +kubebuilder:validation:Optional
	AmiDistributionConfiguration []AmiDistributionConfigurationParameters `json:"amiDistributionConfiguration,omitempty" tf:"ami_distribution_configuration,omitempty"`

	// +kubebuilder:validation:Optional
	LicenseConfigurationArns []*string `json:"licenseConfigurationArns,omitempty" tf:"license_configuration_arns,omitempty"`

	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"region,omitempty"`
}

type LaunchPermissionObservation struct {
}

type LaunchPermissionParameters struct {

	// +kubebuilder:validation:Optional
	UserGroups []*string `json:"userGroups,omitempty" tf:"user_groups,omitempty"`

	// +kubebuilder:validation:Optional
	UserIds []*string `json:"userIds,omitempty" tf:"user_ids,omitempty"`
}

// DistributionConfigurationSpec defines the desired state of DistributionConfiguration
type DistributionConfigurationSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     DistributionConfigurationParameters `json:"forProvider"`
}

// DistributionConfigurationStatus defines the observed state of DistributionConfiguration.
type DistributionConfigurationStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        DistributionConfigurationObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// DistributionConfiguration is the Schema for the DistributionConfigurations API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tfaws}
type DistributionConfiguration struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DistributionConfigurationSpec   `json:"spec"`
	Status            DistributionConfigurationStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DistributionConfigurationList contains a list of DistributionConfigurations
type DistributionConfigurationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DistributionConfiguration `json:"items"`
}

// Repository type metadata.
var (
	DistributionConfigurationKind             = "DistributionConfiguration"
	DistributionConfigurationGroupKind        = schema.GroupKind{Group: Group, Kind: DistributionConfigurationKind}.String()
	DistributionConfigurationKindAPIVersion   = DistributionConfigurationKind + "." + GroupVersion.String()
	DistributionConfigurationGroupVersionKind = GroupVersion.WithKind(DistributionConfigurationKind)
)

func init() {
	SchemeBuilder.Register(&DistributionConfiguration{}, &DistributionConfigurationList{})
}
