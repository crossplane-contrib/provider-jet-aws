/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AmisObservation struct {
	AccountID *string `json:"accountId,omitempty" tf:"account_id,omitempty"`

	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	Image *string `json:"image,omitempty" tf:"image,omitempty"`

	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	Region *string `json:"region,omitempty" tf:"region,omitempty"`
}

type AmisParameters struct {
}

type ImageObservation struct {
	Arn *string `json:"arn,omitempty" tf:"arn,omitempty"`

	DateCreated *string `json:"dateCreated,omitempty" tf:"date_created,omitempty"`

	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	OsVersion *string `json:"osVersion,omitempty" tf:"os_version,omitempty"`

	OutputResources []OutputResourcesObservation `json:"outputResources,omitempty" tf:"output_resources,omitempty"`

	Platform *string `json:"platform,omitempty" tf:"platform,omitempty"`

	TagsAll map[string]*string `json:"tagsAll,omitempty" tf:"tags_all,omitempty"`

	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

type ImageParameters struct {

	// +kubebuilder:validation:Optional
	DistributionConfigurationArn *string `json:"distributionConfigurationArn,omitempty" tf:"distribution_configuration_arn,omitempty"`

	// +kubebuilder:validation:Optional
	EnhancedImageMetadataEnabled *bool `json:"enhancedImageMetadataEnabled,omitempty" tf:"enhanced_image_metadata_enabled,omitempty"`

	// +kubebuilder:validation:Required
	ImageRecipeArn *string `json:"imageRecipeArn" tf:"image_recipe_arn,omitempty"`

	// +kubebuilder:validation:Optional
	ImageTestsConfiguration []ImageTestsConfigurationParameters `json:"imageTestsConfiguration,omitempty" tf:"image_tests_configuration,omitempty"`

	// +kubebuilder:validation:Required
	InfrastructureConfigurationArn *string `json:"infrastructureConfigurationArn" tf:"infrastructure_configuration_arn,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +terrajet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`

	// +kubebuilder:validation:Optional
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

type ImageTestsConfigurationObservation struct {
}

type ImageTestsConfigurationParameters struct {

	// +kubebuilder:validation:Optional
	ImageTestsEnabled *bool `json:"imageTestsEnabled,omitempty" tf:"image_tests_enabled,omitempty"`

	// +kubebuilder:validation:Optional
	TimeoutMinutes *int64 `json:"timeoutMinutes,omitempty" tf:"timeout_minutes,omitempty"`
}

type OutputResourcesObservation struct {
	Amis []AmisObservation `json:"amis,omitempty" tf:"amis,omitempty"`
}

type OutputResourcesParameters struct {
}

// ImageSpec defines the desired state of Image
type ImageSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ImageParameters `json:"forProvider"`
}

// ImageStatus defines the observed state of Image.
type ImageStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ImageObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Image is the Schema for the Images API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tfaws}
type Image struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ImageSpec   `json:"spec"`
	Status            ImageStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ImageList contains a list of Images
type ImageList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Image `json:"items"`
}

// Repository type metadata.
var (
	ImageKind             = "Image"
	ImageGroupKind        = schema.GroupKind{Group: Group, Kind: ImageKind}.String()
	ImageKindAPIVersion   = ImageKind + "." + GroupVersion.String()
	ImageGroupVersionKind = GroupVersion.WithKind(ImageKind)
)

func init() {
	SchemeBuilder.Register(&Image{}, &ImageList{})
}
