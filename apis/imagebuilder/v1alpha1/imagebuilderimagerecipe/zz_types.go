/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

// +kubebuilder:object:generate=true
// +groupName=imagebuilder.aws.tf.crossplane.io
// +versionName=v1alpha1

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1alpha1 "github.com/crossplane-contrib/provider-tf-aws/apis/imagebuilder/v1alpha1"
)

type BlockDeviceMappingObservation struct {
}

type BlockDeviceMappingParameters struct {
	DeviceName *string `json:"deviceName,omitempty" tf:"device_name"`

	Ebs []EbsParameters `json:"ebs,omitempty" tf:"ebs"`

	NoDevice *bool `json:"noDevice,omitempty" tf:"no_device"`

	VirtualName *string `json:"virtualName,omitempty" tf:"virtual_name"`
}

type ComponentObservation struct {
}

type ComponentParameters struct {
	ComponentArn string `json:"componentArn" tf:"component_arn"`
}

type EbsObservation struct {
}

type EbsParameters struct {
	DeleteOnTermination *string `json:"deleteOnTermination,omitempty" tf:"delete_on_termination"`

	Encrypted *string `json:"encrypted,omitempty" tf:"encrypted"`

	Iops *int64 `json:"iops,omitempty" tf:"iops"`

	KmsKeyId *string `json:"kmsKeyId,omitempty" tf:"kms_key_id"`

	SnapshotId *string `json:"snapshotId,omitempty" tf:"snapshot_id"`

	VolumeSize *int64 `json:"volumeSize,omitempty" tf:"volume_size"`

	VolumeType *string `json:"volumeType,omitempty" tf:"volume_type"`
}

type ImagebuilderImageRecipeObservation struct {
	Arn string `json:"arn" tf:"arn"`

	DateCreated string `json:"dateCreated" tf:"date_created"`

	Owner string `json:"owner" tf:"owner"`

	Platform string `json:"platform" tf:"platform"`
}

type ImagebuilderImageRecipeParameters struct {
	BlockDeviceMapping []BlockDeviceMappingParameters `json:"blockDeviceMapping,omitempty" tf:"block_device_mapping"`

	Component []ComponentParameters `json:"component" tf:"component"`

	Description *string `json:"description,omitempty" tf:"description"`

	Name string `json:"name" tf:"name"`

	ParentImage string `json:"parentImage" tf:"parent_image"`

	Tags map[string]string `json:"tags,omitempty" tf:"tags"`

	TagsAll map[string]string `json:"tagsAll,omitempty" tf:"tags_all"`

	Version string `json:"version" tf:"version"`

	WorkingDirectory *string `json:"workingDirectory,omitempty" tf:"working_directory"`
}

// ImagebuilderImageRecipeSpec defines the desired state of ImagebuilderImageRecipe
type ImagebuilderImageRecipeSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       ImagebuilderImageRecipeParameters `json:"forProvider"`
}

// ImagebuilderImageRecipeStatus defines the observed state of ImagebuilderImageRecipe.
type ImagebuilderImageRecipeStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          ImagebuilderImageRecipeObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ImagebuilderImageRecipe is the Schema for the ImagebuilderImageRecipes API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type ImagebuilderImageRecipe struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ImagebuilderImageRecipeSpec   `json:"spec"`
	Status            ImagebuilderImageRecipeStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ImagebuilderImageRecipeList contains a list of ImagebuilderImageRecipes
type ImagebuilderImageRecipeList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ImagebuilderImageRecipe `json:"items"`
}

// Repository type metadata.
var (
	ImagebuilderImageRecipeKind             = "ImagebuilderImageRecipe"
	ImagebuilderImageRecipeGroupKind        = schema.GroupKind{Group: v1alpha1.Group, Kind: ImagebuilderImageRecipeKind}.String()
	ImagebuilderImageRecipeKindAPIVersion   = ImagebuilderImageRecipeKind + "." + v1alpha1.GroupVersion.String()
	ImagebuilderImageRecipeGroupVersionKind = v1alpha1.GroupVersion.WithKind(ImagebuilderImageRecipeKind)
)

func init() {
	v1alpha1.SchemeBuilder.Register(&ImagebuilderImageRecipe{}, &ImagebuilderImageRecipeList{})
}
