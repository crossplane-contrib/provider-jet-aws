/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

// +kubebuilder:object:generate=true
// +groupName=imagebuilder.aws.tf.crossplane.io
// +versionName=v1alpha1

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1alpha1 "github.com/crossplane-contrib/provider-tf-aws/apis/imagebuilder/v1alpha1"
)

type ImagebuilderComponentObservation struct {
	Arn string `json:"arn" tf:"arn"`

	DateCreated string `json:"dateCreated" tf:"date_created"`

	Encrypted bool `json:"encrypted" tf:"encrypted"`

	Owner string `json:"owner" tf:"owner"`

	Type string `json:"type" tf:"type"`
}

type ImagebuilderComponentParameters struct {
	ChangeDescription *string `json:"changeDescription,omitempty" tf:"change_description"`

	Data *string `json:"data,omitempty" tf:"data"`

	Description *string `json:"description,omitempty" tf:"description"`

	KmsKeyId *string `json:"kmsKeyId,omitempty" tf:"kms_key_id"`

	Name string `json:"name" tf:"name"`

	Platform string `json:"platform" tf:"platform"`

	SupportedOsVersions []string `json:"supportedOsVersions,omitempty" tf:"supported_os_versions"`

	Tags map[string]string `json:"tags,omitempty" tf:"tags"`

	TagsAll map[string]string `json:"tagsAll,omitempty" tf:"tags_all"`

	Uri *string `json:"uri,omitempty" tf:"uri"`

	Version string `json:"version" tf:"version"`
}

// ImagebuilderComponentSpec defines the desired state of ImagebuilderComponent
type ImagebuilderComponentSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       ImagebuilderComponentParameters `json:"forProvider"`
}

// ImagebuilderComponentStatus defines the observed state of ImagebuilderComponent.
type ImagebuilderComponentStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          ImagebuilderComponentObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ImagebuilderComponent is the Schema for the ImagebuilderComponents API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type ImagebuilderComponent struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ImagebuilderComponentSpec   `json:"spec"`
	Status            ImagebuilderComponentStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ImagebuilderComponentList contains a list of ImagebuilderComponents
type ImagebuilderComponentList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ImagebuilderComponent `json:"items"`
}

// Repository type metadata.
var (
	ImagebuilderComponentKind             = "ImagebuilderComponent"
	ImagebuilderComponentGroupKind        = schema.GroupKind{Group: v1alpha1.Group, Kind: ImagebuilderComponentKind}.String()
	ImagebuilderComponentKindAPIVersion   = ImagebuilderComponentKind + "." + v1alpha1.GroupVersion.String()
	ImagebuilderComponentGroupVersionKind = v1alpha1.GroupVersion.WithKind(ImagebuilderComponentKind)
)

func init() {
	v1alpha1.SchemeBuilder.Register(&ImagebuilderComponent{}, &ImagebuilderComponentList{})
}
