/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

// +kubebuilder:object:generate=true
// +groupName=imagebuilder.aws.tf.crossplane.io
// +versionName=v1alpha1

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1alpha1 "github.com/crossplane-contrib/provider-tf-aws/apis/imagebuilder/v1alpha1"
)

type AmisObservation struct {
	AccountId string `json:"accountId" tf:"account_id"`

	Description string `json:"description" tf:"description"`

	Image string `json:"image" tf:"image"`

	Name string `json:"name" tf:"name"`

	Region string `json:"region" tf:"region"`
}

type AmisParameters struct {
}

type ImageTestsConfigurationObservation struct {
}

type ImageTestsConfigurationParameters struct {
	ImageTestsEnabled *bool `json:"imageTestsEnabled,omitempty" tf:"image_tests_enabled"`

	TimeoutMinutes *int64 `json:"timeoutMinutes,omitempty" tf:"timeout_minutes"`
}

type ImagebuilderImageObservation struct {
	Arn string `json:"arn" tf:"arn"`

	DateCreated string `json:"dateCreated" tf:"date_created"`

	Name string `json:"name" tf:"name"`

	OsVersion string `json:"osVersion" tf:"os_version"`

	OutputResources []OutputResourcesObservation `json:"outputResources" tf:"output_resources"`

	Platform string `json:"platform" tf:"platform"`

	Version string `json:"version" tf:"version"`
}

type ImagebuilderImageParameters struct {
	DistributionConfigurationArn *string `json:"distributionConfigurationArn,omitempty" tf:"distribution_configuration_arn"`

	EnhancedImageMetadataEnabled *bool `json:"enhancedImageMetadataEnabled,omitempty" tf:"enhanced_image_metadata_enabled"`

	ImageRecipeArn string `json:"imageRecipeArn" tf:"image_recipe_arn"`

	ImageTestsConfiguration []ImageTestsConfigurationParameters `json:"imageTestsConfiguration,omitempty" tf:"image_tests_configuration"`

	InfrastructureConfigurationArn string `json:"infrastructureConfigurationArn" tf:"infrastructure_configuration_arn"`

	Tags map[string]string `json:"tags,omitempty" tf:"tags"`

	TagsAll map[string]string `json:"tagsAll,omitempty" tf:"tags_all"`
}

type OutputResourcesObservation struct {
	Amis []AmisObservation `json:"amis" tf:"amis"`
}

type OutputResourcesParameters struct {
}

// ImagebuilderImageSpec defines the desired state of ImagebuilderImage
type ImagebuilderImageSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       ImagebuilderImageParameters `json:"forProvider"`
}

// ImagebuilderImageStatus defines the observed state of ImagebuilderImage.
type ImagebuilderImageStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          ImagebuilderImageObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ImagebuilderImage is the Schema for the ImagebuilderImages API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type ImagebuilderImage struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ImagebuilderImageSpec   `json:"spec"`
	Status            ImagebuilderImageStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ImagebuilderImageList contains a list of ImagebuilderImages
type ImagebuilderImageList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ImagebuilderImage `json:"items"`
}

// Repository type metadata.
var (
	ImagebuilderImageKind             = "ImagebuilderImage"
	ImagebuilderImageGroupKind        = schema.GroupKind{Group: v1alpha1.Group, Kind: ImagebuilderImageKind}.String()
	ImagebuilderImageKindAPIVersion   = ImagebuilderImageKind + "." + v1alpha1.GroupVersion.String()
	ImagebuilderImageGroupVersionKind = v1alpha1.GroupVersion.WithKind(ImagebuilderImageKind)
)

func init() {
	v1alpha1.SchemeBuilder.Register(&ImagebuilderImage{}, &ImagebuilderImageList{})
}
