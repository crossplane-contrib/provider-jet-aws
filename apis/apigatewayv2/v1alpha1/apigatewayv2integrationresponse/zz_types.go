/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

// +kubebuilder:object:generate=true
// +groupName=apigatewayv2.aws.tf.crossplane.io
// +versionName=v1alpha1

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1alpha1 "github.com/crossplane-contrib/provider-tf-aws/apis/apigatewayv2/v1alpha1"
)

type Apigatewayv2IntegrationResponseObservation struct {
}

type Apigatewayv2IntegrationResponseParameters struct {
	ApiId string `json:"apiId" tf:"api_id"`

	ContentHandlingStrategy *string `json:"contentHandlingStrategy,omitempty" tf:"content_handling_strategy"`

	IntegrationId string `json:"integrationId" tf:"integration_id"`

	IntegrationResponseKey string `json:"integrationResponseKey" tf:"integration_response_key"`

	ResponseTemplates map[string]string `json:"responseTemplates,omitempty" tf:"response_templates"`

	TemplateSelectionExpression *string `json:"templateSelectionExpression,omitempty" tf:"template_selection_expression"`
}

// Apigatewayv2IntegrationResponseSpec defines the desired state of Apigatewayv2IntegrationResponse
type Apigatewayv2IntegrationResponseSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       Apigatewayv2IntegrationResponseParameters `json:"forProvider"`
}

// Apigatewayv2IntegrationResponseStatus defines the observed state of Apigatewayv2IntegrationResponse.
type Apigatewayv2IntegrationResponseStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          Apigatewayv2IntegrationResponseObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Apigatewayv2IntegrationResponse is the Schema for the Apigatewayv2IntegrationResponses API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type Apigatewayv2IntegrationResponse struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              Apigatewayv2IntegrationResponseSpec   `json:"spec"`
	Status            Apigatewayv2IntegrationResponseStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// Apigatewayv2IntegrationResponseList contains a list of Apigatewayv2IntegrationResponses
type Apigatewayv2IntegrationResponseList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Apigatewayv2IntegrationResponse `json:"items"`
}

// Repository type metadata.
var (
	Apigatewayv2IntegrationResponseKind             = "Apigatewayv2IntegrationResponse"
	Apigatewayv2IntegrationResponseGroupKind        = schema.GroupKind{Group: v1alpha1.Group, Kind: Apigatewayv2IntegrationResponseKind}.String()
	Apigatewayv2IntegrationResponseKindAPIVersion   = Apigatewayv2IntegrationResponseKind + "." + v1alpha1.GroupVersion.String()
	Apigatewayv2IntegrationResponseGroupVersionKind = v1alpha1.GroupVersion.WithKind(Apigatewayv2IntegrationResponseKind)
)

func init() {
	v1alpha1.SchemeBuilder.Register(&Apigatewayv2IntegrationResponse{}, &Apigatewayv2IntegrationResponseList{})
}
