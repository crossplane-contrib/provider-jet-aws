/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

// +kubebuilder:object:generate=true
// +groupName=apigatewayv2.aws.tf.crossplane.io
// +versionName=v1alpha1

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1alpha1 "github.com/crossplane-contrib/provider-tf-aws/apis/apigatewayv2/v1alpha1"
)

type Apigatewayv2ApiMappingObservation struct {
}

type Apigatewayv2ApiMappingParameters struct {
	ApiId string `json:"apiId" tf:"api_id"`

	ApiMappingKey *string `json:"apiMappingKey,omitempty" tf:"api_mapping_key"`

	DomainName string `json:"domainName" tf:"domain_name"`

	Stage string `json:"stage" tf:"stage"`
}

// Apigatewayv2ApiMappingSpec defines the desired state of Apigatewayv2ApiMapping
type Apigatewayv2ApiMappingSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       Apigatewayv2ApiMappingParameters `json:"forProvider"`
}

// Apigatewayv2ApiMappingStatus defines the observed state of Apigatewayv2ApiMapping.
type Apigatewayv2ApiMappingStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          Apigatewayv2ApiMappingObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Apigatewayv2ApiMapping is the Schema for the Apigatewayv2ApiMappings API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type Apigatewayv2ApiMapping struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              Apigatewayv2ApiMappingSpec   `json:"spec"`
	Status            Apigatewayv2ApiMappingStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// Apigatewayv2ApiMappingList contains a list of Apigatewayv2ApiMappings
type Apigatewayv2ApiMappingList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Apigatewayv2ApiMapping `json:"items"`
}

// Repository type metadata.
var (
	Apigatewayv2ApiMappingKind             = "Apigatewayv2ApiMapping"
	Apigatewayv2ApiMappingGroupKind        = schema.GroupKind{Group: v1alpha1.Group, Kind: Apigatewayv2ApiMappingKind}.String()
	Apigatewayv2ApiMappingKindAPIVersion   = Apigatewayv2ApiMappingKind + "." + v1alpha1.GroupVersion.String()
	Apigatewayv2ApiMappingGroupVersionKind = v1alpha1.GroupVersion.WithKind(Apigatewayv2ApiMappingKind)
)

func init() {
	v1alpha1.SchemeBuilder.Register(&Apigatewayv2ApiMapping{}, &Apigatewayv2ApiMappingList{})
}
