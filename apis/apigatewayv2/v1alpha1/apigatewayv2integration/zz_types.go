/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

// +kubebuilder:object:generate=true
// +groupName=apigatewayv2.aws.tf.crossplane.io
// +versionName=v1alpha1

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1alpha1 "github.com/crossplane-contrib/provider-tf-aws/apis/apigatewayv2/v1alpha1"
)

type Apigatewayv2IntegrationObservation struct {
	IntegrationResponseSelectionExpression string `json:"integrationResponseSelectionExpression" tf:"integration_response_selection_expression"`
}

type Apigatewayv2IntegrationParameters struct {
	ApiId string `json:"apiId" tf:"api_id"`

	ConnectionId *string `json:"connectionId,omitempty" tf:"connection_id"`

	ConnectionType *string `json:"connectionType,omitempty" tf:"connection_type"`

	ContentHandlingStrategy *string `json:"contentHandlingStrategy,omitempty" tf:"content_handling_strategy"`

	CredentialsArn *string `json:"credentialsArn,omitempty" tf:"credentials_arn"`

	Description *string `json:"description,omitempty" tf:"description"`

	IntegrationMethod *string `json:"integrationMethod,omitempty" tf:"integration_method"`

	IntegrationSubtype *string `json:"integrationSubtype,omitempty" tf:"integration_subtype"`

	IntegrationType string `json:"integrationType" tf:"integration_type"`

	IntegrationUri *string `json:"integrationUri,omitempty" tf:"integration_uri"`

	PassthroughBehavior *string `json:"passthroughBehavior,omitempty" tf:"passthrough_behavior"`

	PayloadFormatVersion *string `json:"payloadFormatVersion,omitempty" tf:"payload_format_version"`

	RequestParameters map[string]string `json:"requestParameters,omitempty" tf:"request_parameters"`

	RequestTemplates map[string]string `json:"requestTemplates,omitempty" tf:"request_templates"`

	ResponseParameters []ResponseParametersParameters `json:"responseParameters,omitempty" tf:"response_parameters"`

	TemplateSelectionExpression *string `json:"templateSelectionExpression,omitempty" tf:"template_selection_expression"`

	TimeoutMilliseconds *int64 `json:"timeoutMilliseconds,omitempty" tf:"timeout_milliseconds"`

	TlsConfig []TlsConfigParameters `json:"tlsConfig,omitempty" tf:"tls_config"`
}

type ResponseParametersObservation struct {
}

type ResponseParametersParameters struct {
	Mappings map[string]string `json:"mappings" tf:"mappings"`

	StatusCode string `json:"statusCode" tf:"status_code"`
}

type TlsConfigObservation struct {
}

type TlsConfigParameters struct {
	ServerNameToVerify *string `json:"serverNameToVerify,omitempty" tf:"server_name_to_verify"`
}

// Apigatewayv2IntegrationSpec defines the desired state of Apigatewayv2Integration
type Apigatewayv2IntegrationSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       Apigatewayv2IntegrationParameters `json:"forProvider"`
}

// Apigatewayv2IntegrationStatus defines the observed state of Apigatewayv2Integration.
type Apigatewayv2IntegrationStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          Apigatewayv2IntegrationObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Apigatewayv2Integration is the Schema for the Apigatewayv2Integrations API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type Apigatewayv2Integration struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              Apigatewayv2IntegrationSpec   `json:"spec"`
	Status            Apigatewayv2IntegrationStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// Apigatewayv2IntegrationList contains a list of Apigatewayv2Integrations
type Apigatewayv2IntegrationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Apigatewayv2Integration `json:"items"`
}

// Repository type metadata.
var (
	Apigatewayv2IntegrationKind             = "Apigatewayv2Integration"
	Apigatewayv2IntegrationGroupKind        = schema.GroupKind{Group: v1alpha1.Group, Kind: Apigatewayv2IntegrationKind}.String()
	Apigatewayv2IntegrationKindAPIVersion   = Apigatewayv2IntegrationKind + "." + v1alpha1.GroupVersion.String()
	Apigatewayv2IntegrationGroupVersionKind = v1alpha1.GroupVersion.WithKind(Apigatewayv2IntegrationKind)
)

func init() {
	v1alpha1.SchemeBuilder.Register(&Apigatewayv2Integration{}, &Apigatewayv2IntegrationList{})
}
