/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

// +kubebuilder:object:generate=true
// +groupName=athena.aws.tf.crossplane.io
// +versionName=v1alpha1

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1alpha1 "github.com/crossplane-contrib/provider-tf-aws/apis/athena/v1alpha1"
)

type AthenaNamedQueryObservation struct {
}

type AthenaNamedQueryParameters struct {
	Database string `json:"database" tf:"database"`

	Description *string `json:"description,omitempty" tf:"description"`

	Name string `json:"name" tf:"name"`

	Query string `json:"query" tf:"query"`

	Workgroup *string `json:"workgroup,omitempty" tf:"workgroup"`
}

// AthenaNamedQuerySpec defines the desired state of AthenaNamedQuery
type AthenaNamedQuerySpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       AthenaNamedQueryParameters `json:"forProvider"`
}

// AthenaNamedQueryStatus defines the observed state of AthenaNamedQuery.
type AthenaNamedQueryStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          AthenaNamedQueryObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// AthenaNamedQuery is the Schema for the AthenaNamedQuerys API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type AthenaNamedQuery struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              AthenaNamedQuerySpec   `json:"spec"`
	Status            AthenaNamedQueryStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// AthenaNamedQueryList contains a list of AthenaNamedQuerys
type AthenaNamedQueryList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []AthenaNamedQuery `json:"items"`
}

// Repository type metadata.
var (
	AthenaNamedQueryKind             = "AthenaNamedQuery"
	AthenaNamedQueryGroupKind        = schema.GroupKind{Group: v1alpha1.Group, Kind: AthenaNamedQueryKind}.String()
	AthenaNamedQueryKindAPIVersion   = AthenaNamedQueryKind + "." + v1alpha1.GroupVersion.String()
	AthenaNamedQueryGroupVersionKind = v1alpha1.GroupVersion.WithKind(AthenaNamedQueryKind)
)

func init() {
	v1alpha1.SchemeBuilder.Register(&AthenaNamedQuery{}, &AthenaNamedQueryList{})
}
