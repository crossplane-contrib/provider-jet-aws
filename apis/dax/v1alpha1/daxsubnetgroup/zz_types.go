/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

// +kubebuilder:object:generate=true
// +groupName=dax.aws.tf.crossplane.io
// +versionName=v1alpha1

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1alpha1 "github.com/crossplane-contrib/provider-tf-aws/apis/dax/v1alpha1"
)

type DaxSubnetGroupObservation struct {
	VpcId string `json:"vpcId" tf:"vpc_id"`
}

type DaxSubnetGroupParameters struct {
	Description *string `json:"description,omitempty" tf:"description"`

	Name string `json:"name" tf:"name"`

	SubnetIds []string `json:"subnetIds" tf:"subnet_ids"`
}

// DaxSubnetGroupSpec defines the desired state of DaxSubnetGroup
type DaxSubnetGroupSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       DaxSubnetGroupParameters `json:"forProvider"`
}

// DaxSubnetGroupStatus defines the observed state of DaxSubnetGroup.
type DaxSubnetGroupStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          DaxSubnetGroupObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// DaxSubnetGroup is the Schema for the DaxSubnetGroups API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type DaxSubnetGroup struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DaxSubnetGroupSpec   `json:"spec"`
	Status            DaxSubnetGroupStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DaxSubnetGroupList contains a list of DaxSubnetGroups
type DaxSubnetGroupList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DaxSubnetGroup `json:"items"`
}

// Repository type metadata.
var (
	DaxSubnetGroupKind             = "DaxSubnetGroup"
	DaxSubnetGroupGroupKind        = schema.GroupKind{Group: v1alpha1.Group, Kind: DaxSubnetGroupKind}.String()
	DaxSubnetGroupKindAPIVersion   = DaxSubnetGroupKind + "." + v1alpha1.GroupVersion.String()
	DaxSubnetGroupGroupVersionKind = v1alpha1.GroupVersion.WithKind(DaxSubnetGroupKind)
)

func init() {
	v1alpha1.SchemeBuilder.Register(&DaxSubnetGroup{}, &DaxSubnetGroupList{})
}
