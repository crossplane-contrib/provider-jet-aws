/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type CacheObservation struct {
}

type CacheParameters struct {

	// +kubebuilder:validation:Required
	DiskID *string `json:"diskId" tf:"disk_id,omitempty"`

	// +kubebuilder:validation:Required
	GatewayArn *string `json:"gatewayArn" tf:"gateway_arn,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +terrajet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`
}

// CacheSpec defines the desired state of Cache
type CacheSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     CacheParameters `json:"forProvider"`
}

// CacheStatus defines the observed state of Cache.
type CacheStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        CacheObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Cache is the Schema for the Caches API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tfaws}
type Cache struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              CacheSpec   `json:"spec"`
	Status            CacheStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// CacheList contains a list of Caches
type CacheList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Cache `json:"items"`
}

// Repository type metadata.
var (
	CacheKind             = "Cache"
	CacheGroupKind        = schema.GroupKind{Group: Group, Kind: CacheKind}.String()
	CacheKindAPIVersion   = CacheKind + "." + GroupVersion.String()
	CacheGroupVersionKind = GroupVersion.WithKind(CacheKind)
)

func init() {
	SchemeBuilder.Register(&Cache{}, &CacheList{})
}
