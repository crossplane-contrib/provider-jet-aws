/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type StoragegatewayCachedIscsiVolumeObservation struct {
	ARN string `json:"arn" tf:"arn"`

	ChapEnabled bool `json:"chapEnabled" tf:"chap_enabled"`

	LunNumber int64 `json:"lunNumber" tf:"lun_number"`

	NetworkInterfacePort int64 `json:"networkInterfacePort" tf:"network_interface_port"`

	TargetARN string `json:"targetARN" tf:"target_arn"`

	VolumeARN string `json:"volumeARN" tf:"volume_arn"`

	VolumeID string `json:"volumeID" tf:"volume_id"`
}

type StoragegatewayCachedIscsiVolumeParameters struct {
	GatewayARN string `json:"gatewayARN" tf:"gateway_arn"`

	KmsEncrypted *bool `json:"kmsEncrypted,omitempty" tf:"kms_encrypted"`

	KmsKey *string `json:"kmsKey,omitempty" tf:"kms_key"`

	NetworkInterfaceID string `json:"networkInterfaceID" tf:"network_interface_id"`

	SnapshotID *string `json:"snapshotID,omitempty" tf:"snapshot_id"`

	SourceVolumeARN *string `json:"sourceVolumeARN,omitempty" tf:"source_volume_arn"`

	Tags map[string]string `json:"tags,omitempty" tf:"tags"`

	TagsAll map[string]string `json:"tagsAll,omitempty" tf:"tags_all"`

	TargetName string `json:"targetName" tf:"target_name"`

	VolumeSizeInBytes int64 `json:"volumeSizeInBytes" tf:"volume_size_in_bytes"`
}

// StoragegatewayCachedIscsiVolumeSpec defines the desired state of StoragegatewayCachedIscsiVolume
type StoragegatewayCachedIscsiVolumeSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       StoragegatewayCachedIscsiVolumeParameters `json:"forProvider"`
}

// StoragegatewayCachedIscsiVolumeStatus defines the observed state of StoragegatewayCachedIscsiVolume.
type StoragegatewayCachedIscsiVolumeStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          StoragegatewayCachedIscsiVolumeObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// StoragegatewayCachedIscsiVolume is the Schema for the StoragegatewayCachedIscsiVolumes API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tfaws}
type StoragegatewayCachedIscsiVolume struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              StoragegatewayCachedIscsiVolumeSpec   `json:"spec"`
	Status            StoragegatewayCachedIscsiVolumeStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// StoragegatewayCachedIscsiVolumeList contains a list of StoragegatewayCachedIscsiVolumes
type StoragegatewayCachedIscsiVolumeList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []StoragegatewayCachedIscsiVolume `json:"items"`
}

// Repository type metadata.
var (
	StoragegatewayCachedIscsiVolumeKind             = "StoragegatewayCachedIscsiVolume"
	StoragegatewayCachedIscsiVolumeGroupKind        = schema.GroupKind{Group: Group, Kind: StoragegatewayCachedIscsiVolumeKind}.String()
	StoragegatewayCachedIscsiVolumeKindAPIVersion   = StoragegatewayCachedIscsiVolumeKind + "." + GroupVersion.String()
	StoragegatewayCachedIscsiVolumeGroupVersionKind = GroupVersion.WithKind(StoragegatewayCachedIscsiVolumeKind)
)

func init() {
	SchemeBuilder.Register(&StoragegatewayCachedIscsiVolume{}, &StoragegatewayCachedIscsiVolumeList{})
}
