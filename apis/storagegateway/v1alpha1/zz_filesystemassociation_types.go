/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type CacheAttributesObservation struct {
}

type CacheAttributesParameters struct {

	// +kubebuilder:validation:Optional
	CacheStaleTimeoutInSeconds *int64 `json:"cacheStaleTimeoutInSeconds,omitempty" tf:"cache_stale_timeout_in_seconds,omitempty"`
}

type FileSystemAssociationObservation struct {
	Arn *string `json:"arn,omitempty" tf:"arn,omitempty"`

	TagsAll map[string]*string `json:"tagsAll,omitempty" tf:"tags_all,omitempty"`
}

type FileSystemAssociationParameters struct {

	// +kubebuilder:validation:Optional
	AuditDestinationArn *string `json:"auditDestinationArn,omitempty" tf:"audit_destination_arn,omitempty"`

	// +kubebuilder:validation:Optional
	CacheAttributes []CacheAttributesParameters `json:"cacheAttributes,omitempty" tf:"cache_attributes,omitempty"`

	// +kubebuilder:validation:Required
	GatewayArn *string `json:"gatewayArn" tf:"gateway_arn,omitempty"`

	// +kubebuilder:validation:Required
	LocationArn *string `json:"locationArn" tf:"location_arn,omitempty"`

	// +kubebuilder:validation:Required
	PasswordSecretRef v1.SecretKeySelector `json:"passwordSecretRef" tf:"-"`

	// Region is the region you'd like your resource to be created in.
	// +terrajet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`

	// +kubebuilder:validation:Optional
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// +kubebuilder:validation:Required
	Username *string `json:"username" tf:"username,omitempty"`
}

// FileSystemAssociationSpec defines the desired state of FileSystemAssociation
type FileSystemAssociationSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     FileSystemAssociationParameters `json:"forProvider"`
}

// FileSystemAssociationStatus defines the observed state of FileSystemAssociation.
type FileSystemAssociationStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        FileSystemAssociationObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// FileSystemAssociation is the Schema for the FileSystemAssociations API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tfaws}
type FileSystemAssociation struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              FileSystemAssociationSpec   `json:"spec"`
	Status            FileSystemAssociationStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// FileSystemAssociationList contains a list of FileSystemAssociations
type FileSystemAssociationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []FileSystemAssociation `json:"items"`
}

// Repository type metadata.
var (
	FileSystemAssociationKind             = "FileSystemAssociation"
	FileSystemAssociationGroupKind        = schema.GroupKind{Group: Group, Kind: FileSystemAssociationKind}.String()
	FileSystemAssociationKindAPIVersion   = FileSystemAssociationKind + "." + GroupVersion.String()
	FileSystemAssociationGroupVersionKind = GroupVersion.WithKind(FileSystemAssociationKind)
)

func init() {
	SchemeBuilder.Register(&FileSystemAssociation{}, &FileSystemAssociationList{})
}
