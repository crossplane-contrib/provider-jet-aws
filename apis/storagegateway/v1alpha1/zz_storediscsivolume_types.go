/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type StoredIscsiVolumeObservation struct {
	Arn *string `json:"arn,omitempty" tf:"arn,omitempty"`

	ChapEnabled *bool `json:"chapEnabled,omitempty" tf:"chap_enabled,omitempty"`

	LunNumber *int64 `json:"lunNumber,omitempty" tf:"lun_number,omitempty"`

	NetworkInterfacePort *int64 `json:"networkInterfacePort,omitempty" tf:"network_interface_port,omitempty"`

	TagsAll map[string]*string `json:"tagsAll,omitempty" tf:"tags_all,omitempty"`

	TargetArn *string `json:"targetArn,omitempty" tf:"target_arn,omitempty"`

	VolumeAttachmentStatus *string `json:"volumeAttachmentStatus,omitempty" tf:"volume_attachment_status,omitempty"`

	VolumeID *string `json:"volumeId,omitempty" tf:"volume_id,omitempty"`

	VolumeSizeInBytes *int64 `json:"volumeSizeInBytes,omitempty" tf:"volume_size_in_bytes,omitempty"`

	VolumeStatus *string `json:"volumeStatus,omitempty" tf:"volume_status,omitempty"`

	VolumeType *string `json:"volumeType,omitempty" tf:"volume_type,omitempty"`
}

type StoredIscsiVolumeParameters struct {

	// +kubebuilder:validation:Required
	DiskID *string `json:"diskId" tf:"disk_id,omitempty"`

	// +kubebuilder:validation:Required
	GatewayArn *string `json:"gatewayArn" tf:"gateway_arn,omitempty"`

	// +kubebuilder:validation:Optional
	KmsEncrypted *bool `json:"kmsEncrypted,omitempty" tf:"kms_encrypted,omitempty"`

	// +kubebuilder:validation:Optional
	KmsKey *string `json:"kmsKey,omitempty" tf:"kms_key,omitempty"`

	// +kubebuilder:validation:Required
	NetworkInterfaceID *string `json:"networkInterfaceId" tf:"network_interface_id,omitempty"`

	// +kubebuilder:validation:Required
	PreserveExistingData *bool `json:"preserveExistingData" tf:"preserve_existing_data,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +terrajet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`

	// +kubebuilder:validation:Optional
	SnapshotID *string `json:"snapshotId,omitempty" tf:"snapshot_id,omitempty"`

	// +kubebuilder:validation:Optional
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// +kubebuilder:validation:Required
	TargetName *string `json:"targetName" tf:"target_name,omitempty"`
}

// StoredIscsiVolumeSpec defines the desired state of StoredIscsiVolume
type StoredIscsiVolumeSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     StoredIscsiVolumeParameters `json:"forProvider"`
}

// StoredIscsiVolumeStatus defines the observed state of StoredIscsiVolume.
type StoredIscsiVolumeStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        StoredIscsiVolumeObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// StoredIscsiVolume is the Schema for the StoredIscsiVolumes API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tfaws}
type StoredIscsiVolume struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              StoredIscsiVolumeSpec   `json:"spec"`
	Status            StoredIscsiVolumeStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// StoredIscsiVolumeList contains a list of StoredIscsiVolumes
type StoredIscsiVolumeList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []StoredIscsiVolume `json:"items"`
}

// Repository type metadata.
var (
	StoredIscsiVolumeKind             = "StoredIscsiVolume"
	StoredIscsiVolumeGroupKind        = schema.GroupKind{Group: Group, Kind: StoredIscsiVolumeKind}.String()
	StoredIscsiVolumeKindAPIVersion   = StoredIscsiVolumeKind + "." + GroupVersion.String()
	StoredIscsiVolumeGroupVersionKind = GroupVersion.WithKind(StoredIscsiVolumeKind)
)

func init() {
	SchemeBuilder.Register(&StoredIscsiVolume{}, &StoredIscsiVolumeList{})
}
