/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type NfsFileShareCacheAttributesObservation struct {
}

type NfsFileShareCacheAttributesParameters struct {

	// +kubebuilder:validation:Optional
	CacheStaleTimeoutInSeconds *int64 `json:"cacheStaleTimeoutInSeconds,omitempty" tf:"cache_stale_timeout_in_seconds,omitempty"`
}

type NfsFileShareDefaultsObservation struct {
}

type NfsFileShareDefaultsParameters struct {

	// +kubebuilder:validation:Optional
	DirectoryMode *string `json:"directoryMode,omitempty" tf:"directory_mode,omitempty"`

	// +kubebuilder:validation:Optional
	FileMode *string `json:"fileMode,omitempty" tf:"file_mode,omitempty"`

	// +kubebuilder:validation:Optional
	GroupID *string `json:"groupId,omitempty" tf:"group_id,omitempty"`

	// +kubebuilder:validation:Optional
	OwnerID *string `json:"ownerId,omitempty" tf:"owner_id,omitempty"`
}

type NfsFileShareObservation struct {
	Arn *string `json:"arn,omitempty" tf:"arn,omitempty"`

	FileshareID *string `json:"fileshareId,omitempty" tf:"fileshare_id,omitempty"`

	Path *string `json:"path,omitempty" tf:"path,omitempty"`

	TagsAll map[string]*string `json:"tagsAll,omitempty" tf:"tags_all,omitempty"`
}

type NfsFileShareParameters struct {

	// +kubebuilder:validation:Optional
	CacheAttributes []NfsFileShareCacheAttributesParameters `json:"cacheAttributes,omitempty" tf:"cache_attributes,omitempty"`

	// +kubebuilder:validation:Required
	ClientList []*string `json:"clientList" tf:"client_list,omitempty"`

	// +kubebuilder:validation:Optional
	DefaultStorageClass *string `json:"defaultStorageClass,omitempty" tf:"default_storage_class,omitempty"`

	// +kubebuilder:validation:Optional
	FileShareName *string `json:"fileShareName,omitempty" tf:"file_share_name,omitempty"`

	// +kubebuilder:validation:Required
	GatewayArn *string `json:"gatewayArn" tf:"gateway_arn,omitempty"`

	// +kubebuilder:validation:Optional
	GuessMimeTypeEnabled *bool `json:"guessMimeTypeEnabled,omitempty" tf:"guess_mime_type_enabled,omitempty"`

	// +kubebuilder:validation:Optional
	KmsEncrypted *bool `json:"kmsEncrypted,omitempty" tf:"kms_encrypted,omitempty"`

	// +kubebuilder:validation:Optional
	KmsKeyArn *string `json:"kmsKeyArn,omitempty" tf:"kms_key_arn,omitempty"`

	// +kubebuilder:validation:Required
	LocationArn *string `json:"locationArn" tf:"location_arn,omitempty"`

	// +kubebuilder:validation:Optional
	NfsFileShareDefaults []NfsFileShareDefaultsParameters `json:"nfsFileShareDefaults,omitempty" tf:"nfs_file_share_defaults,omitempty"`

	// +kubebuilder:validation:Optional
	NotificationPolicy *string `json:"notificationPolicy,omitempty" tf:"notification_policy,omitempty"`

	// +kubebuilder:validation:Optional
	ObjectACL *string `json:"objectAcl,omitempty" tf:"object_acl,omitempty"`

	// +kubebuilder:validation:Optional
	ReadOnly *bool `json:"readOnly,omitempty" tf:"read_only,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +terrajet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`

	// +kubebuilder:validation:Optional
	RequesterPays *bool `json:"requesterPays,omitempty" tf:"requester_pays,omitempty"`

	// +kubebuilder:validation:Required
	RoleArn *string `json:"roleArn" tf:"role_arn,omitempty"`

	// +kubebuilder:validation:Optional
	Squash *string `json:"squash,omitempty" tf:"squash,omitempty"`

	// +kubebuilder:validation:Optional
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

// NfsFileShareSpec defines the desired state of NfsFileShare
type NfsFileShareSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     NfsFileShareParameters `json:"forProvider"`
}

// NfsFileShareStatus defines the observed state of NfsFileShare.
type NfsFileShareStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        NfsFileShareObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// NfsFileShare is the Schema for the NfsFileShares API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tfaws}
type NfsFileShare struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              NfsFileShareSpec   `json:"spec"`
	Status            NfsFileShareStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// NfsFileShareList contains a list of NfsFileShares
type NfsFileShareList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []NfsFileShare `json:"items"`
}

// Repository type metadata.
var (
	NfsFileShareKind             = "NfsFileShare"
	NfsFileShareGroupKind        = schema.GroupKind{Group: Group, Kind: NfsFileShareKind}.String()
	NfsFileShareKindAPIVersion   = NfsFileShareKind + "." + GroupVersion.String()
	NfsFileShareGroupVersionKind = GroupVersion.WithKind(NfsFileShareKind)
)

func init() {
	SchemeBuilder.Register(&NfsFileShare{}, &NfsFileShareList{})
}
