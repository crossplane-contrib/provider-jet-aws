/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type ContentConfigObservation struct {
}

type ContentConfigParameters struct {
	Bucket *string `json:"bucket,omitempty" tf:"bucket"`

	StorageClass *string `json:"storageClass,omitempty" tf:"storage_class"`
}

type ContentConfigPermissionsObservation struct {
}

type ContentConfigPermissionsParameters struct {
	Access []string `json:"access,omitempty" tf:"access"`

	Grantee *string `json:"grantee,omitempty" tf:"grantee"`

	GranteeType *string `json:"granteeType,omitempty" tf:"grantee_type"`
}

type ElastictranscoderPipelineObservation struct {
	ARN string `json:"arn" tf:"arn"`
}

type ElastictranscoderPipelineParameters struct {
	AwsKmsKeyARN *string `json:"awsKmsKeyARN,omitempty" tf:"aws_kms_key_arn"`

	ContentConfig []ContentConfigParameters `json:"contentConfig,omitempty" tf:"content_config"`

	ContentConfigPermissions []ContentConfigPermissionsParameters `json:"contentConfigPermissions,omitempty" tf:"content_config_permissions"`

	InputBucket string `json:"inputBucket" tf:"input_bucket"`

	Name *string `json:"name,omitempty" tf:"name"`

	Notifications []NotificationsParameters `json:"notifications,omitempty" tf:"notifications"`

	OutputBucket *string `json:"outputBucket,omitempty" tf:"output_bucket"`

	Role string `json:"role" tf:"role"`

	ThumbnailConfig []ThumbnailConfigParameters `json:"thumbnailConfig,omitempty" tf:"thumbnail_config"`

	ThumbnailConfigPermissions []ThumbnailConfigPermissionsParameters `json:"thumbnailConfigPermissions,omitempty" tf:"thumbnail_config_permissions"`
}

type NotificationsObservation struct {
}

type NotificationsParameters struct {
	Completed *string `json:"completed,omitempty" tf:"completed"`

	Error *string `json:"error,omitempty" tf:"error"`

	Progressing *string `json:"progressing,omitempty" tf:"progressing"`

	Warning *string `json:"warning,omitempty" tf:"warning"`
}

type ThumbnailConfigObservation struct {
}

type ThumbnailConfigParameters struct {
	Bucket *string `json:"bucket,omitempty" tf:"bucket"`

	StorageClass *string `json:"storageClass,omitempty" tf:"storage_class"`
}

type ThumbnailConfigPermissionsObservation struct {
}

type ThumbnailConfigPermissionsParameters struct {
	Access []string `json:"access,omitempty" tf:"access"`

	Grantee *string `json:"grantee,omitempty" tf:"grantee"`

	GranteeType *string `json:"granteeType,omitempty" tf:"grantee_type"`
}

// ElastictranscoderPipelineSpec defines the desired state of ElastictranscoderPipeline
type ElastictranscoderPipelineSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       ElastictranscoderPipelineParameters `json:"forProvider"`
}

// ElastictranscoderPipelineStatus defines the observed state of ElastictranscoderPipeline.
type ElastictranscoderPipelineStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          ElastictranscoderPipelineObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ElastictranscoderPipeline is the Schema for the ElastictranscoderPipelines API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tfaws}
type ElastictranscoderPipeline struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ElastictranscoderPipelineSpec   `json:"spec"`
	Status            ElastictranscoderPipelineStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ElastictranscoderPipelineList contains a list of ElastictranscoderPipelines
type ElastictranscoderPipelineList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ElastictranscoderPipeline `json:"items"`
}

// Repository type metadata.
var (
	ElastictranscoderPipelineKind             = "ElastictranscoderPipeline"
	ElastictranscoderPipelineGroupKind        = schema.GroupKind{Group: Group, Kind: ElastictranscoderPipelineKind}.String()
	ElastictranscoderPipelineKindAPIVersion   = ElastictranscoderPipelineKind + "." + GroupVersion.String()
	ElastictranscoderPipelineGroupVersionKind = GroupVersion.WithKind(ElastictranscoderPipelineKind)
)

func init() {
	SchemeBuilder.Register(&ElastictranscoderPipeline{}, &ElastictranscoderPipelineList{})
}
