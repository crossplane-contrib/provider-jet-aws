/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ContentConfigObservation struct {
}

type ContentConfigParameters struct {

	// +kubebuilder:validation:Optional
	Bucket *string `json:"bucket,omitempty" tf:"bucket,omitempty"`

	// +kubebuilder:validation:Optional
	StorageClass *string `json:"storageClass,omitempty" tf:"storage_class,omitempty"`
}

type ContentConfigPermissionsObservation struct {
}

type ContentConfigPermissionsParameters struct {

	// +kubebuilder:validation:Optional
	Access []*string `json:"access,omitempty" tf:"access,omitempty"`

	// +kubebuilder:validation:Optional
	Grantee *string `json:"grantee,omitempty" tf:"grantee,omitempty"`

	// +kubebuilder:validation:Optional
	GranteeType *string `json:"granteeType,omitempty" tf:"grantee_type,omitempty"`
}

type NotificationsObservation struct {
}

type NotificationsParameters struct {

	// +kubebuilder:validation:Optional
	Completed *string `json:"completed,omitempty" tf:"completed,omitempty"`

	// +kubebuilder:validation:Optional
	Error *string `json:"error,omitempty" tf:"error,omitempty"`

	// +kubebuilder:validation:Optional
	Progressing *string `json:"progressing,omitempty" tf:"progressing,omitempty"`

	// +kubebuilder:validation:Optional
	Warning *string `json:"warning,omitempty" tf:"warning,omitempty"`
}

type PipelineObservation struct {
	Arn *string `json:"arn,omitempty" tf:"arn,omitempty"`
}

type PipelineParameters struct {

	// +kubebuilder:validation:Optional
	AwsKmsKeyArn *string `json:"awsKmsKeyArn,omitempty" tf:"aws_kms_key_arn,omitempty"`

	// +kubebuilder:validation:Optional
	ContentConfig []ContentConfigParameters `json:"contentConfig,omitempty" tf:"content_config,omitempty"`

	// +kubebuilder:validation:Optional
	ContentConfigPermissions []ContentConfigPermissionsParameters `json:"contentConfigPermissions,omitempty" tf:"content_config_permissions,omitempty"`

	// +kubebuilder:validation:Required
	InputBucket *string `json:"inputBucket" tf:"input_bucket,omitempty"`

	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	Notifications []NotificationsParameters `json:"notifications,omitempty" tf:"notifications,omitempty"`

	// +kubebuilder:validation:Optional
	OutputBucket *string `json:"outputBucket,omitempty" tf:"output_bucket,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +terrajet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`

	// +kubebuilder:validation:Required
	Role *string `json:"role" tf:"role,omitempty"`

	// +kubebuilder:validation:Optional
	ThumbnailConfig []ThumbnailConfigParameters `json:"thumbnailConfig,omitempty" tf:"thumbnail_config,omitempty"`

	// +kubebuilder:validation:Optional
	ThumbnailConfigPermissions []ThumbnailConfigPermissionsParameters `json:"thumbnailConfigPermissions,omitempty" tf:"thumbnail_config_permissions,omitempty"`
}

type ThumbnailConfigObservation struct {
}

type ThumbnailConfigParameters struct {

	// +kubebuilder:validation:Optional
	Bucket *string `json:"bucket,omitempty" tf:"bucket,omitempty"`

	// +kubebuilder:validation:Optional
	StorageClass *string `json:"storageClass,omitempty" tf:"storage_class,omitempty"`
}

type ThumbnailConfigPermissionsObservation struct {
}

type ThumbnailConfigPermissionsParameters struct {

	// +kubebuilder:validation:Optional
	Access []*string `json:"access,omitempty" tf:"access,omitempty"`

	// +kubebuilder:validation:Optional
	Grantee *string `json:"grantee,omitempty" tf:"grantee,omitempty"`

	// +kubebuilder:validation:Optional
	GranteeType *string `json:"granteeType,omitempty" tf:"grantee_type,omitempty"`
}

// PipelineSpec defines the desired state of Pipeline
type PipelineSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     PipelineParameters `json:"forProvider"`
}

// PipelineStatus defines the observed state of Pipeline.
type PipelineStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        PipelineObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Pipeline is the Schema for the Pipelines API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tfaws}
type Pipeline struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              PipelineSpec   `json:"spec"`
	Status            PipelineStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// PipelineList contains a list of Pipelines
type PipelineList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Pipeline `json:"items"`
}

// Repository type metadata.
var (
	PipelineKind             = "Pipeline"
	PipelineGroupKind        = schema.GroupKind{Group: Group, Kind: PipelineKind}.String()
	PipelineKindAPIVersion   = PipelineKind + "." + GroupVersion.String()
	PipelineGroupVersionKind = GroupVersion.WithKind(PipelineKind)
)

func init() {
	SchemeBuilder.Register(&Pipeline{}, &PipelineList{})
}
