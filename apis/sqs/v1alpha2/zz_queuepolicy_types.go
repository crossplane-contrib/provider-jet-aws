/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha2

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type QueuePolicyObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type QueuePolicyParameters struct {

	// +kubebuilder:validation:Required
	Policy *string `json:"policy" tf:"policy,omitempty"`

	// +kubebuilder:validation:Required
	QueueURL *string `json:"queueUrl" tf:"queue_url,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +terrajet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`
}

// QueuePolicySpec defines the desired state of QueuePolicy
type QueuePolicySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     QueuePolicyParameters `json:"forProvider"`
}

// QueuePolicyStatus defines the observed state of QueuePolicy.
type QueuePolicyStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        QueuePolicyObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// QueuePolicy is the Schema for the QueuePolicys API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,awsjet}
type QueuePolicy struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              QueuePolicySpec   `json:"spec"`
	Status            QueuePolicyStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// QueuePolicyList contains a list of QueuePolicys
type QueuePolicyList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []QueuePolicy `json:"items"`
}

// Repository type metadata.
var (
	QueuePolicy_Kind             = "QueuePolicy"
	QueuePolicy_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: QueuePolicy_Kind}.String()
	QueuePolicy_KindAPIVersion   = QueuePolicy_Kind + "." + CRDGroupVersion.String()
	QueuePolicy_GroupVersionKind = CRDGroupVersion.WithKind(QueuePolicy_Kind)
)

func init() {
	SchemeBuilder.Register(&QueuePolicy{}, &QueuePolicyList{})
}
