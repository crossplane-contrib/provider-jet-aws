/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type SqsQueuePolicyObservation struct {
}

type SqsQueuePolicyParameters struct {
	Policy string `json:"policy" tf:"policy"`

	QueueURL string `json:"queueURL" tf:"queue_url"`
}

// SqsQueuePolicySpec defines the desired state of SqsQueuePolicy
type SqsQueuePolicySpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       SqsQueuePolicyParameters `json:"forProvider"`
}

// SqsQueuePolicyStatus defines the observed state of SqsQueuePolicy.
type SqsQueuePolicyStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          SqsQueuePolicyObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// SqsQueuePolicy is the Schema for the SqsQueuePolicys API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tfaws}
type SqsQueuePolicy struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              SqsQueuePolicySpec   `json:"spec"`
	Status            SqsQueuePolicyStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SqsQueuePolicyList contains a list of SqsQueuePolicys
type SqsQueuePolicyList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []SqsQueuePolicy `json:"items"`
}

// Repository type metadata.
var (
	SqsQueuePolicyKind             = "SqsQueuePolicy"
	SqsQueuePolicyGroupKind        = schema.GroupKind{Group: Group, Kind: SqsQueuePolicyKind}.String()
	SqsQueuePolicyKindAPIVersion   = SqsQueuePolicyKind + "." + GroupVersion.String()
	SqsQueuePolicyGroupVersionKind = GroupVersion.WithKind(SqsQueuePolicyKind)
)

func init() {
	SchemeBuilder.Register(&SqsQueuePolicy{}, &SqsQueuePolicyList{})
}
