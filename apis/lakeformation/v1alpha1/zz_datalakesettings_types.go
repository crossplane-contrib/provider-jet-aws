/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type CreateDatabaseDefaultPermissionsObservation struct {
}

type CreateDatabaseDefaultPermissionsParameters struct {

	// +kubebuilder:validation:Optional
	Permissions []*string `json:"permissions,omitempty" tf:"permissions,omitempty"`

	// +kubebuilder:validation:Optional
	Principal *string `json:"principal,omitempty" tf:"principal,omitempty"`
}

type CreateTableDefaultPermissionsObservation struct {
}

type CreateTableDefaultPermissionsParameters struct {

	// +kubebuilder:validation:Optional
	Permissions []*string `json:"permissions,omitempty" tf:"permissions,omitempty"`

	// +kubebuilder:validation:Optional
	Principal *string `json:"principal,omitempty" tf:"principal,omitempty"`
}

type DataLakeSettingsObservation struct {
}

type DataLakeSettingsParameters struct {

	// +kubebuilder:validation:Optional
	Admins []*string `json:"admins,omitempty" tf:"admins,omitempty"`

	// +kubebuilder:validation:Optional
	CatalogID *string `json:"catalogId,omitempty" tf:"catalog_id,omitempty"`

	// +kubebuilder:validation:Optional
	CreateDatabaseDefaultPermissions []CreateDatabaseDefaultPermissionsParameters `json:"createDatabaseDefaultPermissions,omitempty" tf:"create_database_default_permissions,omitempty"`

	// +kubebuilder:validation:Optional
	CreateTableDefaultPermissions []CreateTableDefaultPermissionsParameters `json:"createTableDefaultPermissions,omitempty" tf:"create_table_default_permissions,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +terrajet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`

	// +kubebuilder:validation:Optional
	TrustedResourceOwners []*string `json:"trustedResourceOwners,omitempty" tf:"trusted_resource_owners,omitempty"`
}

// DataLakeSettingsSpec defines the desired state of DataLakeSettings
type DataLakeSettingsSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     DataLakeSettingsParameters `json:"forProvider"`
}

// DataLakeSettingsStatus defines the observed state of DataLakeSettings.
type DataLakeSettingsStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        DataLakeSettingsObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// DataLakeSettings is the Schema for the DataLakeSettingss API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tfaws}
type DataLakeSettings struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DataLakeSettingsSpec   `json:"spec"`
	Status            DataLakeSettingsStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DataLakeSettingsList contains a list of DataLakeSettingss
type DataLakeSettingsList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DataLakeSettings `json:"items"`
}

// Repository type metadata.
var (
	DataLakeSettingsKind             = "DataLakeSettings"
	DataLakeSettingsGroupKind        = schema.GroupKind{Group: Group, Kind: DataLakeSettingsKind}.String()
	DataLakeSettingsKindAPIVersion   = DataLakeSettingsKind + "." + GroupVersion.String()
	DataLakeSettingsGroupVersionKind = GroupVersion.WithKind(DataLakeSettingsKind)
)

func init() {
	SchemeBuilder.Register(&DataLakeSettings{}, &DataLakeSettingsList{})
}
