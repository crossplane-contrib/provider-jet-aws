/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

// +kubebuilder:object:generate=true
// +groupName=lakeformation.aws.tf.crossplane.io
// +versionName=v1alpha1

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1alpha1 "github.com/crossplane-contrib/provider-tf-aws/apis/lakeformation/v1alpha1"
)

type DataLocationObservation struct {
}

type DataLocationParameters struct {
	Arn string `json:"arn" tf:"arn"`

	CatalogId *string `json:"catalogId,omitempty" tf:"catalog_id"`
}

type DatabaseObservation struct {
}

type DatabaseParameters struct {
	CatalogId *string `json:"catalogId,omitempty" tf:"catalog_id"`

	Name string `json:"name" tf:"name"`
}

type LakeformationPermissionsObservation struct {
}

type LakeformationPermissionsParameters struct {
	CatalogId *string `json:"catalogId,omitempty" tf:"catalog_id"`

	CatalogResource *bool `json:"catalogResource,omitempty" tf:"catalog_resource"`

	DataLocation []DataLocationParameters `json:"dataLocation,omitempty" tf:"data_location"`

	Database []DatabaseParameters `json:"database,omitempty" tf:"database"`

	Permissions []string `json:"permissions" tf:"permissions"`

	PermissionsWithGrantOption []string `json:"permissionsWithGrantOption,omitempty" tf:"permissions_with_grant_option"`

	Principal string `json:"principal" tf:"principal"`

	Table []TableParameters `json:"table,omitempty" tf:"table"`

	TableWithColumns []TableWithColumnsParameters `json:"tableWithColumns,omitempty" tf:"table_with_columns"`
}

type TableObservation struct {
}

type TableParameters struct {
	CatalogId *string `json:"catalogId,omitempty" tf:"catalog_id"`

	DatabaseName string `json:"databaseName" tf:"database_name"`

	Name *string `json:"name,omitempty" tf:"name"`

	Wildcard *bool `json:"wildcard,omitempty" tf:"wildcard"`
}

type TableWithColumnsObservation struct {
}

type TableWithColumnsParameters struct {
	CatalogId *string `json:"catalogId,omitempty" tf:"catalog_id"`

	ColumnNames []string `json:"columnNames,omitempty" tf:"column_names"`

	DatabaseName string `json:"databaseName" tf:"database_name"`

	ExcludedColumnNames []string `json:"excludedColumnNames,omitempty" tf:"excluded_column_names"`

	Name string `json:"name" tf:"name"`

	Wildcard *bool `json:"wildcard,omitempty" tf:"wildcard"`
}

// LakeformationPermissionsSpec defines the desired state of LakeformationPermissions
type LakeformationPermissionsSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       LakeformationPermissionsParameters `json:"forProvider"`
}

// LakeformationPermissionsStatus defines the observed state of LakeformationPermissions.
type LakeformationPermissionsStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          LakeformationPermissionsObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// LakeformationPermissions is the Schema for the LakeformationPermissionss API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type LakeformationPermissions struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              LakeformationPermissionsSpec   `json:"spec"`
	Status            LakeformationPermissionsStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// LakeformationPermissionsList contains a list of LakeformationPermissionss
type LakeformationPermissionsList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []LakeformationPermissions `json:"items"`
}

// Repository type metadata.
var (
	LakeformationPermissionsKind             = "LakeformationPermissions"
	LakeformationPermissionsGroupKind        = schema.GroupKind{Group: v1alpha1.Group, Kind: LakeformationPermissionsKind}.String()
	LakeformationPermissionsKindAPIVersion   = LakeformationPermissionsKind + "." + v1alpha1.GroupVersion.String()
	LakeformationPermissionsGroupVersionKind = v1alpha1.GroupVersion.WithKind(LakeformationPermissionsKind)
)

func init() {
	v1alpha1.SchemeBuilder.Register(&LakeformationPermissions{}, &LakeformationPermissionsList{})
}
