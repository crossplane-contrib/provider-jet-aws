/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

// +kubebuilder:object:generate=true
// +groupName=datapipeline.aws.tf.crossplane.io
// +versionName=v1alpha1

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1alpha1 "github.com/crossplane-contrib/provider-tf-aws/apis/datapipeline/v1alpha1"
)

type DatapipelinePipelineObservation struct {
}

type DatapipelinePipelineParameters struct {
	Description *string `json:"description,omitempty" tf:"description"`

	Name string `json:"name" tf:"name"`

	Tags map[string]string `json:"tags,omitempty" tf:"tags"`

	TagsAll map[string]string `json:"tagsAll,omitempty" tf:"tags_all"`
}

// DatapipelinePipelineSpec defines the desired state of DatapipelinePipeline
type DatapipelinePipelineSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       DatapipelinePipelineParameters `json:"forProvider"`
}

// DatapipelinePipelineStatus defines the observed state of DatapipelinePipeline.
type DatapipelinePipelineStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          DatapipelinePipelineObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// DatapipelinePipeline is the Schema for the DatapipelinePipelines API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type DatapipelinePipeline struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DatapipelinePipelineSpec   `json:"spec"`
	Status            DatapipelinePipelineStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DatapipelinePipelineList contains a list of DatapipelinePipelines
type DatapipelinePipelineList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DatapipelinePipeline `json:"items"`
}

// Repository type metadata.
var (
	DatapipelinePipelineKind             = "DatapipelinePipeline"
	DatapipelinePipelineGroupKind        = schema.GroupKind{Group: v1alpha1.Group, Kind: DatapipelinePipelineKind}.String()
	DatapipelinePipelineKindAPIVersion   = DatapipelinePipelineKind + "." + v1alpha1.GroupVersion.String()
	DatapipelinePipelineGroupVersionKind = v1alpha1.GroupVersion.WithKind(DatapipelinePipelineKind)
)

func init() {
	v1alpha1.SchemeBuilder.Register(&DatapipelinePipeline{}, &DatapipelinePipelineList{})
}
