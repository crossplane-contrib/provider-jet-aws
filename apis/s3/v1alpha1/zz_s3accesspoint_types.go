/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type PublicAccessBlockConfigurationObservation struct {
}

type PublicAccessBlockConfigurationParameters struct {
	BlockPublicAcls *bool `json:"blockPublicAcls,omitempty" tf:"block_public_acls"`

	BlockPublicPolicy *bool `json:"blockPublicPolicy,omitempty" tf:"block_public_policy"`

	IgnorePublicAcls *bool `json:"ignorePublicAcls,omitempty" tf:"ignore_public_acls"`

	RestrictPublicBuckets *bool `json:"restrictPublicBuckets,omitempty" tf:"restrict_public_buckets"`
}

type S3AccessPointObservation struct {
	ARN string `json:"arn" tf:"arn"`

	DomainName string `json:"domainName" tf:"domain_name"`

	HasPublicAccessPolicy bool `json:"hasPublicAccessPolicy" tf:"has_public_access_policy"`

	NetworkOrigin string `json:"networkOrigin" tf:"network_origin"`
}

type S3AccessPointParameters struct {
	AccountID *string `json:"accountID,omitempty" tf:"account_id"`

	Bucket string `json:"bucket" tf:"bucket"`

	Name string `json:"name" tf:"name"`

	Policy *string `json:"policy,omitempty" tf:"policy"`

	PublicAccessBlockConfiguration []PublicAccessBlockConfigurationParameters `json:"publicAccessBlockConfiguration,omitempty" tf:"public_access_block_configuration"`

	VPCConfiguration []VPCConfigurationParameters `json:"vpcConfiguration,omitempty" tf:"vpc_configuration"`
}

type VPCConfigurationObservation struct {
}

type VPCConfigurationParameters struct {
	VPCID string `json:"vpcID" tf:"vpc_id"`
}

// S3AccessPointSpec defines the desired state of S3AccessPoint
type S3AccessPointSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       S3AccessPointParameters `json:"forProvider"`
}

// S3AccessPointStatus defines the observed state of S3AccessPoint.
type S3AccessPointStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          S3AccessPointObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// S3AccessPoint is the Schema for the S3AccessPoints API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tfaws}
type S3AccessPoint struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              S3AccessPointSpec   `json:"spec"`
	Status            S3AccessPointStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// S3AccessPointList contains a list of S3AccessPoints
type S3AccessPointList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []S3AccessPoint `json:"items"`
}

// Repository type metadata.
var (
	S3AccessPointKind             = "S3AccessPoint"
	S3AccessPointGroupKind        = schema.GroupKind{Group: Group, Kind: S3AccessPointKind}.String()
	S3AccessPointKindAPIVersion   = S3AccessPointKind + "." + GroupVersion.String()
	S3AccessPointGroupVersionKind = GroupVersion.WithKind(S3AccessPointKind)
)

func init() {
	SchemeBuilder.Register(&S3AccessPoint{}, &S3AccessPointList{})
}
