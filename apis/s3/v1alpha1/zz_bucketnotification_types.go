/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type BucketNotificationObservation struct {
}

type BucketNotificationParameters struct {

	// +kubebuilder:validation:Required
	Bucket *string `json:"bucket" tf:"bucket,omitempty"`

	// +kubebuilder:validation:Optional
	LambdaFunction []LambdaFunctionParameters `json:"lambdaFunction,omitempty" tf:"lambda_function,omitempty"`

	// +kubebuilder:validation:Optional
	Queue []QueueParameters `json:"queue,omitempty" tf:"queue,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +terrajet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`

	// +kubebuilder:validation:Optional
	Topic []TopicParameters `json:"topic,omitempty" tf:"topic,omitempty"`
}

type LambdaFunctionObservation struct {
}

type LambdaFunctionParameters struct {

	// +kubebuilder:validation:Required
	Events []*string `json:"events" tf:"events,omitempty"`

	// +kubebuilder:validation:Optional
	FilterPrefix *string `json:"filterPrefix,omitempty" tf:"filter_prefix,omitempty"`

	// +kubebuilder:validation:Optional
	FilterSuffix *string `json:"filterSuffix,omitempty" tf:"filter_suffix,omitempty"`

	// +kubebuilder:validation:Optional
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// +kubebuilder:validation:Optional
	LambdaFunctionArn *string `json:"lambdaFunctionArn,omitempty" tf:"lambda_function_arn,omitempty"`
}

type QueueObservation struct {
}

type QueueParameters struct {

	// +kubebuilder:validation:Required
	Events []*string `json:"events" tf:"events,omitempty"`

	// +kubebuilder:validation:Optional
	FilterPrefix *string `json:"filterPrefix,omitempty" tf:"filter_prefix,omitempty"`

	// +kubebuilder:validation:Optional
	FilterSuffix *string `json:"filterSuffix,omitempty" tf:"filter_suffix,omitempty"`

	// +kubebuilder:validation:Optional
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// +kubebuilder:validation:Required
	QueueArn *string `json:"queueArn" tf:"queue_arn,omitempty"`
}

type TopicObservation struct {
}

type TopicParameters struct {

	// +kubebuilder:validation:Required
	Events []*string `json:"events" tf:"events,omitempty"`

	// +kubebuilder:validation:Optional
	FilterPrefix *string `json:"filterPrefix,omitempty" tf:"filter_prefix,omitempty"`

	// +kubebuilder:validation:Optional
	FilterSuffix *string `json:"filterSuffix,omitempty" tf:"filter_suffix,omitempty"`

	// +kubebuilder:validation:Optional
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// +kubebuilder:validation:Required
	TopicArn *string `json:"topicArn" tf:"topic_arn,omitempty"`
}

// BucketNotificationSpec defines the desired state of BucketNotification
type BucketNotificationSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     BucketNotificationParameters `json:"forProvider"`
}

// BucketNotificationStatus defines the observed state of BucketNotification.
type BucketNotificationStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        BucketNotificationObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// BucketNotification is the Schema for the BucketNotifications API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tfaws}
type BucketNotification struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              BucketNotificationSpec   `json:"spec"`
	Status            BucketNotificationStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// BucketNotificationList contains a list of BucketNotifications
type BucketNotificationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []BucketNotification `json:"items"`
}

// Repository type metadata.
var (
	BucketNotificationKind             = "BucketNotification"
	BucketNotificationGroupKind        = schema.GroupKind{Group: Group, Kind: BucketNotificationKind}.String()
	BucketNotificationKindAPIVersion   = BucketNotificationKind + "." + GroupVersion.String()
	BucketNotificationGroupVersionKind = GroupVersion.WithKind(BucketNotificationKind)
)

func init() {
	SchemeBuilder.Register(&BucketNotification{}, &BucketNotificationList{})
}
