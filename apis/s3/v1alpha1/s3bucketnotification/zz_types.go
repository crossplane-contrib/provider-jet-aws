/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

// +kubebuilder:object:generate=true
// +groupName=s3.aws.tf.crossplane.io
// +versionName=v1alpha1

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1alpha1 "github.com/crossplane-contrib/provider-tf-aws/apis/s3/v1alpha1"
)

type LambdaFunctionObservation struct {
}

type LambdaFunctionParameters struct {
	Events []string `json:"events" tf:"events"`

	FilterPrefix *string `json:"filterPrefix,omitempty" tf:"filter_prefix"`

	FilterSuffix *string `json:"filterSuffix,omitempty" tf:"filter_suffix"`

	Id *string `json:"id,omitempty" tf:"id"`

	LambdaFunctionArn *string `json:"lambdaFunctionArn,omitempty" tf:"lambda_function_arn"`
}

type QueueObservation struct {
}

type QueueParameters struct {
	Events []string `json:"events" tf:"events"`

	FilterPrefix *string `json:"filterPrefix,omitempty" tf:"filter_prefix"`

	FilterSuffix *string `json:"filterSuffix,omitempty" tf:"filter_suffix"`

	Id *string `json:"id,omitempty" tf:"id"`

	QueueArn string `json:"queueArn" tf:"queue_arn"`
}

type S3BucketNotificationObservation struct {
}

type S3BucketNotificationParameters struct {
	Bucket string `json:"bucket" tf:"bucket"`

	LambdaFunction []LambdaFunctionParameters `json:"lambdaFunction,omitempty" tf:"lambda_function"`

	Queue []QueueParameters `json:"queue,omitempty" tf:"queue"`

	Topic []TopicParameters `json:"topic,omitempty" tf:"topic"`
}

type TopicObservation struct {
}

type TopicParameters struct {
	Events []string `json:"events" tf:"events"`

	FilterPrefix *string `json:"filterPrefix,omitempty" tf:"filter_prefix"`

	FilterSuffix *string `json:"filterSuffix,omitempty" tf:"filter_suffix"`

	Id *string `json:"id,omitempty" tf:"id"`

	TopicArn string `json:"topicArn" tf:"topic_arn"`
}

// S3BucketNotificationSpec defines the desired state of S3BucketNotification
type S3BucketNotificationSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       S3BucketNotificationParameters `json:"forProvider"`
}

// S3BucketNotificationStatus defines the observed state of S3BucketNotification.
type S3BucketNotificationStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          S3BucketNotificationObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// S3BucketNotification is the Schema for the S3BucketNotifications API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type S3BucketNotification struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              S3BucketNotificationSpec   `json:"spec"`
	Status            S3BucketNotificationStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// S3BucketNotificationList contains a list of S3BucketNotifications
type S3BucketNotificationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []S3BucketNotification `json:"items"`
}

// Repository type metadata.
var (
	S3BucketNotificationKind             = "S3BucketNotification"
	S3BucketNotificationGroupKind        = schema.GroupKind{Group: v1alpha1.Group, Kind: S3BucketNotificationKind}.String()
	S3BucketNotificationKindAPIVersion   = S3BucketNotificationKind + "." + v1alpha1.GroupVersion.String()
	S3BucketNotificationGroupVersionKind = v1alpha1.GroupVersion.WithKind(S3BucketNotificationKind)
)

func init() {
	v1alpha1.SchemeBuilder.Register(&S3BucketNotification{}, &S3BucketNotificationList{})
}
