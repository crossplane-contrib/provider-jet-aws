/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type BucketAnalyticsConfigurationFilterObservation struct {
}

type BucketAnalyticsConfigurationFilterParameters struct {

	// +kubebuilder:validation:Optional
	Prefix *string `json:"prefix,omitempty" tf:"prefix,omitempty"`

	// +kubebuilder:validation:Optional
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

type BucketAnalyticsConfigurationObservation struct {
}

type BucketAnalyticsConfigurationParameters struct {

	// +kubebuilder:validation:Required
	Bucket *string `json:"bucket" tf:"bucket,omitempty"`

	// +kubebuilder:validation:Optional
	Filter []BucketAnalyticsConfigurationFilterParameters `json:"filter,omitempty" tf:"filter,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +terrajet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`

	// +kubebuilder:validation:Optional
	StorageClassAnalysis []StorageClassAnalysisParameters `json:"storageClassAnalysis,omitempty" tf:"storage_class_analysis,omitempty"`
}

type DataExportDestinationObservation struct {
}

type DataExportDestinationParameters struct {

	// +kubebuilder:validation:Required
	S3BucketDestination []S3BucketDestinationParameters `json:"s3BucketDestination" tf:"s3_bucket_destination,omitempty"`
}

type DataExportObservation struct {
}

type DataExportParameters struct {

	// +kubebuilder:validation:Required
	Destination []DataExportDestinationParameters `json:"destination" tf:"destination,omitempty"`

	// +kubebuilder:validation:Optional
	OutputSchemaVersion *string `json:"outputSchemaVersion,omitempty" tf:"output_schema_version,omitempty"`
}

type S3BucketDestinationObservation struct {
}

type S3BucketDestinationParameters struct {

	// +kubebuilder:validation:Optional
	BucketAccountID *string `json:"bucketAccountId,omitempty" tf:"bucket_account_id,omitempty"`

	// +kubebuilder:validation:Required
	BucketArn *string `json:"bucketArn" tf:"bucket_arn,omitempty"`

	// +kubebuilder:validation:Optional
	Format *string `json:"format,omitempty" tf:"format,omitempty"`

	// +kubebuilder:validation:Optional
	Prefix *string `json:"prefix,omitempty" tf:"prefix,omitempty"`
}

type StorageClassAnalysisObservation struct {
}

type StorageClassAnalysisParameters struct {

	// +kubebuilder:validation:Required
	DataExport []DataExportParameters `json:"dataExport" tf:"data_export,omitempty"`
}

// BucketAnalyticsConfigurationSpec defines the desired state of BucketAnalyticsConfiguration
type BucketAnalyticsConfigurationSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     BucketAnalyticsConfigurationParameters `json:"forProvider"`
}

// BucketAnalyticsConfigurationStatus defines the observed state of BucketAnalyticsConfiguration.
type BucketAnalyticsConfigurationStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        BucketAnalyticsConfigurationObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// BucketAnalyticsConfiguration is the Schema for the BucketAnalyticsConfigurations API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tfaws}
type BucketAnalyticsConfiguration struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              BucketAnalyticsConfigurationSpec   `json:"spec"`
	Status            BucketAnalyticsConfigurationStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// BucketAnalyticsConfigurationList contains a list of BucketAnalyticsConfigurations
type BucketAnalyticsConfigurationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []BucketAnalyticsConfiguration `json:"items"`
}

// Repository type metadata.
var (
	BucketAnalyticsConfigurationKind             = "BucketAnalyticsConfiguration"
	BucketAnalyticsConfigurationGroupKind        = schema.GroupKind{Group: Group, Kind: BucketAnalyticsConfigurationKind}.String()
	BucketAnalyticsConfigurationKindAPIVersion   = BucketAnalyticsConfigurationKind + "." + GroupVersion.String()
	BucketAnalyticsConfigurationGroupVersionKind = GroupVersion.WithKind(BucketAnalyticsConfigurationKind)
)

func init() {
	SchemeBuilder.Register(&BucketAnalyticsConfiguration{}, &BucketAnalyticsConfigurationList{})
}
