/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

// +kubebuilder:object:generate=true
// +groupName=s3.aws.tf.crossplane.io
// +versionName=v1alpha1

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1alpha1 "github.com/crossplane-contrib/provider-tf-aws/apis/s3/v1alpha1"
)

type RuleObservation struct {
}

type RuleParameters struct {
	ObjectOwnership string `json:"objectOwnership" tf:"object_ownership"`
}

type S3BucketOwnershipControlsObservation struct {
}

type S3BucketOwnershipControlsParameters struct {
	Bucket string `json:"bucket" tf:"bucket"`

	Rule []RuleParameters `json:"rule" tf:"rule"`
}

// S3BucketOwnershipControlsSpec defines the desired state of S3BucketOwnershipControls
type S3BucketOwnershipControlsSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       S3BucketOwnershipControlsParameters `json:"forProvider"`
}

// S3BucketOwnershipControlsStatus defines the observed state of S3BucketOwnershipControls.
type S3BucketOwnershipControlsStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          S3BucketOwnershipControlsObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// S3BucketOwnershipControls is the Schema for the S3BucketOwnershipControlss API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type S3BucketOwnershipControls struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              S3BucketOwnershipControlsSpec   `json:"spec"`
	Status            S3BucketOwnershipControlsStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// S3BucketOwnershipControlsList contains a list of S3BucketOwnershipControlss
type S3BucketOwnershipControlsList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []S3BucketOwnershipControls `json:"items"`
}

// Repository type metadata.
var (
	S3BucketOwnershipControlsKind             = "S3BucketOwnershipControls"
	S3BucketOwnershipControlsGroupKind        = schema.GroupKind{Group: v1alpha1.Group, Kind: S3BucketOwnershipControlsKind}.String()
	S3BucketOwnershipControlsKindAPIVersion   = S3BucketOwnershipControlsKind + "." + v1alpha1.GroupVersion.String()
	S3BucketOwnershipControlsGroupVersionKind = v1alpha1.GroupVersion.WithKind(S3BucketOwnershipControlsKind)
)

func init() {
	v1alpha1.SchemeBuilder.Register(&S3BucketOwnershipControls{}, &S3BucketOwnershipControlsList{})
}
