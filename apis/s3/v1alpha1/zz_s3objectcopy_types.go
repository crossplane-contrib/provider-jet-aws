/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type S3ObjectCopyGrantObservation struct {
}

type S3ObjectCopyGrantParameters struct {

	// +kubebuilder:validation:Optional
	Email *string `json:"email,omitempty" tf:"email"`

	// +kubebuilder:validation:Optional
	ID *string `json:"id,omitempty" tf:"id"`

	// +kubebuilder:validation:Required
	Permissions []string `json:"permissions" tf:"permissions"`

	// +kubebuilder:validation:Required
	Type string `json:"type" tf:"type"`

	// +kubebuilder:validation:Optional
	URI *string `json:"uri,omitempty" tf:"uri"`
}

type S3ObjectCopyObservation struct {
	Etag string `json:"etag,omitempty" tf:"etag"`

	Expiration string `json:"expiration,omitempty" tf:"expiration"`

	LastModified string `json:"lastModified,omitempty" tf:"last_modified"`

	RequestCharged bool `json:"requestCharged,omitempty" tf:"request_charged"`

	SourceVersionID string `json:"sourceVersionId,omitempty" tf:"source_version_id"`

	VersionID string `json:"versionId,omitempty" tf:"version_id"`
}

type S3ObjectCopyParameters struct {

	// +kubebuilder:validation:Optional
	ACL *string `json:"acl,omitempty" tf:"acl"`

	// +kubebuilder:validation:Required
	Bucket string `json:"bucket" tf:"bucket"`

	// +kubebuilder:validation:Optional
	BucketKeyEnabled *bool `json:"bucketKeyEnabled,omitempty" tf:"bucket_key_enabled"`

	// +kubebuilder:validation:Optional
	CacheControl *string `json:"cacheControl,omitempty" tf:"cache_control"`

	// +kubebuilder:validation:Optional
	ContentDisposition *string `json:"contentDisposition,omitempty" tf:"content_disposition"`

	// +kubebuilder:validation:Optional
	ContentEncoding *string `json:"contentEncoding,omitempty" tf:"content_encoding"`

	// +kubebuilder:validation:Optional
	ContentLanguage *string `json:"contentLanguage,omitempty" tf:"content_language"`

	// +kubebuilder:validation:Optional
	ContentType *string `json:"contentType,omitempty" tf:"content_type"`

	// +kubebuilder:validation:Optional
	CopyIfMatch *string `json:"copyIfMatch,omitempty" tf:"copy_if_match"`

	// +kubebuilder:validation:Optional
	CopyIfModifiedSince *string `json:"copyIfModifiedSince,omitempty" tf:"copy_if_modified_since"`

	// +kubebuilder:validation:Optional
	CopyIfNoneMatch *string `json:"copyIfNoneMatch,omitempty" tf:"copy_if_none_match"`

	// +kubebuilder:validation:Optional
	CopyIfUnmodifiedSince *string `json:"copyIfUnmodifiedSince,omitempty" tf:"copy_if_unmodified_since"`

	// +kubebuilder:validation:Optional
	CustomerAlgorithm *string `json:"customerAlgorithm,omitempty" tf:"customer_algorithm"`

	// +kubebuilder:validation:Optional
	CustomerKeyMd5 *string `json:"customerKeyMd5,omitempty" tf:"customer_key_md5"`

	// +kubebuilder:validation:Optional
	CustomerKeySecretRef v1.SecretKeySelector `json:"customerKeySecretRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	ExpectedBucketOwner *string `json:"expectedBucketOwner,omitempty" tf:"expected_bucket_owner"`

	// +kubebuilder:validation:Optional
	ExpectedSourceBucketOwner *string `json:"expectedSourceBucketOwner,omitempty" tf:"expected_source_bucket_owner"`

	// +kubebuilder:validation:Optional
	Expires *string `json:"expires,omitempty" tf:"expires"`

	// +kubebuilder:validation:Optional
	ForceDestroy *bool `json:"forceDestroy,omitempty" tf:"force_destroy"`

	// +kubebuilder:validation:Optional
	Grant []S3ObjectCopyGrantParameters `json:"grant,omitempty" tf:"grant"`

	// +kubebuilder:validation:Required
	Key string `json:"key" tf:"key"`

	// +kubebuilder:validation:Optional
	KmsEncryptionContextSecretRef v1.SecretKeySelector `json:"kmsEncryptionContextSecretRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	KmsKeyIDSecretRef v1.SecretKeySelector `json:"kmsKeyIdSecretRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	Metadata map[string]string `json:"metadata,omitempty" tf:"metadata"`

	// +kubebuilder:validation:Optional
	MetadataDirective *string `json:"metadataDirective,omitempty" tf:"metadata_directive"`

	// +kubebuilder:validation:Optional
	ObjectLockLegalHoldStatus *string `json:"objectLockLegalHoldStatus,omitempty" tf:"object_lock_legal_hold_status"`

	// +kubebuilder:validation:Optional
	ObjectLockMode *string `json:"objectLockMode,omitempty" tf:"object_lock_mode"`

	// +kubebuilder:validation:Optional
	ObjectLockRetainUntilDate *string `json:"objectLockRetainUntilDate,omitempty" tf:"object_lock_retain_until_date"`

	// Region is the region you'd like your resource to be created in.
	// +terrajet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region string `json:"region" tf:"-"`

	// +kubebuilder:validation:Optional
	RequestPayer *string `json:"requestPayer,omitempty" tf:"request_payer"`

	// +kubebuilder:validation:Optional
	ServerSideEncryption *string `json:"serverSideEncryption,omitempty" tf:"server_side_encryption"`

	// +kubebuilder:validation:Required
	Source string `json:"source" tf:"source"`

	// +kubebuilder:validation:Optional
	SourceCustomerAlgorithm *string `json:"sourceCustomerAlgorithm,omitempty" tf:"source_customer_algorithm"`

	// +kubebuilder:validation:Optional
	SourceCustomerKeyMd5 *string `json:"sourceCustomerKeyMd5,omitempty" tf:"source_customer_key_md5"`

	// +kubebuilder:validation:Optional
	SourceCustomerKeySecretRef v1.SecretKeySelector `json:"sourceCustomerKeySecretRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	StorageClass *string `json:"storageClass,omitempty" tf:"storage_class"`

	// +kubebuilder:validation:Optional
	TaggingDirective *string `json:"taggingDirective,omitempty" tf:"tagging_directive"`

	// +kubebuilder:validation:Optional
	Tags map[string]string `json:"tags,omitempty" tf:"tags"`

	// +kubebuilder:validation:Optional
	TagsAll map[string]string `json:"tagsAll,omitempty" tf:"tags_all"`

	// +kubebuilder:validation:Optional
	WebsiteRedirect *string `json:"websiteRedirect,omitempty" tf:"website_redirect"`
}

// S3ObjectCopySpec defines the desired state of S3ObjectCopy
type S3ObjectCopySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     S3ObjectCopyParameters `json:"forProvider"`
}

// S3ObjectCopyStatus defines the observed state of S3ObjectCopy.
type S3ObjectCopyStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        S3ObjectCopyObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// S3ObjectCopy is the Schema for the S3ObjectCopys API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tfaws}
type S3ObjectCopy struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              S3ObjectCopySpec   `json:"spec"`
	Status            S3ObjectCopyStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// S3ObjectCopyList contains a list of S3ObjectCopys
type S3ObjectCopyList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []S3ObjectCopy `json:"items"`
}

// Repository type metadata.
var (
	S3ObjectCopyKind             = "S3ObjectCopy"
	S3ObjectCopyGroupKind        = schema.GroupKind{Group: Group, Kind: S3ObjectCopyKind}.String()
	S3ObjectCopyKindAPIVersion   = S3ObjectCopyKind + "." + GroupVersion.String()
	S3ObjectCopyGroupVersionKind = GroupVersion.WithKind(S3ObjectCopyKind)
)

func init() {
	SchemeBuilder.Register(&S3ObjectCopy{}, &S3ObjectCopyList{})
}
