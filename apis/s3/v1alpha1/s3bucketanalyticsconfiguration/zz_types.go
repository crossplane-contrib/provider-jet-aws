/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

// +kubebuilder:object:generate=true
// +groupName=s3.aws.tf.crossplane.io
// +versionName=v1alpha1

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1alpha1 "github.com/crossplane-contrib/provider-tf-aws/apis/s3/v1alpha1"
)

type DataExportObservation struct {
}

type DataExportParameters struct {
	Destination []DestinationParameters `json:"destination" tf:"destination"`

	OutputSchemaVersion *string `json:"outputSchemaVersion,omitempty" tf:"output_schema_version"`
}

type DestinationObservation struct {
}

type DestinationParameters struct {
	S3BucketDestination []S3BucketDestinationParameters `json:"s3BucketDestination" tf:"s3_bucket_destination"`
}

type FilterObservation struct {
}

type FilterParameters struct {
	Prefix *string `json:"prefix,omitempty" tf:"prefix"`

	Tags map[string]string `json:"tags,omitempty" tf:"tags"`
}

type S3BucketAnalyticsConfigurationObservation struct {
}

type S3BucketAnalyticsConfigurationParameters struct {
	Bucket string `json:"bucket" tf:"bucket"`

	Filter []FilterParameters `json:"filter,omitempty" tf:"filter"`

	Name string `json:"name" tf:"name"`

	StorageClassAnalysis []StorageClassAnalysisParameters `json:"storageClassAnalysis,omitempty" tf:"storage_class_analysis"`
}

type S3BucketDestinationObservation struct {
}

type S3BucketDestinationParameters struct {
	BucketAccountId *string `json:"bucketAccountId,omitempty" tf:"bucket_account_id"`

	BucketArn string `json:"bucketArn" tf:"bucket_arn"`

	Format *string `json:"format,omitempty" tf:"format"`

	Prefix *string `json:"prefix,omitempty" tf:"prefix"`
}

type StorageClassAnalysisObservation struct {
}

type StorageClassAnalysisParameters struct {
	DataExport []DataExportParameters `json:"dataExport" tf:"data_export"`
}

// S3BucketAnalyticsConfigurationSpec defines the desired state of S3BucketAnalyticsConfiguration
type S3BucketAnalyticsConfigurationSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       S3BucketAnalyticsConfigurationParameters `json:"forProvider"`
}

// S3BucketAnalyticsConfigurationStatus defines the observed state of S3BucketAnalyticsConfiguration.
type S3BucketAnalyticsConfigurationStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          S3BucketAnalyticsConfigurationObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// S3BucketAnalyticsConfiguration is the Schema for the S3BucketAnalyticsConfigurations API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type S3BucketAnalyticsConfiguration struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              S3BucketAnalyticsConfigurationSpec   `json:"spec"`
	Status            S3BucketAnalyticsConfigurationStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// S3BucketAnalyticsConfigurationList contains a list of S3BucketAnalyticsConfigurations
type S3BucketAnalyticsConfigurationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []S3BucketAnalyticsConfiguration `json:"items"`
}

// Repository type metadata.
var (
	S3BucketAnalyticsConfigurationKind             = "S3BucketAnalyticsConfiguration"
	S3BucketAnalyticsConfigurationGroupKind        = schema.GroupKind{Group: v1alpha1.Group, Kind: S3BucketAnalyticsConfigurationKind}.String()
	S3BucketAnalyticsConfigurationKindAPIVersion   = S3BucketAnalyticsConfigurationKind + "." + v1alpha1.GroupVersion.String()
	S3BucketAnalyticsConfigurationGroupVersionKind = v1alpha1.GroupVersion.WithKind(S3BucketAnalyticsConfigurationKind)
)

func init() {
	v1alpha1.SchemeBuilder.Register(&S3BucketAnalyticsConfiguration{}, &S3BucketAnalyticsConfigurationList{})
}
