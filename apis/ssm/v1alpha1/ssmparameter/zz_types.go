/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

// +kubebuilder:object:generate=true
// +groupName=ssm.aws.tf.crossplane.io
// +versionName=v1alpha1

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1alpha1 "github.com/crossplane-contrib/provider-tf-aws/apis/ssm/v1alpha1"
)

type SsmParameterObservation struct {
	Version int64 `json:"version" tf:"version"`
}

type SsmParameterParameters struct {
	AllowedPattern *string `json:"allowedPattern,omitempty" tf:"allowed_pattern"`

	Arn *string `json:"arn,omitempty" tf:"arn"`

	DataType *string `json:"dataType,omitempty" tf:"data_type"`

	Description *string `json:"description,omitempty" tf:"description"`

	KeyId *string `json:"keyId,omitempty" tf:"key_id"`

	Name string `json:"name" tf:"name"`

	Overwrite *bool `json:"overwrite,omitempty" tf:"overwrite"`

	Tags map[string]string `json:"tags,omitempty" tf:"tags"`

	TagsAll map[string]string `json:"tagsAll,omitempty" tf:"tags_all"`

	Tier *string `json:"tier,omitempty" tf:"tier"`

	Type string `json:"type" tf:"type"`

	Value string `json:"value" tf:"value"`
}

// SsmParameterSpec defines the desired state of SsmParameter
type SsmParameterSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       SsmParameterParameters `json:"forProvider"`
}

// SsmParameterStatus defines the observed state of SsmParameter.
type SsmParameterStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          SsmParameterObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// SsmParameter is the Schema for the SsmParameters API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type SsmParameter struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              SsmParameterSpec   `json:"spec"`
	Status            SsmParameterStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SsmParameterList contains a list of SsmParameters
type SsmParameterList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []SsmParameter `json:"items"`
}

// Repository type metadata.
var (
	SsmParameterKind             = "SsmParameter"
	SsmParameterGroupKind        = schema.GroupKind{Group: v1alpha1.Group, Kind: SsmParameterKind}.String()
	SsmParameterKindAPIVersion   = SsmParameterKind + "." + v1alpha1.GroupVersion.String()
	SsmParameterGroupVersionKind = v1alpha1.GroupVersion.WithKind(SsmParameterKind)
)

func init() {
	v1alpha1.SchemeBuilder.Register(&SsmParameter{}, &SsmParameterList{})
}
