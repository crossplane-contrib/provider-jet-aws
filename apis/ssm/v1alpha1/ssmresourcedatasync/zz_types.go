/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

// +kubebuilder:object:generate=true
// +groupName=ssm.aws.tf.crossplane.io
// +versionName=v1alpha1

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1alpha1 "github.com/crossplane-contrib/provider-tf-aws/apis/ssm/v1alpha1"
)

type S3DestinationObservation struct {
}

type S3DestinationParameters struct {
	BucketName string `json:"bucketName" tf:"bucket_name"`

	KmsKeyArn *string `json:"kmsKeyArn,omitempty" tf:"kms_key_arn"`

	Prefix *string `json:"prefix,omitempty" tf:"prefix"`

	Region string `json:"region" tf:"region"`

	SyncFormat *string `json:"syncFormat,omitempty" tf:"sync_format"`
}

type SsmResourceDataSyncObservation struct {
}

type SsmResourceDataSyncParameters struct {
	Name string `json:"name" tf:"name"`

	S3Destination []S3DestinationParameters `json:"s3Destination" tf:"s3_destination"`
}

// SsmResourceDataSyncSpec defines the desired state of SsmResourceDataSync
type SsmResourceDataSyncSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       SsmResourceDataSyncParameters `json:"forProvider"`
}

// SsmResourceDataSyncStatus defines the observed state of SsmResourceDataSync.
type SsmResourceDataSyncStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          SsmResourceDataSyncObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// SsmResourceDataSync is the Schema for the SsmResourceDataSyncs API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type SsmResourceDataSync struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              SsmResourceDataSyncSpec   `json:"spec"`
	Status            SsmResourceDataSyncStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SsmResourceDataSyncList contains a list of SsmResourceDataSyncs
type SsmResourceDataSyncList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []SsmResourceDataSync `json:"items"`
}

// Repository type metadata.
var (
	SsmResourceDataSyncKind             = "SsmResourceDataSync"
	SsmResourceDataSyncGroupKind        = schema.GroupKind{Group: v1alpha1.Group, Kind: SsmResourceDataSyncKind}.String()
	SsmResourceDataSyncKindAPIVersion   = SsmResourceDataSyncKind + "." + v1alpha1.GroupVersion.String()
	SsmResourceDataSyncGroupVersionKind = v1alpha1.GroupVersion.WithKind(SsmResourceDataSyncKind)
)

func init() {
	v1alpha1.SchemeBuilder.Register(&SsmResourceDataSync{}, &SsmResourceDataSyncList{})
}
