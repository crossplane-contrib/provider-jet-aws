/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

// +kubebuilder:object:generate=true
// +groupName=ssm.aws.tf.crossplane.io
// +versionName=v1alpha1

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1alpha1 "github.com/crossplane-contrib/provider-tf-aws/apis/ssm/v1alpha1"
)

type SsmPatchGroupObservation struct {
}

type SsmPatchGroupParameters struct {
	BaselineId string `json:"baselineId" tf:"baseline_id"`

	PatchGroup string `json:"patchGroup" tf:"patch_group"`
}

// SsmPatchGroupSpec defines the desired state of SsmPatchGroup
type SsmPatchGroupSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       SsmPatchGroupParameters `json:"forProvider"`
}

// SsmPatchGroupStatus defines the observed state of SsmPatchGroup.
type SsmPatchGroupStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          SsmPatchGroupObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// SsmPatchGroup is the Schema for the SsmPatchGroups API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type SsmPatchGroup struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              SsmPatchGroupSpec   `json:"spec"`
	Status            SsmPatchGroupStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SsmPatchGroupList contains a list of SsmPatchGroups
type SsmPatchGroupList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []SsmPatchGroup `json:"items"`
}

// Repository type metadata.
var (
	SsmPatchGroupKind             = "SsmPatchGroup"
	SsmPatchGroupGroupKind        = schema.GroupKind{Group: v1alpha1.Group, Kind: SsmPatchGroupKind}.String()
	SsmPatchGroupKindAPIVersion   = SsmPatchGroupKind + "." + v1alpha1.GroupVersion.String()
	SsmPatchGroupGroupVersionKind = v1alpha1.GroupVersion.WithKind(SsmPatchGroupKind)
)

func init() {
	v1alpha1.SchemeBuilder.Register(&SsmPatchGroup{}, &SsmPatchGroupList{})
}
