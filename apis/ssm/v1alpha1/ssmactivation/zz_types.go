/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

// +kubebuilder:object:generate=true
// +groupName=ssm.aws.tf.crossplane.io
// +versionName=v1alpha1

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1alpha1 "github.com/crossplane-contrib/provider-tf-aws/apis/ssm/v1alpha1"
)

type SsmActivationObservation struct {
	ActivationCode string `json:"activationCode" tf:"activation_code"`

	Expired bool `json:"expired" tf:"expired"`

	RegistrationCount int64 `json:"registrationCount" tf:"registration_count"`
}

type SsmActivationParameters struct {
	Description *string `json:"description,omitempty" tf:"description"`

	ExpirationDate *string `json:"expirationDate,omitempty" tf:"expiration_date"`

	IamRole string `json:"iamRole" tf:"iam_role"`

	Name *string `json:"name,omitempty" tf:"name"`

	RegistrationLimit *int64 `json:"registrationLimit,omitempty" tf:"registration_limit"`

	Tags map[string]string `json:"tags,omitempty" tf:"tags"`

	TagsAll map[string]string `json:"tagsAll,omitempty" tf:"tags_all"`
}

// SsmActivationSpec defines the desired state of SsmActivation
type SsmActivationSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       SsmActivationParameters `json:"forProvider"`
}

// SsmActivationStatus defines the observed state of SsmActivation.
type SsmActivationStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          SsmActivationObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// SsmActivation is the Schema for the SsmActivations API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type SsmActivation struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              SsmActivationSpec   `json:"spec"`
	Status            SsmActivationStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SsmActivationList contains a list of SsmActivations
type SsmActivationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []SsmActivation `json:"items"`
}

// Repository type metadata.
var (
	SsmActivationKind             = "SsmActivation"
	SsmActivationGroupKind        = schema.GroupKind{Group: v1alpha1.Group, Kind: SsmActivationKind}.String()
	SsmActivationKindAPIVersion   = SsmActivationKind + "." + v1alpha1.GroupVersion.String()
	SsmActivationGroupVersionKind = v1alpha1.GroupVersion.WithKind(SsmActivationKind)
)

func init() {
	v1alpha1.SchemeBuilder.Register(&SsmActivation{}, &SsmActivationList{})
}
