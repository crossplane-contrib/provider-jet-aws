/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

// +kubebuilder:object:generate=true
// +groupName=ssm.aws.tf.crossplane.io
// +versionName=v1alpha1

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1alpha1 "github.com/crossplane-contrib/provider-tf-aws/apis/ssm/v1alpha1"
)

type AttachmentsSourceObservation struct {
}

type AttachmentsSourceParameters struct {
	Key string `json:"key" tf:"key"`

	Name *string `json:"name,omitempty" tf:"name"`

	Values []string `json:"values" tf:"values"`
}

type ParameterObservation struct {
}

type ParameterParameters struct {
	DefaultValue *string `json:"defaultValue,omitempty" tf:"default_value"`

	Description *string `json:"description,omitempty" tf:"description"`

	Name *string `json:"name,omitempty" tf:"name"`

	Type *string `json:"type,omitempty" tf:"type"`
}

type SsmDocumentObservation struct {
	Arn string `json:"arn" tf:"arn"`

	CreatedDate string `json:"createdDate" tf:"created_date"`

	DefaultVersion string `json:"defaultVersion" tf:"default_version"`

	Description string `json:"description" tf:"description"`

	DocumentVersion string `json:"documentVersion" tf:"document_version"`

	Hash string `json:"hash" tf:"hash"`

	HashType string `json:"hashType" tf:"hash_type"`

	LatestVersion string `json:"latestVersion" tf:"latest_version"`

	Owner string `json:"owner" tf:"owner"`

	Parameter []ParameterObservation `json:"parameter" tf:"parameter"`

	PlatformTypes []string `json:"platformTypes" tf:"platform_types"`

	SchemaVersion string `json:"schemaVersion" tf:"schema_version"`

	Status string `json:"status" tf:"status"`
}

type SsmDocumentParameters struct {
	AttachmentsSource []AttachmentsSourceParameters `json:"attachmentsSource,omitempty" tf:"attachments_source"`

	Content string `json:"content" tf:"content"`

	DocumentFormat *string `json:"documentFormat,omitempty" tf:"document_format"`

	DocumentType string `json:"documentType" tf:"document_type"`

	Name string `json:"name" tf:"name"`

	Permissions map[string]string `json:"permissions,omitempty" tf:"permissions"`

	Tags map[string]string `json:"tags,omitempty" tf:"tags"`

	TagsAll map[string]string `json:"tagsAll,omitempty" tf:"tags_all"`

	TargetType *string `json:"targetType,omitempty" tf:"target_type"`

	VersionName *string `json:"versionName,omitempty" tf:"version_name"`
}

// SsmDocumentSpec defines the desired state of SsmDocument
type SsmDocumentSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       SsmDocumentParameters `json:"forProvider"`
}

// SsmDocumentStatus defines the observed state of SsmDocument.
type SsmDocumentStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          SsmDocumentObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// SsmDocument is the Schema for the SsmDocuments API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type SsmDocument struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              SsmDocumentSpec   `json:"spec"`
	Status            SsmDocumentStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SsmDocumentList contains a list of SsmDocuments
type SsmDocumentList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []SsmDocument `json:"items"`
}

// Repository type metadata.
var (
	SsmDocumentKind             = "SsmDocument"
	SsmDocumentGroupKind        = schema.GroupKind{Group: v1alpha1.Group, Kind: SsmDocumentKind}.String()
	SsmDocumentKindAPIVersion   = SsmDocumentKind + "." + v1alpha1.GroupVersion.String()
	SsmDocumentGroupVersionKind = v1alpha1.GroupVersion.WithKind(SsmDocumentKind)
)

func init() {
	v1alpha1.SchemeBuilder.Register(&SsmDocument{}, &SsmDocumentList{})
}
