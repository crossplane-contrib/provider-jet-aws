/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

// +kubebuilder:object:generate=true
// +groupName=ecs.aws.tf.crossplane.io
// +versionName=v1alpha1

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1alpha1 "github.com/crossplane-contrib/provider-tf-aws/apis/ecs/v1alpha1"
)

type AutoScalingGroupProviderObservation struct {
}

type AutoScalingGroupProviderParameters struct {
	AutoScalingGroupArn string `json:"autoScalingGroupArn" tf:"auto_scaling_group_arn"`

	ManagedScaling []ManagedScalingParameters `json:"managedScaling,omitempty" tf:"managed_scaling"`

	ManagedTerminationProtection *string `json:"managedTerminationProtection,omitempty" tf:"managed_termination_protection"`
}

type EcsCapacityProviderObservation struct {
	Arn string `json:"arn" tf:"arn"`
}

type EcsCapacityProviderParameters struct {
	AutoScalingGroupProvider []AutoScalingGroupProviderParameters `json:"autoScalingGroupProvider" tf:"auto_scaling_group_provider"`

	Name string `json:"name" tf:"name"`

	Tags map[string]string `json:"tags,omitempty" tf:"tags"`

	TagsAll map[string]string `json:"tagsAll,omitempty" tf:"tags_all"`
}

type ManagedScalingObservation struct {
}

type ManagedScalingParameters struct {
	InstanceWarmupPeriod *int64 `json:"instanceWarmupPeriod,omitempty" tf:"instance_warmup_period"`

	MaximumScalingStepSize *int64 `json:"maximumScalingStepSize,omitempty" tf:"maximum_scaling_step_size"`

	MinimumScalingStepSize *int64 `json:"minimumScalingStepSize,omitempty" tf:"minimum_scaling_step_size"`

	Status *string `json:"status,omitempty" tf:"status"`

	TargetCapacity *int64 `json:"targetCapacity,omitempty" tf:"target_capacity"`
}

// EcsCapacityProviderSpec defines the desired state of EcsCapacityProvider
type EcsCapacityProviderSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       EcsCapacityProviderParameters `json:"forProvider"`
}

// EcsCapacityProviderStatus defines the observed state of EcsCapacityProvider.
type EcsCapacityProviderStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          EcsCapacityProviderObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// EcsCapacityProvider is the Schema for the EcsCapacityProviders API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type EcsCapacityProvider struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              EcsCapacityProviderSpec   `json:"spec"`
	Status            EcsCapacityProviderStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// EcsCapacityProviderList contains a list of EcsCapacityProviders
type EcsCapacityProviderList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []EcsCapacityProvider `json:"items"`
}

// Repository type metadata.
var (
	EcsCapacityProviderKind             = "EcsCapacityProvider"
	EcsCapacityProviderGroupKind        = schema.GroupKind{Group: v1alpha1.Group, Kind: EcsCapacityProviderKind}.String()
	EcsCapacityProviderKindAPIVersion   = EcsCapacityProviderKind + "." + v1alpha1.GroupVersion.String()
	EcsCapacityProviderGroupVersionKind = v1alpha1.GroupVersion.WithKind(EcsCapacityProviderKind)
)

func init() {
	v1alpha1.SchemeBuilder.Register(&EcsCapacityProvider{}, &EcsCapacityProviderList{})
}
