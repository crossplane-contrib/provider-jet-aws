/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

// +kubebuilder:object:generate=true
// +groupName=ecs.aws.tf.crossplane.io
// +versionName=v1alpha1

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1alpha1 "github.com/crossplane-contrib/provider-tf-aws/apis/ecs/v1alpha1"
)

type ConfigurationObservation struct {
}

type ConfigurationParameters struct {
	ExecuteCommandConfiguration []ExecuteCommandConfigurationParameters `json:"executeCommandConfiguration,omitempty" tf:"execute_command_configuration"`
}

type DefaultCapacityProviderStrategyObservation struct {
}

type DefaultCapacityProviderStrategyParameters struct {
	Base *int64 `json:"base,omitempty" tf:"base"`

	CapacityProvider string `json:"capacityProvider" tf:"capacity_provider"`

	Weight *int64 `json:"weight,omitempty" tf:"weight"`
}

type EcsClusterObservation struct {
	Arn string `json:"arn" tf:"arn"`
}

type EcsClusterParameters struct {
	CapacityProviders []string `json:"capacityProviders,omitempty" tf:"capacity_providers"`

	Configuration []ConfigurationParameters `json:"configuration,omitempty" tf:"configuration"`

	DefaultCapacityProviderStrategy []DefaultCapacityProviderStrategyParameters `json:"defaultCapacityProviderStrategy,omitempty" tf:"default_capacity_provider_strategy"`

	Name string `json:"name" tf:"name"`

	Setting []SettingParameters `json:"setting,omitempty" tf:"setting"`

	Tags map[string]string `json:"tags,omitempty" tf:"tags"`

	TagsAll map[string]string `json:"tagsAll,omitempty" tf:"tags_all"`
}

type ExecuteCommandConfigurationObservation struct {
}

type ExecuteCommandConfigurationParameters struct {
	KmsKeyId *string `json:"kmsKeyId,omitempty" tf:"kms_key_id"`

	LogConfiguration []LogConfigurationParameters `json:"logConfiguration,omitempty" tf:"log_configuration"`

	Logging *string `json:"logging,omitempty" tf:"logging"`
}

type LogConfigurationObservation struct {
}

type LogConfigurationParameters struct {
	CloudWatchEncryptionEnabled *bool `json:"cloudWatchEncryptionEnabled,omitempty" tf:"cloud_watch_encryption_enabled"`

	CloudWatchLogGroupName *string `json:"cloudWatchLogGroupName,omitempty" tf:"cloud_watch_log_group_name"`

	S3BucketEncryptionEnabled *bool `json:"s3BucketEncryptionEnabled,omitempty" tf:"s3_bucket_encryption_enabled"`

	S3BucketName *string `json:"s3BucketName,omitempty" tf:"s3_bucket_name"`

	S3KeyPrefix *string `json:"s3KeyPrefix,omitempty" tf:"s3_key_prefix"`
}

type SettingObservation struct {
}

type SettingParameters struct {
	Name string `json:"name" tf:"name"`

	Value string `json:"value" tf:"value"`
}

// EcsClusterSpec defines the desired state of EcsCluster
type EcsClusterSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       EcsClusterParameters `json:"forProvider"`
}

// EcsClusterStatus defines the observed state of EcsCluster.
type EcsClusterStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          EcsClusterObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// EcsCluster is the Schema for the EcsClusters API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type EcsCluster struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              EcsClusterSpec   `json:"spec"`
	Status            EcsClusterStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// EcsClusterList contains a list of EcsClusters
type EcsClusterList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []EcsCluster `json:"items"`
}

// Repository type metadata.
var (
	EcsClusterKind             = "EcsCluster"
	EcsClusterGroupKind        = schema.GroupKind{Group: v1alpha1.Group, Kind: EcsClusterKind}.String()
	EcsClusterKindAPIVersion   = EcsClusterKind + "." + v1alpha1.GroupVersion.String()
	EcsClusterGroupVersionKind = v1alpha1.GroupVersion.WithKind(EcsClusterKind)
)

func init() {
	v1alpha1.SchemeBuilder.Register(&EcsCluster{}, &EcsClusterList{})
}
