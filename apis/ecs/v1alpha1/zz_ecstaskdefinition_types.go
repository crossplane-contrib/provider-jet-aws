/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type AuthorizationConfigObservation struct {
}

type AuthorizationConfigParameters struct {
	AccessPointID *string `json:"accessPointID,omitempty" tf:"access_point_id"`

	Iam *string `json:"iam,omitempty" tf:"iam"`
}

type DockerVolumeConfigurationObservation struct {
}

type DockerVolumeConfigurationParameters struct {
	Autoprovision *bool `json:"autoprovision,omitempty" tf:"autoprovision"`

	Driver *string `json:"driver,omitempty" tf:"driver"`

	DriverOpts map[string]string `json:"driverOpts,omitempty" tf:"driver_opts"`

	Labels map[string]string `json:"labels,omitempty" tf:"labels"`

	Scope *string `json:"scope,omitempty" tf:"scope"`
}

type EcsTaskDefinitionObservation struct {
	ARN string `json:"arn" tf:"arn"`

	Revision int64 `json:"revision" tf:"revision"`
}

type EcsTaskDefinitionParameters struct {
	CPU *string `json:"cpu,omitempty" tf:"cpu"`

	ContainerDefinitions string `json:"containerDefinitions" tf:"container_definitions"`

	EphemeralStorage []EphemeralStorageParameters `json:"ephemeralStorage,omitempty" tf:"ephemeral_storage"`

	ExecutionRoleARN *string `json:"executionRoleARN,omitempty" tf:"execution_role_arn"`

	Family string `json:"family" tf:"family"`

	InferenceAccelerator []InferenceAcceleratorParameters `json:"inferenceAccelerator,omitempty" tf:"inference_accelerator"`

	IpcMode *string `json:"ipcMode,omitempty" tf:"ipc_mode"`

	Memory *string `json:"memory,omitempty" tf:"memory"`

	NetworkMode *string `json:"networkMode,omitempty" tf:"network_mode"`

	PidMode *string `json:"pidMode,omitempty" tf:"pid_mode"`

	PlacementConstraints []EcsTaskDefinitionPlacementConstraintsParameters `json:"placementConstraints,omitempty" tf:"placement_constraints"`

	ProxyConfiguration []ProxyConfigurationParameters `json:"proxyConfiguration,omitempty" tf:"proxy_configuration"`

	RequiresCompatibilities []string `json:"requiresCompatibilities,omitempty" tf:"requires_compatibilities"`

	Tags map[string]string `json:"tags,omitempty" tf:"tags"`

	TagsAll map[string]string `json:"tagsAll,omitempty" tf:"tags_all"`

	TaskRoleARN *string `json:"taskRoleARN,omitempty" tf:"task_role_arn"`

	Volume []VolumeParameters `json:"volume,omitempty" tf:"volume"`
}

type EcsTaskDefinitionPlacementConstraintsObservation struct {
}

type EcsTaskDefinitionPlacementConstraintsParameters struct {
	Expression *string `json:"expression,omitempty" tf:"expression"`

	Type string `json:"type" tf:"type"`
}

type EfsVolumeConfigurationObservation struct {
}

type EfsVolumeConfigurationParameters struct {
	AuthorizationConfig []AuthorizationConfigParameters `json:"authorizationConfig,omitempty" tf:"authorization_config"`

	FileSystemID string `json:"fileSystemID" tf:"file_system_id"`

	RootDirectory *string `json:"rootDirectory,omitempty" tf:"root_directory"`

	TransitEncryption *string `json:"transitEncryption,omitempty" tf:"transit_encryption"`

	TransitEncryptionPort *int64 `json:"transitEncryptionPort,omitempty" tf:"transit_encryption_port"`
}

type EphemeralStorageObservation struct {
}

type EphemeralStorageParameters struct {
	SizeInGib int64 `json:"sizeInGib" tf:"size_in_gib"`
}

type FsxWindowsFileServerVolumeConfigurationAuthorizationConfigObservation struct {
}

type FsxWindowsFileServerVolumeConfigurationAuthorizationConfigParameters struct {
	CredentialsParameter string `json:"credentialsParameter" tf:"credentials_parameter"`

	Domain string `json:"domain" tf:"domain"`
}

type FsxWindowsFileServerVolumeConfigurationObservation struct {
}

type FsxWindowsFileServerVolumeConfigurationParameters struct {
	AuthorizationConfig []FsxWindowsFileServerVolumeConfigurationAuthorizationConfigParameters `json:"authorizationConfig" tf:"authorization_config"`

	FileSystemID string `json:"fileSystemID" tf:"file_system_id"`

	RootDirectory string `json:"rootDirectory" tf:"root_directory"`
}

type InferenceAcceleratorObservation struct {
}

type InferenceAcceleratorParameters struct {
	DeviceName string `json:"deviceName" tf:"device_name"`

	DeviceType string `json:"deviceType" tf:"device_type"`
}

type ProxyConfigurationObservation struct {
}

type ProxyConfigurationParameters struct {
	ContainerName string `json:"containerName" tf:"container_name"`

	Properties map[string]string `json:"properties,omitempty" tf:"properties"`

	Type *string `json:"type,omitempty" tf:"type"`
}

type VolumeObservation struct {
}

type VolumeParameters struct {
	DockerVolumeConfiguration []DockerVolumeConfigurationParameters `json:"dockerVolumeConfiguration,omitempty" tf:"docker_volume_configuration"`

	EfsVolumeConfiguration []EfsVolumeConfigurationParameters `json:"efsVolumeConfiguration,omitempty" tf:"efs_volume_configuration"`

	FsxWindowsFileServerVolumeConfiguration []FsxWindowsFileServerVolumeConfigurationParameters `json:"fsxWindowsFileServerVolumeConfiguration,omitempty" tf:"fsx_windows_file_server_volume_configuration"`

	HostPath *string `json:"hostPath,omitempty" tf:"host_path"`

	Name string `json:"name" tf:"name"`
}

// EcsTaskDefinitionSpec defines the desired state of EcsTaskDefinition
type EcsTaskDefinitionSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       EcsTaskDefinitionParameters `json:"forProvider"`
}

// EcsTaskDefinitionStatus defines the observed state of EcsTaskDefinition.
type EcsTaskDefinitionStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          EcsTaskDefinitionObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// EcsTaskDefinition is the Schema for the EcsTaskDefinitions API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tfaws}
type EcsTaskDefinition struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              EcsTaskDefinitionSpec   `json:"spec"`
	Status            EcsTaskDefinitionStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// EcsTaskDefinitionList contains a list of EcsTaskDefinitions
type EcsTaskDefinitionList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []EcsTaskDefinition `json:"items"`
}

// Repository type metadata.
var (
	EcsTaskDefinitionKind             = "EcsTaskDefinition"
	EcsTaskDefinitionGroupKind        = schema.GroupKind{Group: Group, Kind: EcsTaskDefinitionKind}.String()
	EcsTaskDefinitionKindAPIVersion   = EcsTaskDefinitionKind + "." + GroupVersion.String()
	EcsTaskDefinitionGroupVersionKind = GroupVersion.WithKind(EcsTaskDefinitionKind)
)

func init() {
	SchemeBuilder.Register(&EcsTaskDefinition{}, &EcsTaskDefinitionList{})
}
