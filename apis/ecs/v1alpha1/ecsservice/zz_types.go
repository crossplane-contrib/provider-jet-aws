/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

// +kubebuilder:object:generate=true
// +groupName=ecs.aws.tf.crossplane.io
// +versionName=v1alpha1

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1alpha1 "github.com/crossplane-contrib/provider-tf-aws/apis/ecs/v1alpha1"
)

type CapacityProviderStrategyObservation struct {
}

type CapacityProviderStrategyParameters struct {
	Base *int64 `json:"base,omitempty" tf:"base"`

	CapacityProvider string `json:"capacityProvider" tf:"capacity_provider"`

	Weight *int64 `json:"weight,omitempty" tf:"weight"`
}

type DeploymentCircuitBreakerObservation struct {
}

type DeploymentCircuitBreakerParameters struct {
	Enable bool `json:"enable" tf:"enable"`

	Rollback bool `json:"rollback" tf:"rollback"`
}

type DeploymentControllerObservation struct {
}

type DeploymentControllerParameters struct {
	Type *string `json:"type,omitempty" tf:"type"`
}

type EcsServiceObservation struct {
}

type EcsServiceParameters struct {
	CapacityProviderStrategy []CapacityProviderStrategyParameters `json:"capacityProviderStrategy,omitempty" tf:"capacity_provider_strategy"`

	Cluster *string `json:"cluster,omitempty" tf:"cluster"`

	DeploymentCircuitBreaker []DeploymentCircuitBreakerParameters `json:"deploymentCircuitBreaker,omitempty" tf:"deployment_circuit_breaker"`

	DeploymentController []DeploymentControllerParameters `json:"deploymentController,omitempty" tf:"deployment_controller"`

	DeploymentMaximumPercent *int64 `json:"deploymentMaximumPercent,omitempty" tf:"deployment_maximum_percent"`

	DeploymentMinimumHealthyPercent *int64 `json:"deploymentMinimumHealthyPercent,omitempty" tf:"deployment_minimum_healthy_percent"`

	DesiredCount *int64 `json:"desiredCount,omitempty" tf:"desired_count"`

	EnableEcsManagedTags *bool `json:"enableEcsManagedTags,omitempty" tf:"enable_ecs_managed_tags"`

	EnableExecuteCommand *bool `json:"enableExecuteCommand,omitempty" tf:"enable_execute_command"`

	ForceNewDeployment *bool `json:"forceNewDeployment,omitempty" tf:"force_new_deployment"`

	HealthCheckGracePeriodSeconds *int64 `json:"healthCheckGracePeriodSeconds,omitempty" tf:"health_check_grace_period_seconds"`

	IamRole *string `json:"iamRole,omitempty" tf:"iam_role"`

	LaunchType *string `json:"launchType,omitempty" tf:"launch_type"`

	LoadBalancer []LoadBalancerParameters `json:"loadBalancer,omitempty" tf:"load_balancer"`

	Name string `json:"name" tf:"name"`

	NetworkConfiguration []NetworkConfigurationParameters `json:"networkConfiguration,omitempty" tf:"network_configuration"`

	OrderedPlacementStrategy []OrderedPlacementStrategyParameters `json:"orderedPlacementStrategy,omitempty" tf:"ordered_placement_strategy"`

	PlacementConstraints []PlacementConstraintsParameters `json:"placementConstraints,omitempty" tf:"placement_constraints"`

	PlatformVersion *string `json:"platformVersion,omitempty" tf:"platform_version"`

	PropagateTags *string `json:"propagateTags,omitempty" tf:"propagate_tags"`

	SchedulingStrategy *string `json:"schedulingStrategy,omitempty" tf:"scheduling_strategy"`

	ServiceRegistries []ServiceRegistriesParameters `json:"serviceRegistries,omitempty" tf:"service_registries"`

	Tags map[string]string `json:"tags,omitempty" tf:"tags"`

	TagsAll map[string]string `json:"tagsAll,omitempty" tf:"tags_all"`

	TaskDefinition *string `json:"taskDefinition,omitempty" tf:"task_definition"`

	WaitForSteadyState *bool `json:"waitForSteadyState,omitempty" tf:"wait_for_steady_state"`
}

type LoadBalancerObservation struct {
}

type LoadBalancerParameters struct {
	ContainerName string `json:"containerName" tf:"container_name"`

	ContainerPort int64 `json:"containerPort" tf:"container_port"`

	ElbName *string `json:"elbName,omitempty" tf:"elb_name"`

	TargetGroupArn *string `json:"targetGroupArn,omitempty" tf:"target_group_arn"`
}

type NetworkConfigurationObservation struct {
}

type NetworkConfigurationParameters struct {
	AssignPublicIp *bool `json:"assignPublicIp,omitempty" tf:"assign_public_ip"`

	SecurityGroups []string `json:"securityGroups,omitempty" tf:"security_groups"`

	Subnets []string `json:"subnets" tf:"subnets"`
}

type OrderedPlacementStrategyObservation struct {
}

type OrderedPlacementStrategyParameters struct {
	Field *string `json:"field,omitempty" tf:"field"`

	Type string `json:"type" tf:"type"`
}

type PlacementConstraintsObservation struct {
}

type PlacementConstraintsParameters struct {
	Expression *string `json:"expression,omitempty" tf:"expression"`

	Type string `json:"type" tf:"type"`
}

type ServiceRegistriesObservation struct {
}

type ServiceRegistriesParameters struct {
	ContainerName *string `json:"containerName,omitempty" tf:"container_name"`

	ContainerPort *int64 `json:"containerPort,omitempty" tf:"container_port"`

	Port *int64 `json:"port,omitempty" tf:"port"`

	RegistryArn string `json:"registryArn" tf:"registry_arn"`
}

// EcsServiceSpec defines the desired state of EcsService
type EcsServiceSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       EcsServiceParameters `json:"forProvider"`
}

// EcsServiceStatus defines the observed state of EcsService.
type EcsServiceStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          EcsServiceObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// EcsService is the Schema for the EcsServices API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type EcsService struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              EcsServiceSpec   `json:"spec"`
	Status            EcsServiceStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// EcsServiceList contains a list of EcsServices
type EcsServiceList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []EcsService `json:"items"`
}

// Repository type metadata.
var (
	EcsServiceKind             = "EcsService"
	EcsServiceGroupKind        = schema.GroupKind{Group: v1alpha1.Group, Kind: EcsServiceKind}.String()
	EcsServiceKindAPIVersion   = EcsServiceKind + "." + v1alpha1.GroupVersion.String()
	EcsServiceGroupVersionKind = v1alpha1.GroupVersion.WithKind(EcsServiceKind)
)

func init() {
	v1alpha1.SchemeBuilder.Register(&EcsService{}, &EcsServiceList{})
}
