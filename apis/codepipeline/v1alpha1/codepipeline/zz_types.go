/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

// +kubebuilder:object:generate=true
// +groupName=codepipeline.aws.tf.crossplane.io
// +versionName=v1alpha1

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1alpha1 "github.com/crossplane-contrib/provider-tf-aws/apis/codepipeline/v1alpha1"
)

type ActionObservation struct {
}

type ActionParameters struct {
	Category string `json:"category" tf:"category"`

	Configuration map[string]string `json:"configuration,omitempty" tf:"configuration"`

	InputArtifacts []string `json:"inputArtifacts,omitempty" tf:"input_artifacts"`

	Name string `json:"name" tf:"name"`

	Namespace *string `json:"namespace,omitempty" tf:"namespace"`

	OutputArtifacts []string `json:"outputArtifacts,omitempty" tf:"output_artifacts"`

	Owner string `json:"owner" tf:"owner"`

	Provider string `json:"provider" tf:"provider"`

	Region *string `json:"region,omitempty" tf:"region"`

	RoleArn *string `json:"roleArn,omitempty" tf:"role_arn"`

	RunOrder *int64 `json:"runOrder,omitempty" tf:"run_order"`

	Version string `json:"version" tf:"version"`
}

type ArtifactStoreObservation struct {
}

type ArtifactStoreParameters struct {
	EncryptionKey []EncryptionKeyParameters `json:"encryptionKey,omitempty" tf:"encryption_key"`

	Location string `json:"location" tf:"location"`

	Region *string `json:"region,omitempty" tf:"region"`

	Type string `json:"type" tf:"type"`
}

type CodepipelineObservation struct {
	Arn string `json:"arn" tf:"arn"`
}

type CodepipelineParameters struct {
	ArtifactStore []ArtifactStoreParameters `json:"artifactStore" tf:"artifact_store"`

	Name string `json:"name" tf:"name"`

	RoleArn string `json:"roleArn" tf:"role_arn"`

	Stage []StageParameters `json:"stage" tf:"stage"`

	Tags map[string]string `json:"tags,omitempty" tf:"tags"`

	TagsAll map[string]string `json:"tagsAll,omitempty" tf:"tags_all"`
}

type EncryptionKeyObservation struct {
}

type EncryptionKeyParameters struct {
	Id string `json:"id" tf:"id"`

	Type string `json:"type" tf:"type"`
}

type StageObservation struct {
}

type StageParameters struct {
	Action []ActionParameters `json:"action" tf:"action"`

	Name string `json:"name" tf:"name"`
}

// CodepipelineSpec defines the desired state of Codepipeline
type CodepipelineSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       CodepipelineParameters `json:"forProvider"`
}

// CodepipelineStatus defines the observed state of Codepipeline.
type CodepipelineStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          CodepipelineObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Codepipeline is the Schema for the Codepipelines API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type Codepipeline struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              CodepipelineSpec   `json:"spec"`
	Status            CodepipelineStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// CodepipelineList contains a list of Codepipelines
type CodepipelineList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Codepipeline `json:"items"`
}

// Repository type metadata.
var (
	CodepipelineKind             = "Codepipeline"
	CodepipelineGroupKind        = schema.GroupKind{Group: v1alpha1.Group, Kind: CodepipelineKind}.String()
	CodepipelineKindAPIVersion   = CodepipelineKind + "." + v1alpha1.GroupVersion.String()
	CodepipelineGroupVersionKind = v1alpha1.GroupVersion.WithKind(CodepipelineKind)
)

func init() {
	v1alpha1.SchemeBuilder.Register(&Codepipeline{}, &CodepipelineList{})
}
