/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type PredicateObservation struct {
}

type PredicateParameters struct {

	// +kubebuilder:validation:Required
	DataID *string `json:"dataId" tf:"data_id,omitempty"`

	// +kubebuilder:validation:Required
	Negated *bool `json:"negated" tf:"negated,omitempty"`

	// +kubebuilder:validation:Required
	Type *string `json:"type" tf:"type,omitempty"`
}

type RateBasedRuleObservation struct {
	Arn *string `json:"arn,omitempty" tf:"arn,omitempty"`

	TagsAll map[string]*string `json:"tagsAll,omitempty" tf:"tags_all,omitempty"`
}

type RateBasedRuleParameters struct {

	// +kubebuilder:validation:Required
	MetricName *string `json:"metricName" tf:"metric_name,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	Predicate []PredicateParameters `json:"predicate,omitempty" tf:"predicate,omitempty"`

	// +kubebuilder:validation:Required
	RateKey *string `json:"rateKey" tf:"rate_key,omitempty"`

	// +kubebuilder:validation:Required
	RateLimit *int64 `json:"rateLimit" tf:"rate_limit,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +terrajet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`

	// +kubebuilder:validation:Optional
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

// RateBasedRuleSpec defines the desired state of RateBasedRule
type RateBasedRuleSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     RateBasedRuleParameters `json:"forProvider"`
}

// RateBasedRuleStatus defines the observed state of RateBasedRule.
type RateBasedRuleStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        RateBasedRuleObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// RateBasedRule is the Schema for the RateBasedRules API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tfaws}
type RateBasedRule struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              RateBasedRuleSpec   `json:"spec"`
	Status            RateBasedRuleStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// RateBasedRuleList contains a list of RateBasedRules
type RateBasedRuleList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []RateBasedRule `json:"items"`
}

// Repository type metadata.
var (
	RateBasedRuleKind             = "RateBasedRule"
	RateBasedRuleGroupKind        = schema.GroupKind{Group: Group, Kind: RateBasedRuleKind}.String()
	RateBasedRuleKindAPIVersion   = RateBasedRuleKind + "." + GroupVersion.String()
	RateBasedRuleGroupVersionKind = GroupVersion.WithKind(RateBasedRuleKind)
)

func init() {
	SchemeBuilder.Register(&RateBasedRule{}, &RateBasedRuleList{})
}
