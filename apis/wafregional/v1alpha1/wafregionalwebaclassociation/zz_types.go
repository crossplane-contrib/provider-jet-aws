/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

// +kubebuilder:object:generate=true
// +groupName=wafregional.aws.tf.crossplane.io
// +versionName=v1alpha1

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1alpha1 "github.com/crossplane-contrib/provider-tf-aws/apis/wafregional/v1alpha1"
)

type WafregionalWebAclAssociationObservation struct {
}

type WafregionalWebAclAssociationParameters struct {
	ResourceArn string `json:"resourceArn" tf:"resource_arn"`

	WebAclId string `json:"webAclId" tf:"web_acl_id"`
}

// WafregionalWebAclAssociationSpec defines the desired state of WafregionalWebAclAssociation
type WafregionalWebAclAssociationSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       WafregionalWebAclAssociationParameters `json:"forProvider"`
}

// WafregionalWebAclAssociationStatus defines the observed state of WafregionalWebAclAssociation.
type WafregionalWebAclAssociationStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          WafregionalWebAclAssociationObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// WafregionalWebAclAssociation is the Schema for the WafregionalWebAclAssociations API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type WafregionalWebAclAssociation struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              WafregionalWebAclAssociationSpec   `json:"spec"`
	Status            WafregionalWebAclAssociationStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// WafregionalWebAclAssociationList contains a list of WafregionalWebAclAssociations
type WafregionalWebAclAssociationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []WafregionalWebAclAssociation `json:"items"`
}

// Repository type metadata.
var (
	WafregionalWebAclAssociationKind             = "WafregionalWebAclAssociation"
	WafregionalWebAclAssociationGroupKind        = schema.GroupKind{Group: v1alpha1.Group, Kind: WafregionalWebAclAssociationKind}.String()
	WafregionalWebAclAssociationKindAPIVersion   = WafregionalWebAclAssociationKind + "." + v1alpha1.GroupVersion.String()
	WafregionalWebAclAssociationGroupVersionKind = v1alpha1.GroupVersion.WithKind(WafregionalWebAclAssociationKind)
)

func init() {
	v1alpha1.SchemeBuilder.Register(&WafregionalWebAclAssociation{}, &WafregionalWebAclAssociationList{})
}
