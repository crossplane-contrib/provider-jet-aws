/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

// +kubebuilder:object:generate=true
// +groupName=wafregional.aws.tf.crossplane.io
// +versionName=v1alpha1

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1alpha1 "github.com/crossplane-contrib/provider-tf-aws/apis/wafregional/v1alpha1"
)

type PredicateObservation struct {
}

type PredicateParameters struct {
	DataId string `json:"dataId" tf:"data_id"`

	Negated bool `json:"negated" tf:"negated"`

	Type string `json:"type" tf:"type"`
}

type WafregionalRateBasedRuleObservation struct {
	Arn string `json:"arn" tf:"arn"`
}

type WafregionalRateBasedRuleParameters struct {
	MetricName string `json:"metricName" tf:"metric_name"`

	Name string `json:"name" tf:"name"`

	Predicate []PredicateParameters `json:"predicate,omitempty" tf:"predicate"`

	RateKey string `json:"rateKey" tf:"rate_key"`

	RateLimit int64 `json:"rateLimit" tf:"rate_limit"`

	Tags map[string]string `json:"tags,omitempty" tf:"tags"`

	TagsAll map[string]string `json:"tagsAll,omitempty" tf:"tags_all"`
}

// WafregionalRateBasedRuleSpec defines the desired state of WafregionalRateBasedRule
type WafregionalRateBasedRuleSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       WafregionalRateBasedRuleParameters `json:"forProvider"`
}

// WafregionalRateBasedRuleStatus defines the observed state of WafregionalRateBasedRule.
type WafregionalRateBasedRuleStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          WafregionalRateBasedRuleObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// WafregionalRateBasedRule is the Schema for the WafregionalRateBasedRules API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type WafregionalRateBasedRule struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              WafregionalRateBasedRuleSpec   `json:"spec"`
	Status            WafregionalRateBasedRuleStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// WafregionalRateBasedRuleList contains a list of WafregionalRateBasedRules
type WafregionalRateBasedRuleList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []WafregionalRateBasedRule `json:"items"`
}

// Repository type metadata.
var (
	WafregionalRateBasedRuleKind             = "WafregionalRateBasedRule"
	WafregionalRateBasedRuleGroupKind        = schema.GroupKind{Group: v1alpha1.Group, Kind: WafregionalRateBasedRuleKind}.String()
	WafregionalRateBasedRuleKindAPIVersion   = WafregionalRateBasedRuleKind + "." + v1alpha1.GroupVersion.String()
	WafregionalRateBasedRuleGroupVersionKind = v1alpha1.GroupVersion.WithKind(WafregionalRateBasedRuleKind)
)

func init() {
	v1alpha1.SchemeBuilder.Register(&WafregionalRateBasedRule{}, &WafregionalRateBasedRuleList{})
}
