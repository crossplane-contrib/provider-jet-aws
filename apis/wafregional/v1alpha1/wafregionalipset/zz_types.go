/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

// +kubebuilder:object:generate=true
// +groupName=wafregional.aws.tf.crossplane.io
// +versionName=v1alpha1

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1alpha1 "github.com/crossplane-contrib/provider-tf-aws/apis/wafregional/v1alpha1"
)

type IpSetDescriptorObservation struct {
}

type IpSetDescriptorParameters struct {
	Type string `json:"type" tf:"type"`

	Value string `json:"value" tf:"value"`
}

type WafregionalIpsetObservation struct {
	Arn string `json:"arn" tf:"arn"`
}

type WafregionalIpsetParameters struct {
	IpSetDescriptor []IpSetDescriptorParameters `json:"ipSetDescriptor,omitempty" tf:"ip_set_descriptor"`

	Name string `json:"name" tf:"name"`
}

// WafregionalIpsetSpec defines the desired state of WafregionalIpset
type WafregionalIpsetSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       WafregionalIpsetParameters `json:"forProvider"`
}

// WafregionalIpsetStatus defines the observed state of WafregionalIpset.
type WafregionalIpsetStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          WafregionalIpsetObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// WafregionalIpset is the Schema for the WafregionalIpsets API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type WafregionalIpset struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              WafregionalIpsetSpec   `json:"spec"`
	Status            WafregionalIpsetStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// WafregionalIpsetList contains a list of WafregionalIpsets
type WafregionalIpsetList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []WafregionalIpset `json:"items"`
}

// Repository type metadata.
var (
	WafregionalIpsetKind             = "WafregionalIpset"
	WafregionalIpsetGroupKind        = schema.GroupKind{Group: v1alpha1.Group, Kind: WafregionalIpsetKind}.String()
	WafregionalIpsetKindAPIVersion   = WafregionalIpsetKind + "." + v1alpha1.GroupVersion.String()
	WafregionalIpsetGroupVersionKind = v1alpha1.GroupVersion.WithKind(WafregionalIpsetKind)
)

func init() {
	v1alpha1.SchemeBuilder.Register(&WafregionalIpset{}, &WafregionalIpsetList{})
}
