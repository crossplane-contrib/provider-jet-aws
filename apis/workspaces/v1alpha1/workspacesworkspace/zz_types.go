/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

// +kubebuilder:object:generate=true
// +groupName=workspaces.aws.tf.crossplane.io
// +versionName=v1alpha1

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1alpha1 "github.com/crossplane-contrib/provider-tf-aws/apis/workspaces/v1alpha1"
)

type WorkspacePropertiesObservation struct {
}

type WorkspacePropertiesParameters struct {
	ComputeTypeName *string `json:"computeTypeName,omitempty" tf:"compute_type_name"`

	RootVolumeSizeGib *int64 `json:"rootVolumeSizeGib,omitempty" tf:"root_volume_size_gib"`

	RunningMode *string `json:"runningMode,omitempty" tf:"running_mode"`

	RunningModeAutoStopTimeoutInMinutes *int64 `json:"runningModeAutoStopTimeoutInMinutes,omitempty" tf:"running_mode_auto_stop_timeout_in_minutes"`

	UserVolumeSizeGib *int64 `json:"userVolumeSizeGib,omitempty" tf:"user_volume_size_gib"`
}

type WorkspacesWorkspaceObservation struct {
	ComputerName string `json:"computerName" tf:"computer_name"`

	IpAddress string `json:"ipAddress" tf:"ip_address"`

	State string `json:"state" tf:"state"`
}

type WorkspacesWorkspaceParameters struct {
	BundleId string `json:"bundleId" tf:"bundle_id"`

	DirectoryId string `json:"directoryId" tf:"directory_id"`

	RootVolumeEncryptionEnabled *bool `json:"rootVolumeEncryptionEnabled,omitempty" tf:"root_volume_encryption_enabled"`

	Tags map[string]string `json:"tags,omitempty" tf:"tags"`

	TagsAll map[string]string `json:"tagsAll,omitempty" tf:"tags_all"`

	UserName string `json:"userName" tf:"user_name"`

	UserVolumeEncryptionEnabled *bool `json:"userVolumeEncryptionEnabled,omitempty" tf:"user_volume_encryption_enabled"`

	VolumeEncryptionKey *string `json:"volumeEncryptionKey,omitempty" tf:"volume_encryption_key"`

	WorkspaceProperties []WorkspacePropertiesParameters `json:"workspaceProperties,omitempty" tf:"workspace_properties"`
}

// WorkspacesWorkspaceSpec defines the desired state of WorkspacesWorkspace
type WorkspacesWorkspaceSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       WorkspacesWorkspaceParameters `json:"forProvider"`
}

// WorkspacesWorkspaceStatus defines the observed state of WorkspacesWorkspace.
type WorkspacesWorkspaceStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          WorkspacesWorkspaceObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// WorkspacesWorkspace is the Schema for the WorkspacesWorkspaces API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type WorkspacesWorkspace struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              WorkspacesWorkspaceSpec   `json:"spec"`
	Status            WorkspacesWorkspaceStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// WorkspacesWorkspaceList contains a list of WorkspacesWorkspaces
type WorkspacesWorkspaceList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []WorkspacesWorkspace `json:"items"`
}

// Repository type metadata.
var (
	WorkspacesWorkspaceKind             = "WorkspacesWorkspace"
	WorkspacesWorkspaceGroupKind        = schema.GroupKind{Group: v1alpha1.Group, Kind: WorkspacesWorkspaceKind}.String()
	WorkspacesWorkspaceKindAPIVersion   = WorkspacesWorkspaceKind + "." + v1alpha1.GroupVersion.String()
	WorkspacesWorkspaceGroupVersionKind = v1alpha1.GroupVersion.WithKind(WorkspacesWorkspaceKind)
)

func init() {
	v1alpha1.SchemeBuilder.Register(&WorkspacesWorkspace{}, &WorkspacesWorkspaceList{})
}
