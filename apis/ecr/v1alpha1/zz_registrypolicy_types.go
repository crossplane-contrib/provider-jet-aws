/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type RegistryPolicyObservation struct {
	RegistryID *string `json:"registryId,omitempty" tf:"registry_id,omitempty"`
}

type RegistryPolicyParameters struct {

	// +kubebuilder:validation:Required
	Policy *string `json:"policy" tf:"policy,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +terrajet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`
}

// RegistryPolicySpec defines the desired state of RegistryPolicy
type RegistryPolicySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     RegistryPolicyParameters `json:"forProvider"`
}

// RegistryPolicyStatus defines the observed state of RegistryPolicy.
type RegistryPolicyStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        RegistryPolicyObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// RegistryPolicy is the Schema for the RegistryPolicys API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tfaws}
type RegistryPolicy struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              RegistryPolicySpec   `json:"spec"`
	Status            RegistryPolicyStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// RegistryPolicyList contains a list of RegistryPolicys
type RegistryPolicyList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []RegistryPolicy `json:"items"`
}

// Repository type metadata.
var (
	RegistryPolicyKind             = "RegistryPolicy"
	RegistryPolicyGroupKind        = schema.GroupKind{Group: Group, Kind: RegistryPolicyKind}.String()
	RegistryPolicyKindAPIVersion   = RegistryPolicyKind + "." + GroupVersion.String()
	RegistryPolicyGroupVersionKind = GroupVersion.WithKind(RegistryPolicyKind)
)

func init() {
	SchemeBuilder.Register(&RegistryPolicy{}, &RegistryPolicyList{})
}
