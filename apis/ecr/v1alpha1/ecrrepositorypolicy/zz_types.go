/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

// +kubebuilder:object:generate=true
// +groupName=ecr.aws.tf.crossplane.io
// +versionName=v1alpha1

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1alpha1 "github.com/crossplane-contrib/provider-tf-aws/apis/ecr/v1alpha1"
)

type EcrRepositoryPolicyObservation struct {
	RegistryId string `json:"registryId" tf:"registry_id"`
}

type EcrRepositoryPolicyParameters struct {
	Policy string `json:"policy" tf:"policy"`

	Repository string `json:"repository" tf:"repository"`
}

// EcrRepositoryPolicySpec defines the desired state of EcrRepositoryPolicy
type EcrRepositoryPolicySpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       EcrRepositoryPolicyParameters `json:"forProvider"`
}

// EcrRepositoryPolicyStatus defines the observed state of EcrRepositoryPolicy.
type EcrRepositoryPolicyStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          EcrRepositoryPolicyObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// EcrRepositoryPolicy is the Schema for the EcrRepositoryPolicys API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type EcrRepositoryPolicy struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              EcrRepositoryPolicySpec   `json:"spec"`
	Status            EcrRepositoryPolicyStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// EcrRepositoryPolicyList contains a list of EcrRepositoryPolicys
type EcrRepositoryPolicyList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []EcrRepositoryPolicy `json:"items"`
}

// Repository type metadata.
var (
	EcrRepositoryPolicyKind             = "EcrRepositoryPolicy"
	EcrRepositoryPolicyGroupKind        = schema.GroupKind{Group: v1alpha1.Group, Kind: EcrRepositoryPolicyKind}.String()
	EcrRepositoryPolicyKindAPIVersion   = EcrRepositoryPolicyKind + "." + v1alpha1.GroupVersion.String()
	EcrRepositoryPolicyGroupVersionKind = v1alpha1.GroupVersion.WithKind(EcrRepositoryPolicyKind)
)

func init() {
	v1alpha1.SchemeBuilder.Register(&EcrRepositoryPolicy{}, &EcrRepositoryPolicyList{})
}
