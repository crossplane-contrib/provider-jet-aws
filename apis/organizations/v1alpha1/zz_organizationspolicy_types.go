/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type OrganizationsPolicyObservation struct {
	ARN string `json:"arn" tf:"arn"`
}

type OrganizationsPolicyParameters struct {
	Content string `json:"content" tf:"content"`

	Description *string `json:"description,omitempty" tf:"description"`

	Name string `json:"name" tf:"name"`

	Tags map[string]string `json:"tags,omitempty" tf:"tags"`

	TagsAll map[string]string `json:"tagsAll,omitempty" tf:"tags_all"`

	Type *string `json:"type,omitempty" tf:"type"`
}

// OrganizationsPolicySpec defines the desired state of OrganizationsPolicy
type OrganizationsPolicySpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       OrganizationsPolicyParameters `json:"forProvider"`
}

// OrganizationsPolicyStatus defines the observed state of OrganizationsPolicy.
type OrganizationsPolicyStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          OrganizationsPolicyObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// OrganizationsPolicy is the Schema for the OrganizationsPolicys API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tfaws}
type OrganizationsPolicy struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              OrganizationsPolicySpec   `json:"spec"`
	Status            OrganizationsPolicyStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// OrganizationsPolicyList contains a list of OrganizationsPolicys
type OrganizationsPolicyList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []OrganizationsPolicy `json:"items"`
}

// Repository type metadata.
var (
	OrganizationsPolicyKind             = "OrganizationsPolicy"
	OrganizationsPolicyGroupKind        = schema.GroupKind{Group: Group, Kind: OrganizationsPolicyKind}.String()
	OrganizationsPolicyKindAPIVersion   = OrganizationsPolicyKind + "." + GroupVersion.String()
	OrganizationsPolicyGroupVersionKind = GroupVersion.WithKind(OrganizationsPolicyKind)
)

func init() {
	SchemeBuilder.Register(&OrganizationsPolicy{}, &OrganizationsPolicyList{})
}
