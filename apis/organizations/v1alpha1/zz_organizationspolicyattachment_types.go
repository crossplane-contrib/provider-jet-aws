/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type OrganizationsPolicyAttachmentObservation struct {
}

type OrganizationsPolicyAttachmentParameters struct {
	PolicyID string `json:"policyID" tf:"policy_id"`

	TargetID string `json:"targetID" tf:"target_id"`
}

// OrganizationsPolicyAttachmentSpec defines the desired state of OrganizationsPolicyAttachment
type OrganizationsPolicyAttachmentSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       OrganizationsPolicyAttachmentParameters `json:"forProvider"`
}

// OrganizationsPolicyAttachmentStatus defines the observed state of OrganizationsPolicyAttachment.
type OrganizationsPolicyAttachmentStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          OrganizationsPolicyAttachmentObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// OrganizationsPolicyAttachment is the Schema for the OrganizationsPolicyAttachments API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tfaws}
type OrganizationsPolicyAttachment struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              OrganizationsPolicyAttachmentSpec   `json:"spec"`
	Status            OrganizationsPolicyAttachmentStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// OrganizationsPolicyAttachmentList contains a list of OrganizationsPolicyAttachments
type OrganizationsPolicyAttachmentList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []OrganizationsPolicyAttachment `json:"items"`
}

// Repository type metadata.
var (
	OrganizationsPolicyAttachmentKind             = "OrganizationsPolicyAttachment"
	OrganizationsPolicyAttachmentGroupKind        = schema.GroupKind{Group: Group, Kind: OrganizationsPolicyAttachmentKind}.String()
	OrganizationsPolicyAttachmentKindAPIVersion   = OrganizationsPolicyAttachmentKind + "." + GroupVersion.String()
	OrganizationsPolicyAttachmentGroupVersionKind = GroupVersion.WithKind(OrganizationsPolicyAttachmentKind)
)

func init() {
	SchemeBuilder.Register(&OrganizationsPolicyAttachment{}, &OrganizationsPolicyAttachmentList{})
}
