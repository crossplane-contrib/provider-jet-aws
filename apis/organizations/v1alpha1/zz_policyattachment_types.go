/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type PolicyAttachmentObservation struct {
}

type PolicyAttachmentParameters struct {

	// +kubebuilder:validation:Required
	PolicyID *string `json:"policyId" tf:"policy_id,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +terrajet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`

	// +kubebuilder:validation:Required
	TargetID *string `json:"targetId" tf:"target_id,omitempty"`
}

// PolicyAttachmentSpec defines the desired state of PolicyAttachment
type PolicyAttachmentSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     PolicyAttachmentParameters `json:"forProvider"`
}

// PolicyAttachmentStatus defines the observed state of PolicyAttachment.
type PolicyAttachmentStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        PolicyAttachmentObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// PolicyAttachment is the Schema for the PolicyAttachments API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tfaws}
type PolicyAttachment struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              PolicyAttachmentSpec   `json:"spec"`
	Status            PolicyAttachmentStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// PolicyAttachmentList contains a list of PolicyAttachments
type PolicyAttachmentList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []PolicyAttachment `json:"items"`
}

// Repository type metadata.
var (
	PolicyAttachmentKind             = "PolicyAttachment"
	PolicyAttachmentGroupKind        = schema.GroupKind{Group: Group, Kind: PolicyAttachmentKind}.String()
	PolicyAttachmentKindAPIVersion   = PolicyAttachmentKind + "." + GroupVersion.String()
	PolicyAttachmentGroupVersionKind = GroupVersion.WithKind(PolicyAttachmentKind)
)

func init() {
	SchemeBuilder.Register(&PolicyAttachment{}, &PolicyAttachmentList{})
}
