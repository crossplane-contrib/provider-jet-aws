/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type OnlyInternetGatewayObservation struct {
	TagsAll map[string]*string `json:"tagsAll,omitempty" tf:"tags_all,omitempty"`
}

type OnlyInternetGatewayParameters struct {

	// Region is the region you'd like your resource to be created in.
	// +terrajet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`

	// +kubebuilder:validation:Optional
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// +kubebuilder:validation:Required
	VpcID *string `json:"vpcId" tf:"vpc_id,omitempty"`
}

// OnlyInternetGatewaySpec defines the desired state of OnlyInternetGateway
type OnlyInternetGatewaySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     OnlyInternetGatewayParameters `json:"forProvider"`
}

// OnlyInternetGatewayStatus defines the observed state of OnlyInternetGateway.
type OnlyInternetGatewayStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        OnlyInternetGatewayObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// OnlyInternetGateway is the Schema for the OnlyInternetGateways API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tfaws}
type OnlyInternetGateway struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              OnlyInternetGatewaySpec   `json:"spec"`
	Status            OnlyInternetGatewayStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// OnlyInternetGatewayList contains a list of OnlyInternetGateways
type OnlyInternetGatewayList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []OnlyInternetGateway `json:"items"`
}

// Repository type metadata.
var (
	OnlyInternetGatewayKind             = "OnlyInternetGateway"
	OnlyInternetGatewayGroupKind        = schema.GroupKind{Group: Group, Kind: OnlyInternetGatewayKind}.String()
	OnlyInternetGatewayKindAPIVersion   = OnlyInternetGatewayKind + "." + GroupVersion.String()
	OnlyInternetGatewayGroupVersionKind = GroupVersion.WithKind(OnlyInternetGatewayKind)
)

func init() {
	SchemeBuilder.Register(&OnlyInternetGateway{}, &OnlyInternetGatewayList{})
}
