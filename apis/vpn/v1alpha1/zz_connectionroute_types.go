/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ConnectionRouteObservation struct {
}

type ConnectionRouteParameters struct {

	// +kubebuilder:validation:Required
	DestinationCidrBlock *string `json:"destinationCidrBlock" tf:"destination_cidr_block,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +terrajet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`

	// +kubebuilder:validation:Required
	VpnConnectionID *string `json:"vpnConnectionId" tf:"vpn_connection_id,omitempty"`
}

// ConnectionRouteSpec defines the desired state of ConnectionRoute
type ConnectionRouteSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ConnectionRouteParameters `json:"forProvider"`
}

// ConnectionRouteStatus defines the observed state of ConnectionRoute.
type ConnectionRouteStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ConnectionRouteObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ConnectionRoute is the Schema for the ConnectionRoutes API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tfaws}
type ConnectionRoute struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ConnectionRouteSpec   `json:"spec"`
	Status            ConnectionRouteStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ConnectionRouteList contains a list of ConnectionRoutes
type ConnectionRouteList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ConnectionRoute `json:"items"`
}

// Repository type metadata.
var (
	ConnectionRouteKind             = "ConnectionRoute"
	ConnectionRouteGroupKind        = schema.GroupKind{Group: Group, Kind: ConnectionRouteKind}.String()
	ConnectionRouteKindAPIVersion   = ConnectionRouteKind + "." + GroupVersion.String()
	ConnectionRouteGroupVersionKind = GroupVersion.WithKind(ConnectionRouteKind)
)

func init() {
	SchemeBuilder.Register(&ConnectionRoute{}, &ConnectionRouteList{})
}
