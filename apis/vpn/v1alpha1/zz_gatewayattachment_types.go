/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type GatewayAttachmentObservation struct {
}

type GatewayAttachmentParameters struct {

	// Region is the region you'd like your resource to be created in.
	// +terrajet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`

	// +kubebuilder:validation:Required
	VpcID *string `json:"vpcId" tf:"vpc_id,omitempty"`

	// +kubebuilder:validation:Required
	VpnGatewayID *string `json:"vpnGatewayId" tf:"vpn_gateway_id,omitempty"`
}

// GatewayAttachmentSpec defines the desired state of GatewayAttachment
type GatewayAttachmentSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     GatewayAttachmentParameters `json:"forProvider"`
}

// GatewayAttachmentStatus defines the observed state of GatewayAttachment.
type GatewayAttachmentStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        GatewayAttachmentObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// GatewayAttachment is the Schema for the GatewayAttachments API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tfaws}
type GatewayAttachment struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              GatewayAttachmentSpec   `json:"spec"`
	Status            GatewayAttachmentStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// GatewayAttachmentList contains a list of GatewayAttachments
type GatewayAttachmentList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []GatewayAttachment `json:"items"`
}

// Repository type metadata.
var (
	GatewayAttachmentKind             = "GatewayAttachment"
	GatewayAttachmentGroupKind        = schema.GroupKind{Group: Group, Kind: GatewayAttachmentKind}.String()
	GatewayAttachmentKindAPIVersion   = GatewayAttachmentKind + "." + GroupVersion.String()
	GatewayAttachmentGroupVersionKind = GroupVersion.WithKind(GatewayAttachmentKind)
)

func init() {
	SchemeBuilder.Register(&GatewayAttachment{}, &GatewayAttachmentList{})
}
