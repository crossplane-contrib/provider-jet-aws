/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

// +kubebuilder:object:generate=true
// +groupName=vpn.aws.tf.crossplane.io
// +versionName=v1alpha1

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1alpha1 "github.com/crossplane-contrib/provider-tf-aws/apis/vpn/v1alpha1"
)

type VpnConnectionRouteObservation struct {
}

type VpnConnectionRouteParameters struct {
	DestinationCidrBlock string `json:"destinationCidrBlock" tf:"destination_cidr_block"`

	VpnConnectionId string `json:"vpnConnectionId" tf:"vpn_connection_id"`
}

// VpnConnectionRouteSpec defines the desired state of VpnConnectionRoute
type VpnConnectionRouteSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       VpnConnectionRouteParameters `json:"forProvider"`
}

// VpnConnectionRouteStatus defines the observed state of VpnConnectionRoute.
type VpnConnectionRouteStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          VpnConnectionRouteObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// VpnConnectionRoute is the Schema for the VpnConnectionRoutes API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type VpnConnectionRoute struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              VpnConnectionRouteSpec   `json:"spec"`
	Status            VpnConnectionRouteStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// VpnConnectionRouteList contains a list of VpnConnectionRoutes
type VpnConnectionRouteList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []VpnConnectionRoute `json:"items"`
}

// Repository type metadata.
var (
	VpnConnectionRouteKind             = "VpnConnectionRoute"
	VpnConnectionRouteGroupKind        = schema.GroupKind{Group: v1alpha1.Group, Kind: VpnConnectionRouteKind}.String()
	VpnConnectionRouteKindAPIVersion   = VpnConnectionRouteKind + "." + v1alpha1.GroupVersion.String()
	VpnConnectionRouteGroupVersionKind = v1alpha1.GroupVersion.WithKind(VpnConnectionRouteKind)
)

func init() {
	v1alpha1.SchemeBuilder.Register(&VpnConnectionRoute{}, &VpnConnectionRouteList{})
}
