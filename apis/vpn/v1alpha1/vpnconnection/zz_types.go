/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

// +kubebuilder:object:generate=true
// +groupName=vpn.aws.tf.crossplane.io
// +versionName=v1alpha1

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1alpha1 "github.com/crossplane-contrib/provider-tf-aws/apis/vpn/v1alpha1"
)

type RoutesObservation struct {
	DestinationCidrBlock string `json:"destinationCidrBlock" tf:"destination_cidr_block"`

	Source string `json:"source" tf:"source"`

	State string `json:"state" tf:"state"`
}

type RoutesParameters struct {
}

type VgwTelemetryObservation struct {
	AcceptedRouteCount int64 `json:"acceptedRouteCount" tf:"accepted_route_count"`

	LastStatusChange string `json:"lastStatusChange" tf:"last_status_change"`

	OutsideIpAddress string `json:"outsideIpAddress" tf:"outside_ip_address"`

	Status string `json:"status" tf:"status"`

	StatusMessage string `json:"statusMessage" tf:"status_message"`
}

type VgwTelemetryParameters struct {
}

type VpnConnectionObservation struct {
	Arn string `json:"arn" tf:"arn"`

	CustomerGatewayConfiguration string `json:"customerGatewayConfiguration" tf:"customer_gateway_configuration"`

	Routes []RoutesObservation `json:"routes" tf:"routes"`

	TransitGatewayAttachmentId string `json:"transitGatewayAttachmentId" tf:"transit_gateway_attachment_id"`

	Tunnel1Address string `json:"tunnel1Address" tf:"tunnel1_address"`

	Tunnel1BgpAsn string `json:"tunnel1BgpAsn" tf:"tunnel1_bgp_asn"`

	Tunnel1BgpHoldtime int64 `json:"tunnel1BgpHoldtime" tf:"tunnel1_bgp_holdtime"`

	Tunnel1CgwInsideAddress string `json:"tunnel1CgwInsideAddress" tf:"tunnel1_cgw_inside_address"`

	Tunnel1VgwInsideAddress string `json:"tunnel1VgwInsideAddress" tf:"tunnel1_vgw_inside_address"`

	Tunnel2Address string `json:"tunnel2Address" tf:"tunnel2_address"`

	Tunnel2BgpAsn string `json:"tunnel2BgpAsn" tf:"tunnel2_bgp_asn"`

	Tunnel2BgpHoldtime int64 `json:"tunnel2BgpHoldtime" tf:"tunnel2_bgp_holdtime"`

	Tunnel2CgwInsideAddress string `json:"tunnel2CgwInsideAddress" tf:"tunnel2_cgw_inside_address"`

	Tunnel2VgwInsideAddress string `json:"tunnel2VgwInsideAddress" tf:"tunnel2_vgw_inside_address"`

	VgwTelemetry []VgwTelemetryObservation `json:"vgwTelemetry" tf:"vgw_telemetry"`
}

type VpnConnectionParameters struct {
	CustomerGatewayId string `json:"customerGatewayId" tf:"customer_gateway_id"`

	EnableAcceleration *bool `json:"enableAcceleration,omitempty" tf:"enable_acceleration"`

	LocalIpv4NetworkCidr *string `json:"localIpv4NetworkCidr,omitempty" tf:"local_ipv4_network_cidr"`

	LocalIpv6NetworkCidr *string `json:"localIpv6NetworkCidr,omitempty" tf:"local_ipv6_network_cidr"`

	RemoteIpv4NetworkCidr *string `json:"remoteIpv4NetworkCidr,omitempty" tf:"remote_ipv4_network_cidr"`

	RemoteIpv6NetworkCidr *string `json:"remoteIpv6NetworkCidr,omitempty" tf:"remote_ipv6_network_cidr"`

	StaticRoutesOnly *bool `json:"staticRoutesOnly,omitempty" tf:"static_routes_only"`

	Tags map[string]string `json:"tags,omitempty" tf:"tags"`

	TagsAll map[string]string `json:"tagsAll,omitempty" tf:"tags_all"`

	TransitGatewayId *string `json:"transitGatewayId,omitempty" tf:"transit_gateway_id"`

	Tunnel1DpdTimeoutAction *string `json:"tunnel1DpdTimeoutAction,omitempty" tf:"tunnel1_dpd_timeout_action"`

	Tunnel1DpdTimeoutSeconds *int64 `json:"tunnel1DpdTimeoutSeconds,omitempty" tf:"tunnel1_dpd_timeout_seconds"`

	Tunnel1IkeVersions []string `json:"tunnel1IkeVersions,omitempty" tf:"tunnel1_ike_versions"`

	Tunnel1InsideCidr *string `json:"tunnel1InsideCidr,omitempty" tf:"tunnel1_inside_cidr"`

	Tunnel1InsideIpv6Cidr *string `json:"tunnel1InsideIpv6Cidr,omitempty" tf:"tunnel1_inside_ipv6_cidr"`

	Tunnel1Phase1DhGroupNumbers []int64 `json:"tunnel1Phase1DhGroupNumbers,omitempty" tf:"tunnel1_phase1_dh_group_numbers"`

	Tunnel1Phase1EncryptionAlgorithms []string `json:"tunnel1Phase1EncryptionAlgorithms,omitempty" tf:"tunnel1_phase1_encryption_algorithms"`

	Tunnel1Phase1IntegrityAlgorithms []string `json:"tunnel1Phase1IntegrityAlgorithms,omitempty" tf:"tunnel1_phase1_integrity_algorithms"`

	Tunnel1Phase1LifetimeSeconds *int64 `json:"tunnel1Phase1LifetimeSeconds,omitempty" tf:"tunnel1_phase1_lifetime_seconds"`

	Tunnel1Phase2DhGroupNumbers []int64 `json:"tunnel1Phase2DhGroupNumbers,omitempty" tf:"tunnel1_phase2_dh_group_numbers"`

	Tunnel1Phase2EncryptionAlgorithms []string `json:"tunnel1Phase2EncryptionAlgorithms,omitempty" tf:"tunnel1_phase2_encryption_algorithms"`

	Tunnel1Phase2IntegrityAlgorithms []string `json:"tunnel1Phase2IntegrityAlgorithms,omitempty" tf:"tunnel1_phase2_integrity_algorithms"`

	Tunnel1Phase2LifetimeSeconds *int64 `json:"tunnel1Phase2LifetimeSeconds,omitempty" tf:"tunnel1_phase2_lifetime_seconds"`

	Tunnel1PresharedKey *string `json:"tunnel1PresharedKey,omitempty" tf:"tunnel1_preshared_key"`

	Tunnel1RekeyFuzzPercentage *int64 `json:"tunnel1RekeyFuzzPercentage,omitempty" tf:"tunnel1_rekey_fuzz_percentage"`

	Tunnel1RekeyMarginTimeSeconds *int64 `json:"tunnel1RekeyMarginTimeSeconds,omitempty" tf:"tunnel1_rekey_margin_time_seconds"`

	Tunnel1ReplayWindowSize *int64 `json:"tunnel1ReplayWindowSize,omitempty" tf:"tunnel1_replay_window_size"`

	Tunnel1StartupAction *string `json:"tunnel1StartupAction,omitempty" tf:"tunnel1_startup_action"`

	Tunnel2DpdTimeoutAction *string `json:"tunnel2DpdTimeoutAction,omitempty" tf:"tunnel2_dpd_timeout_action"`

	Tunnel2DpdTimeoutSeconds *int64 `json:"tunnel2DpdTimeoutSeconds,omitempty" tf:"tunnel2_dpd_timeout_seconds"`

	Tunnel2IkeVersions []string `json:"tunnel2IkeVersions,omitempty" tf:"tunnel2_ike_versions"`

	Tunnel2InsideCidr *string `json:"tunnel2InsideCidr,omitempty" tf:"tunnel2_inside_cidr"`

	Tunnel2InsideIpv6Cidr *string `json:"tunnel2InsideIpv6Cidr,omitempty" tf:"tunnel2_inside_ipv6_cidr"`

	Tunnel2Phase1DhGroupNumbers []int64 `json:"tunnel2Phase1DhGroupNumbers,omitempty" tf:"tunnel2_phase1_dh_group_numbers"`

	Tunnel2Phase1EncryptionAlgorithms []string `json:"tunnel2Phase1EncryptionAlgorithms,omitempty" tf:"tunnel2_phase1_encryption_algorithms"`

	Tunnel2Phase1IntegrityAlgorithms []string `json:"tunnel2Phase1IntegrityAlgorithms,omitempty" tf:"tunnel2_phase1_integrity_algorithms"`

	Tunnel2Phase1LifetimeSeconds *int64 `json:"tunnel2Phase1LifetimeSeconds,omitempty" tf:"tunnel2_phase1_lifetime_seconds"`

	Tunnel2Phase2DhGroupNumbers []int64 `json:"tunnel2Phase2DhGroupNumbers,omitempty" tf:"tunnel2_phase2_dh_group_numbers"`

	Tunnel2Phase2EncryptionAlgorithms []string `json:"tunnel2Phase2EncryptionAlgorithms,omitempty" tf:"tunnel2_phase2_encryption_algorithms"`

	Tunnel2Phase2IntegrityAlgorithms []string `json:"tunnel2Phase2IntegrityAlgorithms,omitempty" tf:"tunnel2_phase2_integrity_algorithms"`

	Tunnel2Phase2LifetimeSeconds *int64 `json:"tunnel2Phase2LifetimeSeconds,omitempty" tf:"tunnel2_phase2_lifetime_seconds"`

	Tunnel2PresharedKey *string `json:"tunnel2PresharedKey,omitempty" tf:"tunnel2_preshared_key"`

	Tunnel2RekeyFuzzPercentage *int64 `json:"tunnel2RekeyFuzzPercentage,omitempty" tf:"tunnel2_rekey_fuzz_percentage"`

	Tunnel2RekeyMarginTimeSeconds *int64 `json:"tunnel2RekeyMarginTimeSeconds,omitempty" tf:"tunnel2_rekey_margin_time_seconds"`

	Tunnel2ReplayWindowSize *int64 `json:"tunnel2ReplayWindowSize,omitempty" tf:"tunnel2_replay_window_size"`

	Tunnel2StartupAction *string `json:"tunnel2StartupAction,omitempty" tf:"tunnel2_startup_action"`

	TunnelInsideIpVersion *string `json:"tunnelInsideIpVersion,omitempty" tf:"tunnel_inside_ip_version"`

	Type string `json:"type" tf:"type"`

	VpnGatewayId *string `json:"vpnGatewayId,omitempty" tf:"vpn_gateway_id"`
}

// VpnConnectionSpec defines the desired state of VpnConnection
type VpnConnectionSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       VpnConnectionParameters `json:"forProvider"`
}

// VpnConnectionStatus defines the observed state of VpnConnection.
type VpnConnectionStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          VpnConnectionObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// VpnConnection is the Schema for the VpnConnections API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type VpnConnection struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              VpnConnectionSpec   `json:"spec"`
	Status            VpnConnectionStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// VpnConnectionList contains a list of VpnConnections
type VpnConnectionList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []VpnConnection `json:"items"`
}

// Repository type metadata.
var (
	VpnConnectionKind             = "VpnConnection"
	VpnConnectionGroupKind        = schema.GroupKind{Group: v1alpha1.Group, Kind: VpnConnectionKind}.String()
	VpnConnectionKindAPIVersion   = VpnConnectionKind + "." + v1alpha1.GroupVersion.String()
	VpnConnectionGroupVersionKind = v1alpha1.GroupVersion.WithKind(VpnConnectionKind)
)

func init() {
	v1alpha1.SchemeBuilder.Register(&VpnConnection{}, &VpnConnectionList{})
}
