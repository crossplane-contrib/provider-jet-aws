/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

// +kubebuilder:object:generate=true
// +groupName=networkfirewall.aws.tf.crossplane.io
// +versionName=v1alpha1

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1alpha1 "github.com/crossplane-contrib/provider-tf-aws/apis/networkfirewall/v1alpha1"
)

type ActionDefinitionObservation struct {
}

type ActionDefinitionParameters struct {
	PublishMetricAction []PublishMetricActionParameters `json:"publishMetricAction" tf:"publish_metric_action"`
}

type CustomActionObservation struct {
}

type CustomActionParameters struct {
	ActionDefinition []ActionDefinitionParameters `json:"actionDefinition" tf:"action_definition"`

	ActionName string `json:"actionName" tf:"action_name"`
}

type DestinationObservation struct {
}

type DestinationParameters struct {
	AddressDefinition string `json:"addressDefinition" tf:"address_definition"`
}

type DestinationPortObservation struct {
}

type DestinationPortParameters struct {
	FromPort int64 `json:"fromPort" tf:"from_port"`

	ToPort *int64 `json:"toPort,omitempty" tf:"to_port"`
}

type DimensionObservation struct {
}

type DimensionParameters struct {
	Value string `json:"value" tf:"value"`
}

type HeaderObservation struct {
}

type HeaderParameters struct {
	Destination string `json:"destination" tf:"destination"`

	DestinationPort string `json:"destinationPort" tf:"destination_port"`

	Direction string `json:"direction" tf:"direction"`

	Protocol string `json:"protocol" tf:"protocol"`

	Source string `json:"source" tf:"source"`

	SourcePort string `json:"sourcePort" tf:"source_port"`
}

type IpSetObservation struct {
}

type IpSetParameters struct {
	Definition []string `json:"definition" tf:"definition"`
}

type IpSetsObservation struct {
}

type IpSetsParameters struct {
	IpSet []IpSetParameters `json:"ipSet" tf:"ip_set"`

	Key string `json:"key" tf:"key"`
}

type MatchAttributesObservation struct {
}

type MatchAttributesParameters struct {
	Destination []DestinationParameters `json:"destination,omitempty" tf:"destination"`

	DestinationPort []DestinationPortParameters `json:"destinationPort,omitempty" tf:"destination_port"`

	Protocols []int64 `json:"protocols,omitempty" tf:"protocols"`

	Source []SourceParameters `json:"source,omitempty" tf:"source"`

	SourcePort []SourcePortParameters `json:"sourcePort,omitempty" tf:"source_port"`

	TcpFlag []TcpFlagParameters `json:"tcpFlag,omitempty" tf:"tcp_flag"`
}

type NetworkfirewallRuleGroupObservation struct {
	Arn string `json:"arn" tf:"arn"`

	UpdateToken string `json:"updateToken" tf:"update_token"`
}

type NetworkfirewallRuleGroupParameters struct {
	Capacity int64 `json:"capacity" tf:"capacity"`

	Description *string `json:"description,omitempty" tf:"description"`

	Name string `json:"name" tf:"name"`

	RuleGroup []RuleGroupParameters `json:"ruleGroup,omitempty" tf:"rule_group"`

	Rules *string `json:"rules,omitempty" tf:"rules"`

	Tags map[string]string `json:"tags,omitempty" tf:"tags"`

	TagsAll map[string]string `json:"tagsAll,omitempty" tf:"tags_all"`

	Type string `json:"type" tf:"type"`
}

type PortSetObservation struct {
}

type PortSetParameters struct {
	Definition []string `json:"definition" tf:"definition"`
}

type PortSetsObservation struct {
}

type PortSetsParameters struct {
	Key string `json:"key" tf:"key"`

	PortSet []PortSetParameters `json:"portSet" tf:"port_set"`
}

type PublishMetricActionObservation struct {
}

type PublishMetricActionParameters struct {
	Dimension []DimensionParameters `json:"dimension" tf:"dimension"`
}

type RuleDefinitionObservation struct {
}

type RuleDefinitionParameters struct {
	Actions []string `json:"actions" tf:"actions"`

	MatchAttributes []MatchAttributesParameters `json:"matchAttributes" tf:"match_attributes"`
}

type RuleGroupObservation struct {
}

type RuleGroupParameters struct {
	RuleVariables []RuleVariablesParameters `json:"ruleVariables,omitempty" tf:"rule_variables"`

	RulesSource []RulesSourceParameters `json:"rulesSource" tf:"rules_source"`
}

type RuleOptionObservation struct {
}

type RuleOptionParameters struct {
	Keyword string `json:"keyword" tf:"keyword"`

	Settings []string `json:"settings,omitempty" tf:"settings"`
}

type RuleVariablesObservation struct {
}

type RuleVariablesParameters struct {
	IpSets []IpSetsParameters `json:"ipSets,omitempty" tf:"ip_sets"`

	PortSets []PortSetsParameters `json:"portSets,omitempty" tf:"port_sets"`
}

type RulesSourceListObservation struct {
}

type RulesSourceListParameters struct {
	GeneratedRulesType string `json:"generatedRulesType" tf:"generated_rules_type"`

	TargetTypes []string `json:"targetTypes" tf:"target_types"`

	Targets []string `json:"targets" tf:"targets"`
}

type RulesSourceObservation struct {
}

type RulesSourceParameters struct {
	RulesSourceList []RulesSourceListParameters `json:"rulesSourceList,omitempty" tf:"rules_source_list"`

	RulesString *string `json:"rulesString,omitempty" tf:"rules_string"`

	StatefulRule []StatefulRuleParameters `json:"statefulRule,omitempty" tf:"stateful_rule"`

	StatelessRulesAndCustomActions []StatelessRulesAndCustomActionsParameters `json:"statelessRulesAndCustomActions,omitempty" tf:"stateless_rules_and_custom_actions"`
}

type SourceObservation struct {
}

type SourceParameters struct {
	AddressDefinition string `json:"addressDefinition" tf:"address_definition"`
}

type SourcePortObservation struct {
}

type SourcePortParameters struct {
	FromPort int64 `json:"fromPort" tf:"from_port"`

	ToPort *int64 `json:"toPort,omitempty" tf:"to_port"`
}

type StatefulRuleObservation struct {
}

type StatefulRuleParameters struct {
	Action string `json:"action" tf:"action"`

	Header []HeaderParameters `json:"header" tf:"header"`

	RuleOption []RuleOptionParameters `json:"ruleOption" tf:"rule_option"`
}

type StatelessRuleObservation struct {
}

type StatelessRuleParameters struct {
	Priority int64 `json:"priority" tf:"priority"`

	RuleDefinition []RuleDefinitionParameters `json:"ruleDefinition" tf:"rule_definition"`
}

type StatelessRulesAndCustomActionsObservation struct {
}

type StatelessRulesAndCustomActionsParameters struct {
	CustomAction []CustomActionParameters `json:"customAction,omitempty" tf:"custom_action"`

	StatelessRule []StatelessRuleParameters `json:"statelessRule" tf:"stateless_rule"`
}

type TcpFlagObservation struct {
}

type TcpFlagParameters struct {
	Flags []string `json:"flags" tf:"flags"`

	Masks []string `json:"masks,omitempty" tf:"masks"`
}

// NetworkfirewallRuleGroupSpec defines the desired state of NetworkfirewallRuleGroup
type NetworkfirewallRuleGroupSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       NetworkfirewallRuleGroupParameters `json:"forProvider"`
}

// NetworkfirewallRuleGroupStatus defines the observed state of NetworkfirewallRuleGroup.
type NetworkfirewallRuleGroupStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          NetworkfirewallRuleGroupObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// NetworkfirewallRuleGroup is the Schema for the NetworkfirewallRuleGroups API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type NetworkfirewallRuleGroup struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              NetworkfirewallRuleGroupSpec   `json:"spec"`
	Status            NetworkfirewallRuleGroupStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// NetworkfirewallRuleGroupList contains a list of NetworkfirewallRuleGroups
type NetworkfirewallRuleGroupList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []NetworkfirewallRuleGroup `json:"items"`
}

// Repository type metadata.
var (
	NetworkfirewallRuleGroupKind             = "NetworkfirewallRuleGroup"
	NetworkfirewallRuleGroupGroupKind        = schema.GroupKind{Group: v1alpha1.Group, Kind: NetworkfirewallRuleGroupKind}.String()
	NetworkfirewallRuleGroupKindAPIVersion   = NetworkfirewallRuleGroupKind + "." + v1alpha1.GroupVersion.String()
	NetworkfirewallRuleGroupGroupVersionKind = v1alpha1.GroupVersion.WithKind(NetworkfirewallRuleGroupKind)
)

func init() {
	v1alpha1.SchemeBuilder.Register(&NetworkfirewallRuleGroup{}, &NetworkfirewallRuleGroupList{})
}
