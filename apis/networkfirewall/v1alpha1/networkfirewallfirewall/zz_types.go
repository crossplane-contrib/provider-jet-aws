/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

// +kubebuilder:object:generate=true
// +groupName=networkfirewall.aws.tf.crossplane.io
// +versionName=v1alpha1

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1alpha1 "github.com/crossplane-contrib/provider-tf-aws/apis/networkfirewall/v1alpha1"
)

type AttachmentObservation struct {
	EndpointId string `json:"endpointId" tf:"endpoint_id"`

	SubnetId string `json:"subnetId" tf:"subnet_id"`
}

type AttachmentParameters struct {
}

type FirewallStatusObservation struct {
	SyncStates []SyncStatesObservation `json:"syncStates" tf:"sync_states"`
}

type FirewallStatusParameters struct {
}

type NetworkfirewallFirewallObservation struct {
	Arn string `json:"arn" tf:"arn"`

	FirewallStatus []FirewallStatusObservation `json:"firewallStatus" tf:"firewall_status"`

	UpdateToken string `json:"updateToken" tf:"update_token"`
}

type NetworkfirewallFirewallParameters struct {
	DeleteProtection *bool `json:"deleteProtection,omitempty" tf:"delete_protection"`

	Description *string `json:"description,omitempty" tf:"description"`

	FirewallPolicyArn string `json:"firewallPolicyArn" tf:"firewall_policy_arn"`

	FirewallPolicyChangeProtection *bool `json:"firewallPolicyChangeProtection,omitempty" tf:"firewall_policy_change_protection"`

	Name string `json:"name" tf:"name"`

	SubnetChangeProtection *bool `json:"subnetChangeProtection,omitempty" tf:"subnet_change_protection"`

	SubnetMapping []SubnetMappingParameters `json:"subnetMapping" tf:"subnet_mapping"`

	Tags map[string]string `json:"tags,omitempty" tf:"tags"`

	TagsAll map[string]string `json:"tagsAll,omitempty" tf:"tags_all"`

	VpcId string `json:"vpcId" tf:"vpc_id"`
}

type SubnetMappingObservation struct {
}

type SubnetMappingParameters struct {
	SubnetId string `json:"subnetId" tf:"subnet_id"`
}

type SyncStatesObservation struct {
	Attachment []AttachmentObservation `json:"attachment" tf:"attachment"`

	AvailabilityZone string `json:"availabilityZone" tf:"availability_zone"`
}

type SyncStatesParameters struct {
}

// NetworkfirewallFirewallSpec defines the desired state of NetworkfirewallFirewall
type NetworkfirewallFirewallSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       NetworkfirewallFirewallParameters `json:"forProvider"`
}

// NetworkfirewallFirewallStatus defines the observed state of NetworkfirewallFirewall.
type NetworkfirewallFirewallStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          NetworkfirewallFirewallObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// NetworkfirewallFirewall is the Schema for the NetworkfirewallFirewalls API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type NetworkfirewallFirewall struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              NetworkfirewallFirewallSpec   `json:"spec"`
	Status            NetworkfirewallFirewallStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// NetworkfirewallFirewallList contains a list of NetworkfirewallFirewalls
type NetworkfirewallFirewallList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []NetworkfirewallFirewall `json:"items"`
}

// Repository type metadata.
var (
	NetworkfirewallFirewallKind             = "NetworkfirewallFirewall"
	NetworkfirewallFirewallGroupKind        = schema.GroupKind{Group: v1alpha1.Group, Kind: NetworkfirewallFirewallKind}.String()
	NetworkfirewallFirewallKindAPIVersion   = NetworkfirewallFirewallKind + "." + v1alpha1.GroupVersion.String()
	NetworkfirewallFirewallGroupVersionKind = v1alpha1.GroupVersion.WithKind(NetworkfirewallFirewallKind)
)

func init() {
	v1alpha1.SchemeBuilder.Register(&NetworkfirewallFirewall{}, &NetworkfirewallFirewallList{})
}
