/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type CognitoIdentityProvidersObservation struct {
}

type CognitoIdentityProvidersParameters struct {

	// +kubebuilder:validation:Optional
	ClientID *string `json:"clientId,omitempty" tf:"client_id,omitempty"`

	// +kubebuilder:validation:Optional
	ProviderName *string `json:"providerName,omitempty" tf:"provider_name,omitempty"`

	// +kubebuilder:validation:Optional
	ServerSideTokenCheck *bool `json:"serverSideTokenCheck,omitempty" tf:"server_side_token_check,omitempty"`
}

type IdentityPoolObservation struct {
	Arn *string `json:"arn,omitempty" tf:"arn,omitempty"`

	TagsAll map[string]*string `json:"tagsAll,omitempty" tf:"tags_all,omitempty"`
}

type IdentityPoolParameters struct {

	// +kubebuilder:validation:Optional
	AllowClassicFlow *bool `json:"allowClassicFlow,omitempty" tf:"allow_classic_flow,omitempty"`

	// +kubebuilder:validation:Optional
	AllowUnauthenticatedIdentities *bool `json:"allowUnauthenticatedIdentities,omitempty" tf:"allow_unauthenticated_identities,omitempty"`

	// +kubebuilder:validation:Optional
	CognitoIdentityProviders []CognitoIdentityProvidersParameters `json:"cognitoIdentityProviders,omitempty" tf:"cognito_identity_providers,omitempty"`

	// +kubebuilder:validation:Optional
	DeveloperProviderName *string `json:"developerProviderName,omitempty" tf:"developer_provider_name,omitempty"`

	// +kubebuilder:validation:Required
	IdentityPoolName *string `json:"identityPoolName" tf:"identity_pool_name,omitempty"`

	// +kubebuilder:validation:Optional
	OpenidConnectProviderArns []*string `json:"openidConnectProviderArns,omitempty" tf:"openid_connect_provider_arns,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +terrajet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`

	// +kubebuilder:validation:Optional
	SamlProviderArns []*string `json:"samlProviderArns,omitempty" tf:"saml_provider_arns,omitempty"`

	// +kubebuilder:validation:Optional
	SupportedLoginProviders map[string]*string `json:"supportedLoginProviders,omitempty" tf:"supported_login_providers,omitempty"`

	// +kubebuilder:validation:Optional
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

// IdentityPoolSpec defines the desired state of IdentityPool
type IdentityPoolSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     IdentityPoolParameters `json:"forProvider"`
}

// IdentityPoolStatus defines the observed state of IdentityPool.
type IdentityPoolStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        IdentityPoolObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// IdentityPool is the Schema for the IdentityPools API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tfaws}
type IdentityPool struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              IdentityPoolSpec   `json:"spec"`
	Status            IdentityPoolStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// IdentityPoolList contains a list of IdentityPools
type IdentityPoolList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []IdentityPool `json:"items"`
}

// Repository type metadata.
var (
	IdentityPoolKind             = "IdentityPool"
	IdentityPoolGroupKind        = schema.GroupKind{Group: Group, Kind: IdentityPoolKind}.String()
	IdentityPoolKindAPIVersion   = IdentityPoolKind + "." + GroupVersion.String()
	IdentityPoolGroupVersionKind = GroupVersion.WithKind(IdentityPoolKind)
)

func init() {
	SchemeBuilder.Register(&IdentityPool{}, &IdentityPoolList{})
}
