/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type IdentityPoolRolesAttachmentObservation struct {
}

type IdentityPoolRolesAttachmentParameters struct {

	// +kubebuilder:validation:Required
	IdentityPoolID *string `json:"identityPoolId" tf:"identity_pool_id,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +terrajet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`

	// +kubebuilder:validation:Optional
	RoleMapping []RoleMappingParameters `json:"roleMapping,omitempty" tf:"role_mapping,omitempty"`

	// +kubebuilder:validation:Required
	Roles map[string]*string `json:"roles" tf:"roles,omitempty"`
}

type MappingRuleObservation struct {
}

type MappingRuleParameters struct {

	// +kubebuilder:validation:Required
	Claim *string `json:"claim" tf:"claim,omitempty"`

	// +kubebuilder:validation:Required
	MatchType *string `json:"matchType" tf:"match_type,omitempty"`

	// +kubebuilder:validation:Required
	RoleArn *string `json:"roleArn" tf:"role_arn,omitempty"`

	// +kubebuilder:validation:Required
	Value *string `json:"value" tf:"value,omitempty"`
}

type RoleMappingObservation struct {
}

type RoleMappingParameters struct {

	// +kubebuilder:validation:Optional
	AmbiguousRoleResolution *string `json:"ambiguousRoleResolution,omitempty" tf:"ambiguous_role_resolution,omitempty"`

	// +kubebuilder:validation:Required
	IdentityProvider *string `json:"identityProvider" tf:"identity_provider,omitempty"`

	// +kubebuilder:validation:Optional
	MappingRule []MappingRuleParameters `json:"mappingRule,omitempty" tf:"mapping_rule,omitempty"`

	// +kubebuilder:validation:Required
	Type *string `json:"type" tf:"type,omitempty"`
}

// IdentityPoolRolesAttachmentSpec defines the desired state of IdentityPoolRolesAttachment
type IdentityPoolRolesAttachmentSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     IdentityPoolRolesAttachmentParameters `json:"forProvider"`
}

// IdentityPoolRolesAttachmentStatus defines the observed state of IdentityPoolRolesAttachment.
type IdentityPoolRolesAttachmentStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        IdentityPoolRolesAttachmentObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// IdentityPoolRolesAttachment is the Schema for the IdentityPoolRolesAttachments API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tfaws}
type IdentityPoolRolesAttachment struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              IdentityPoolRolesAttachmentSpec   `json:"spec"`
	Status            IdentityPoolRolesAttachmentStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// IdentityPoolRolesAttachmentList contains a list of IdentityPoolRolesAttachments
type IdentityPoolRolesAttachmentList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []IdentityPoolRolesAttachment `json:"items"`
}

// Repository type metadata.
var (
	IdentityPoolRolesAttachmentKind             = "IdentityPoolRolesAttachment"
	IdentityPoolRolesAttachmentGroupKind        = schema.GroupKind{Group: Group, Kind: IdentityPoolRolesAttachmentKind}.String()
	IdentityPoolRolesAttachmentKindAPIVersion   = IdentityPoolRolesAttachmentKind + "." + GroupVersion.String()
	IdentityPoolRolesAttachmentGroupVersionKind = GroupVersion.WithKind(IdentityPoolRolesAttachmentKind)
)

func init() {
	SchemeBuilder.Register(&IdentityPoolRolesAttachment{}, &IdentityPoolRolesAttachmentList{})
}
