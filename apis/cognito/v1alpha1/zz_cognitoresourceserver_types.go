/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type CognitoResourceServerObservation struct {
	ScopeIdentifiers []string `json:"scopeIdentifiers" tf:"scope_identifiers"`
}

type CognitoResourceServerParameters struct {
	Identifier string `json:"identifier" tf:"identifier"`

	Name string `json:"name" tf:"name"`

	Scope []ScopeParameters `json:"scope,omitempty" tf:"scope"`

	UserPoolID string `json:"userPoolID" tf:"user_pool_id"`
}

type ScopeObservation struct {
}

type ScopeParameters struct {
	ScopeDescription string `json:"scopeDescription" tf:"scope_description"`

	ScopeName string `json:"scopeName" tf:"scope_name"`
}

// CognitoResourceServerSpec defines the desired state of CognitoResourceServer
type CognitoResourceServerSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       CognitoResourceServerParameters `json:"forProvider"`
}

// CognitoResourceServerStatus defines the observed state of CognitoResourceServer.
type CognitoResourceServerStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          CognitoResourceServerObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// CognitoResourceServer is the Schema for the CognitoResourceServers API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tfaws}
type CognitoResourceServer struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              CognitoResourceServerSpec   `json:"spec"`
	Status            CognitoResourceServerStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// CognitoResourceServerList contains a list of CognitoResourceServers
type CognitoResourceServerList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []CognitoResourceServer `json:"items"`
}

// Repository type metadata.
var (
	CognitoResourceServerKind             = "CognitoResourceServer"
	CognitoResourceServerGroupKind        = schema.GroupKind{Group: Group, Kind: CognitoResourceServerKind}.String()
	CognitoResourceServerKindAPIVersion   = CognitoResourceServerKind + "." + GroupVersion.String()
	CognitoResourceServerGroupVersionKind = GroupVersion.WithKind(CognitoResourceServerKind)
)

func init() {
	SchemeBuilder.Register(&CognitoResourceServer{}, &CognitoResourceServerList{})
}
