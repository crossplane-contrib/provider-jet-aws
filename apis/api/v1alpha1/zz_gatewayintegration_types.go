/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type GatewayIntegrationObservation struct {
}

type GatewayIntegrationParameters struct {

	// +kubebuilder:validation:Optional
	CacheKeyParameters []*string `json:"cacheKeyParameters,omitempty" tf:"cache_key_parameters,omitempty"`

	// +kubebuilder:validation:Optional
	CacheNamespace *string `json:"cacheNamespace,omitempty" tf:"cache_namespace,omitempty"`

	// +kubebuilder:validation:Optional
	ConnectionID *string `json:"connectionId,omitempty" tf:"connection_id,omitempty"`

	// +kubebuilder:validation:Optional
	ConnectionType *string `json:"connectionType,omitempty" tf:"connection_type,omitempty"`

	// +kubebuilder:validation:Optional
	ContentHandling *string `json:"contentHandling,omitempty" tf:"content_handling,omitempty"`

	// +kubebuilder:validation:Optional
	Credentials *string `json:"credentials,omitempty" tf:"credentials,omitempty"`

	// +kubebuilder:validation:Required
	HTTPMethod *string `json:"httpMethod" tf:"http_method,omitempty"`

	// +kubebuilder:validation:Optional
	IntegrationHTTPMethod *string `json:"integrationHttpMethod,omitempty" tf:"integration_http_method,omitempty"`

	// +kubebuilder:validation:Optional
	PassthroughBehavior *string `json:"passthroughBehavior,omitempty" tf:"passthrough_behavior,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +terrajet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`

	// +kubebuilder:validation:Optional
	RequestParameters map[string]*string `json:"requestParameters,omitempty" tf:"request_parameters,omitempty"`

	// +kubebuilder:validation:Optional
	RequestTemplates map[string]*string `json:"requestTemplates,omitempty" tf:"request_templates,omitempty"`

	// +kubebuilder:validation:Required
	ResourceID *string `json:"resourceId" tf:"resource_id,omitempty"`

	// +kubebuilder:validation:Required
	RestAPIID *string `json:"restApiId" tf:"rest_api_id,omitempty"`

	// +kubebuilder:validation:Optional
	TLSConfig []TLSConfigParameters `json:"tlsConfig,omitempty" tf:"tls_config,omitempty"`

	// +kubebuilder:validation:Optional
	TimeoutMilliseconds *int64 `json:"timeoutMilliseconds,omitempty" tf:"timeout_milliseconds,omitempty"`

	// +kubebuilder:validation:Required
	Type *string `json:"type" tf:"type,omitempty"`

	// +kubebuilder:validation:Optional
	URI *string `json:"uri,omitempty" tf:"uri,omitempty"`
}

type TLSConfigObservation struct {
}

type TLSConfigParameters struct {

	// +kubebuilder:validation:Optional
	InsecureSkipVerification *bool `json:"insecureSkipVerification,omitempty" tf:"insecure_skip_verification,omitempty"`
}

// GatewayIntegrationSpec defines the desired state of GatewayIntegration
type GatewayIntegrationSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     GatewayIntegrationParameters `json:"forProvider"`
}

// GatewayIntegrationStatus defines the observed state of GatewayIntegration.
type GatewayIntegrationStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        GatewayIntegrationObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// GatewayIntegration is the Schema for the GatewayIntegrations API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tfaws}
type GatewayIntegration struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              GatewayIntegrationSpec   `json:"spec"`
	Status            GatewayIntegrationStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// GatewayIntegrationList contains a list of GatewayIntegrations
type GatewayIntegrationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []GatewayIntegration `json:"items"`
}

// Repository type metadata.
var (
	GatewayIntegrationKind             = "GatewayIntegration"
	GatewayIntegrationGroupKind        = schema.GroupKind{Group: Group, Kind: GatewayIntegrationKind}.String()
	GatewayIntegrationKindAPIVersion   = GatewayIntegrationKind + "." + GroupVersion.String()
	GatewayIntegrationGroupVersionKind = GroupVersion.WithKind(GatewayIntegrationKind)
)

func init() {
	SchemeBuilder.Register(&GatewayIntegration{}, &GatewayIntegrationList{})
}
