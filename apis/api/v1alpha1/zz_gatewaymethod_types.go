/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type GatewayMethodObservation struct {
}

type GatewayMethodParameters struct {

	// +kubebuilder:validation:Optional
	APIKeyRequired *bool `json:"apiKeyRequired,omitempty" tf:"api_key_required,omitempty"`

	// +kubebuilder:validation:Required
	Authorization *string `json:"authorization" tf:"authorization,omitempty"`

	// +kubebuilder:validation:Optional
	AuthorizationScopes []*string `json:"authorizationScopes,omitempty" tf:"authorization_scopes,omitempty"`

	// +kubebuilder:validation:Optional
	AuthorizerID *string `json:"authorizerId,omitempty" tf:"authorizer_id,omitempty"`

	// +kubebuilder:validation:Required
	HTTPMethod *string `json:"httpMethod" tf:"http_method,omitempty"`

	// +kubebuilder:validation:Optional
	OperationName *string `json:"operationName,omitempty" tf:"operation_name,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +terrajet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`

	// +kubebuilder:validation:Optional
	RequestModels map[string]*string `json:"requestModels,omitempty" tf:"request_models,omitempty"`

	// +kubebuilder:validation:Optional
	RequestParameters map[string]*bool `json:"requestParameters,omitempty" tf:"request_parameters,omitempty"`

	// +kubebuilder:validation:Optional
	RequestValidatorID *string `json:"requestValidatorId,omitempty" tf:"request_validator_id,omitempty"`

	// +kubebuilder:validation:Required
	ResourceID *string `json:"resourceId" tf:"resource_id,omitempty"`

	// +kubebuilder:validation:Required
	RestAPIID *string `json:"restApiId" tf:"rest_api_id,omitempty"`
}

// GatewayMethodSpec defines the desired state of GatewayMethod
type GatewayMethodSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     GatewayMethodParameters `json:"forProvider"`
}

// GatewayMethodStatus defines the observed state of GatewayMethod.
type GatewayMethodStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        GatewayMethodObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// GatewayMethod is the Schema for the GatewayMethods API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tfaws}
type GatewayMethod struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              GatewayMethodSpec   `json:"spec"`
	Status            GatewayMethodStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// GatewayMethodList contains a list of GatewayMethods
type GatewayMethodList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []GatewayMethod `json:"items"`
}

// Repository type metadata.
var (
	GatewayMethodKind             = "GatewayMethod"
	GatewayMethodGroupKind        = schema.GroupKind{Group: Group, Kind: GatewayMethodKind}.String()
	GatewayMethodKindAPIVersion   = GatewayMethodKind + "." + GroupVersion.String()
	GatewayMethodGroupVersionKind = GroupVersion.WithKind(GatewayMethodKind)
)

func init() {
	SchemeBuilder.Register(&GatewayMethod{}, &GatewayMethodList{})
}
