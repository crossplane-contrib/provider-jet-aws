/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type GatewayDeploymentObservation struct {
	CreatedDate *string `json:"createdDate,omitempty" tf:"created_date,omitempty"`

	ExecutionArn *string `json:"executionArn,omitempty" tf:"execution_arn,omitempty"`

	InvokeURL *string `json:"invokeUrl,omitempty" tf:"invoke_url,omitempty"`
}

type GatewayDeploymentParameters struct {

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +terrajet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`

	// +kubebuilder:validation:Required
	RestAPIID *string `json:"restApiId" tf:"rest_api_id,omitempty"`

	// +kubebuilder:validation:Optional
	StageDescription *string `json:"stageDescription,omitempty" tf:"stage_description,omitempty"`

	// +kubebuilder:validation:Optional
	StageName *string `json:"stageName,omitempty" tf:"stage_name,omitempty"`

	// +kubebuilder:validation:Optional
	Triggers map[string]*string `json:"triggers,omitempty" tf:"triggers,omitempty"`

	// +kubebuilder:validation:Optional
	Variables map[string]*string `json:"variables,omitempty" tf:"variables,omitempty"`
}

// GatewayDeploymentSpec defines the desired state of GatewayDeployment
type GatewayDeploymentSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     GatewayDeploymentParameters `json:"forProvider"`
}

// GatewayDeploymentStatus defines the observed state of GatewayDeployment.
type GatewayDeploymentStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        GatewayDeploymentObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// GatewayDeployment is the Schema for the GatewayDeployments API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tfaws}
type GatewayDeployment struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              GatewayDeploymentSpec   `json:"spec"`
	Status            GatewayDeploymentStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// GatewayDeploymentList contains a list of GatewayDeployments
type GatewayDeploymentList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []GatewayDeployment `json:"items"`
}

// Repository type metadata.
var (
	GatewayDeploymentKind             = "GatewayDeployment"
	GatewayDeploymentGroupKind        = schema.GroupKind{Group: Group, Kind: GatewayDeploymentKind}.String()
	GatewayDeploymentKindAPIVersion   = GatewayDeploymentKind + "." + GroupVersion.String()
	GatewayDeploymentGroupVersionKind = GroupVersion.WithKind(GatewayDeploymentKind)
)

func init() {
	SchemeBuilder.Register(&GatewayDeployment{}, &GatewayDeploymentList{})
}
