/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

// +kubebuilder:object:generate=true
// +groupName=api.aws.tf.crossplane.io
// +versionName=v1alpha1

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1alpha1 "github.com/crossplane-contrib/provider-tf-aws/apis/api/v1alpha1"
)

type ApiGatewayMethodObservation struct {
}

type ApiGatewayMethodParameters struct {
	ApiKeyRequired *bool `json:"apiKeyRequired,omitempty" tf:"api_key_required"`

	Authorization string `json:"authorization" tf:"authorization"`

	AuthorizationScopes []string `json:"authorizationScopes,omitempty" tf:"authorization_scopes"`

	AuthorizerId *string `json:"authorizerId,omitempty" tf:"authorizer_id"`

	HttpMethod string `json:"httpMethod" tf:"http_method"`

	OperationName *string `json:"operationName,omitempty" tf:"operation_name"`

	RequestModels map[string]string `json:"requestModels,omitempty" tf:"request_models"`

	RequestParameters map[string]bool `json:"requestParameters,omitempty" tf:"request_parameters"`

	RequestValidatorId *string `json:"requestValidatorId,omitempty" tf:"request_validator_id"`

	ResourceId string `json:"resourceId" tf:"resource_id"`

	RestApiId string `json:"restApiId" tf:"rest_api_id"`
}

// ApiGatewayMethodSpec defines the desired state of ApiGatewayMethod
type ApiGatewayMethodSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       ApiGatewayMethodParameters `json:"forProvider"`
}

// ApiGatewayMethodStatus defines the observed state of ApiGatewayMethod.
type ApiGatewayMethodStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          ApiGatewayMethodObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ApiGatewayMethod is the Schema for the ApiGatewayMethods API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type ApiGatewayMethod struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ApiGatewayMethodSpec   `json:"spec"`
	Status            ApiGatewayMethodStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ApiGatewayMethodList contains a list of ApiGatewayMethods
type ApiGatewayMethodList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ApiGatewayMethod `json:"items"`
}

// Repository type metadata.
var (
	ApiGatewayMethodKind             = "ApiGatewayMethod"
	ApiGatewayMethodGroupKind        = schema.GroupKind{Group: v1alpha1.Group, Kind: ApiGatewayMethodKind}.String()
	ApiGatewayMethodKindAPIVersion   = ApiGatewayMethodKind + "." + v1alpha1.GroupVersion.String()
	ApiGatewayMethodGroupVersionKind = v1alpha1.GroupVersion.WithKind(ApiGatewayMethodKind)
)

func init() {
	v1alpha1.SchemeBuilder.Register(&ApiGatewayMethod{}, &ApiGatewayMethodList{})
}
