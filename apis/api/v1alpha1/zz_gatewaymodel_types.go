/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type GatewayModelObservation struct {
}

type GatewayModelParameters struct {

	// +kubebuilder:validation:Required
	ContentType *string `json:"contentType" tf:"content_type,omitempty"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +terrajet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`

	// +kubebuilder:validation:Required
	RestAPIID *string `json:"restApiId" tf:"rest_api_id,omitempty"`

	// +kubebuilder:validation:Optional
	Schema *string `json:"schema,omitempty" tf:"schema,omitempty"`
}

// GatewayModelSpec defines the desired state of GatewayModel
type GatewayModelSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     GatewayModelParameters `json:"forProvider"`
}

// GatewayModelStatus defines the observed state of GatewayModel.
type GatewayModelStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        GatewayModelObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// GatewayModel is the Schema for the GatewayModels API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tfaws}
type GatewayModel struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              GatewayModelSpec   `json:"spec"`
	Status            GatewayModelStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// GatewayModelList contains a list of GatewayModels
type GatewayModelList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []GatewayModel `json:"items"`
}

// Repository type metadata.
var (
	GatewayModelKind             = "GatewayModel"
	GatewayModelGroupKind        = schema.GroupKind{Group: Group, Kind: GatewayModelKind}.String()
	GatewayModelKindAPIVersion   = GatewayModelKind + "." + GroupVersion.String()
	GatewayModelGroupVersionKind = GroupVersion.WithKind(GatewayModelKind)
)

func init() {
	SchemeBuilder.Register(&GatewayModel{}, &GatewayModelList{})
}
