/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

// +kubebuilder:object:generate=true
// +groupName=api.aws.tf.crossplane.io
// +versionName=v1alpha1

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1alpha1 "github.com/crossplane-contrib/provider-tf-aws/apis/api/v1alpha1"
)

type ApiGatewayBasePathMappingObservation struct {
}

type ApiGatewayBasePathMappingParameters struct {
	ApiId string `json:"apiId" tf:"api_id"`

	BasePath *string `json:"basePath,omitempty" tf:"base_path"`

	DomainName string `json:"domainName" tf:"domain_name"`

	StageName *string `json:"stageName,omitempty" tf:"stage_name"`
}

// ApiGatewayBasePathMappingSpec defines the desired state of ApiGatewayBasePathMapping
type ApiGatewayBasePathMappingSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       ApiGatewayBasePathMappingParameters `json:"forProvider"`
}

// ApiGatewayBasePathMappingStatus defines the observed state of ApiGatewayBasePathMapping.
type ApiGatewayBasePathMappingStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          ApiGatewayBasePathMappingObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ApiGatewayBasePathMapping is the Schema for the ApiGatewayBasePathMappings API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type ApiGatewayBasePathMapping struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ApiGatewayBasePathMappingSpec   `json:"spec"`
	Status            ApiGatewayBasePathMappingStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ApiGatewayBasePathMappingList contains a list of ApiGatewayBasePathMappings
type ApiGatewayBasePathMappingList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ApiGatewayBasePathMapping `json:"items"`
}

// Repository type metadata.
var (
	ApiGatewayBasePathMappingKind             = "ApiGatewayBasePathMapping"
	ApiGatewayBasePathMappingGroupKind        = schema.GroupKind{Group: v1alpha1.Group, Kind: ApiGatewayBasePathMappingKind}.String()
	ApiGatewayBasePathMappingKindAPIVersion   = ApiGatewayBasePathMappingKind + "." + v1alpha1.GroupVersion.String()
	ApiGatewayBasePathMappingGroupVersionKind = v1alpha1.GroupVersion.WithKind(ApiGatewayBasePathMappingKind)
)

func init() {
	v1alpha1.SchemeBuilder.Register(&ApiGatewayBasePathMapping{}, &ApiGatewayBasePathMappingList{})
}
