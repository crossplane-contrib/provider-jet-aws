/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type GatewayDocumentationPartObservation struct {
}

type GatewayDocumentationPartParameters struct {

	// +kubebuilder:validation:Required
	Location []LocationParameters `json:"location" tf:"location,omitempty"`

	// +kubebuilder:validation:Required
	Properties *string `json:"properties" tf:"properties,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +terrajet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`

	// +kubebuilder:validation:Required
	RestAPIID *string `json:"restApiId" tf:"rest_api_id,omitempty"`
}

type LocationObservation struct {
}

type LocationParameters struct {

	// +kubebuilder:validation:Optional
	Method *string `json:"method,omitempty" tf:"method,omitempty"`

	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	Path *string `json:"path,omitempty" tf:"path,omitempty"`

	// +kubebuilder:validation:Optional
	StatusCode *string `json:"statusCode,omitempty" tf:"status_code,omitempty"`

	// +kubebuilder:validation:Required
	Type *string `json:"type" tf:"type,omitempty"`
}

// GatewayDocumentationPartSpec defines the desired state of GatewayDocumentationPart
type GatewayDocumentationPartSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     GatewayDocumentationPartParameters `json:"forProvider"`
}

// GatewayDocumentationPartStatus defines the observed state of GatewayDocumentationPart.
type GatewayDocumentationPartStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        GatewayDocumentationPartObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// GatewayDocumentationPart is the Schema for the GatewayDocumentationParts API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tfaws}
type GatewayDocumentationPart struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              GatewayDocumentationPartSpec   `json:"spec"`
	Status            GatewayDocumentationPartStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// GatewayDocumentationPartList contains a list of GatewayDocumentationParts
type GatewayDocumentationPartList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []GatewayDocumentationPart `json:"items"`
}

// Repository type metadata.
var (
	GatewayDocumentationPartKind             = "GatewayDocumentationPart"
	GatewayDocumentationPartGroupKind        = schema.GroupKind{Group: Group, Kind: GatewayDocumentationPartKind}.String()
	GatewayDocumentationPartKindAPIVersion   = GatewayDocumentationPartKind + "." + GroupVersion.String()
	GatewayDocumentationPartGroupVersionKind = GroupVersion.WithKind(GatewayDocumentationPartKind)
)

func init() {
	SchemeBuilder.Register(&GatewayDocumentationPart{}, &GatewayDocumentationPartList{})
}
