/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type ApiGatewayAccountObservation struct {
	ThrottleSettings []ThrottleSettingsObservation `json:"throttleSettings" tf:"throttle_settings"`
}

type ApiGatewayAccountParameters struct {
	CloudwatchRoleARN *string `json:"cloudwatchRoleARN,omitempty" tf:"cloudwatch_role_arn"`
}

type ThrottleSettingsObservation struct {
	BurstLimit int64 `json:"burstLimit" tf:"burst_limit"`

	RateLimit float64 `json:"rateLimit" tf:"rate_limit"`
}

type ThrottleSettingsParameters struct {
}

// ApiGatewayAccountSpec defines the desired state of ApiGatewayAccount
type ApiGatewayAccountSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       ApiGatewayAccountParameters `json:"forProvider"`
}

// ApiGatewayAccountStatus defines the observed state of ApiGatewayAccount.
type ApiGatewayAccountStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          ApiGatewayAccountObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ApiGatewayAccount is the Schema for the ApiGatewayAccounts API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tfaws}
type ApiGatewayAccount struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ApiGatewayAccountSpec   `json:"spec"`
	Status            ApiGatewayAccountStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ApiGatewayAccountList contains a list of ApiGatewayAccounts
type ApiGatewayAccountList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ApiGatewayAccount `json:"items"`
}

// Repository type metadata.
var (
	ApiGatewayAccountKind             = "ApiGatewayAccount"
	ApiGatewayAccountGroupKind        = schema.GroupKind{Group: Group, Kind: ApiGatewayAccountKind}.String()
	ApiGatewayAccountKindAPIVersion   = ApiGatewayAccountKind + "." + GroupVersion.String()
	ApiGatewayAccountGroupVersionKind = GroupVersion.WithKind(ApiGatewayAccountKind)
)

func init() {
	SchemeBuilder.Register(&ApiGatewayAccount{}, &ApiGatewayAccountList{})
}
