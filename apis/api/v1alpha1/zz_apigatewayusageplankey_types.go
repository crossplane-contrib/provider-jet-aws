/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type ApiGatewayUsagePlanKeyObservation struct {
	Name string `json:"name" tf:"name"`

	Value string `json:"value" tf:"value"`
}

type ApiGatewayUsagePlanKeyParameters struct {
	KeyID string `json:"keyID" tf:"key_id"`

	KeyType string `json:"keyType" tf:"key_type"`

	UsagePlanID string `json:"usagePlanID" tf:"usage_plan_id"`
}

// ApiGatewayUsagePlanKeySpec defines the desired state of ApiGatewayUsagePlanKey
type ApiGatewayUsagePlanKeySpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       ApiGatewayUsagePlanKeyParameters `json:"forProvider"`
}

// ApiGatewayUsagePlanKeyStatus defines the observed state of ApiGatewayUsagePlanKey.
type ApiGatewayUsagePlanKeyStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          ApiGatewayUsagePlanKeyObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ApiGatewayUsagePlanKey is the Schema for the ApiGatewayUsagePlanKeys API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tfaws}
type ApiGatewayUsagePlanKey struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ApiGatewayUsagePlanKeySpec   `json:"spec"`
	Status            ApiGatewayUsagePlanKeyStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ApiGatewayUsagePlanKeyList contains a list of ApiGatewayUsagePlanKeys
type ApiGatewayUsagePlanKeyList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ApiGatewayUsagePlanKey `json:"items"`
}

// Repository type metadata.
var (
	ApiGatewayUsagePlanKeyKind             = "ApiGatewayUsagePlanKey"
	ApiGatewayUsagePlanKeyGroupKind        = schema.GroupKind{Group: Group, Kind: ApiGatewayUsagePlanKeyKind}.String()
	ApiGatewayUsagePlanKeyKindAPIVersion   = ApiGatewayUsagePlanKeyKind + "." + GroupVersion.String()
	ApiGatewayUsagePlanKeyGroupVersionKind = GroupVersion.WithKind(ApiGatewayUsagePlanKeyKind)
)

func init() {
	SchemeBuilder.Register(&ApiGatewayUsagePlanKey{}, &ApiGatewayUsagePlanKeyList{})
}
