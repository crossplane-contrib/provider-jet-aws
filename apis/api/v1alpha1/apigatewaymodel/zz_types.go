/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

// +kubebuilder:object:generate=true
// +groupName=api.aws.tf.crossplane.io
// +versionName=v1alpha1

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1alpha1 "github.com/crossplane-contrib/provider-tf-aws/apis/api/v1alpha1"
)

type ApiGatewayModelObservation struct {
}

type ApiGatewayModelParameters struct {
	ContentType string `json:"contentType" tf:"content_type"`

	Description *string `json:"description,omitempty" tf:"description"`

	Name string `json:"name" tf:"name"`

	RestApiId string `json:"restApiId" tf:"rest_api_id"`

	Schema *string `json:"schema,omitempty" tf:"schema"`
}

// ApiGatewayModelSpec defines the desired state of ApiGatewayModel
type ApiGatewayModelSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       ApiGatewayModelParameters `json:"forProvider"`
}

// ApiGatewayModelStatus defines the observed state of ApiGatewayModel.
type ApiGatewayModelStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          ApiGatewayModelObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ApiGatewayModel is the Schema for the ApiGatewayModels API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type ApiGatewayModel struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ApiGatewayModelSpec   `json:"spec"`
	Status            ApiGatewayModelStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ApiGatewayModelList contains a list of ApiGatewayModels
type ApiGatewayModelList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ApiGatewayModel `json:"items"`
}

// Repository type metadata.
var (
	ApiGatewayModelKind             = "ApiGatewayModel"
	ApiGatewayModelGroupKind        = schema.GroupKind{Group: v1alpha1.Group, Kind: ApiGatewayModelKind}.String()
	ApiGatewayModelKindAPIVersion   = ApiGatewayModelKind + "." + v1alpha1.GroupVersion.String()
	ApiGatewayModelGroupVersionKind = v1alpha1.GroupVersion.WithKind(ApiGatewayModelKind)
)

func init() {
	v1alpha1.SchemeBuilder.Register(&ApiGatewayModel{}, &ApiGatewayModelList{})
}
