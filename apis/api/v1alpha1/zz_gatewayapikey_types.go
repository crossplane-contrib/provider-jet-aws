/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type GatewayApiKeyObservation struct {
	Arn *string `json:"arn,omitempty" tf:"arn,omitempty"`

	CreatedDate *string `json:"createdDate,omitempty" tf:"created_date,omitempty"`

	LastUpdatedDate *string `json:"lastUpdatedDate,omitempty" tf:"last_updated_date,omitempty"`

	TagsAll map[string]*string `json:"tagsAll,omitempty" tf:"tags_all,omitempty"`
}

type GatewayApiKeyParameters struct {

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +terrajet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`

	// +kubebuilder:validation:Optional
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// +kubebuilder:validation:Optional
	ValueSecretRef v1.SecretKeySelector `json:"valueSecretRef,omitempty" tf:"-"`
}

// GatewayApiKeySpec defines the desired state of GatewayApiKey
type GatewayApiKeySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     GatewayApiKeyParameters `json:"forProvider"`
}

// GatewayApiKeyStatus defines the observed state of GatewayApiKey.
type GatewayApiKeyStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        GatewayApiKeyObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// GatewayApiKey is the Schema for the GatewayApiKeys API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tfaws}
type GatewayApiKey struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              GatewayApiKeySpec   `json:"spec"`
	Status            GatewayApiKeyStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// GatewayApiKeyList contains a list of GatewayApiKeys
type GatewayApiKeyList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []GatewayApiKey `json:"items"`
}

// Repository type metadata.
var (
	GatewayApiKeyKind             = "GatewayApiKey"
	GatewayApiKeyGroupKind        = schema.GroupKind{Group: Group, Kind: GatewayApiKeyKind}.String()
	GatewayApiKeyKindAPIVersion   = GatewayApiKeyKind + "." + GroupVersion.String()
	GatewayApiKeyGroupVersionKind = GroupVersion.WithKind(GatewayApiKeyKind)
)

func init() {
	SchemeBuilder.Register(&GatewayApiKey{}, &GatewayApiKeyList{})
}
