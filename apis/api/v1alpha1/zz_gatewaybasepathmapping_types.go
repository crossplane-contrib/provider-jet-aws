/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type GatewayBasePathMappingObservation struct {
}

type GatewayBasePathMappingParameters struct {

	// +kubebuilder:validation:Required
	APIID *string `json:"apiId" tf:"api_id,omitempty"`

	// +kubebuilder:validation:Optional
	BasePath *string `json:"basePath,omitempty" tf:"base_path,omitempty"`

	// +kubebuilder:validation:Required
	DomainName *string `json:"domainName" tf:"domain_name,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +terrajet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`

	// +kubebuilder:validation:Optional
	StageName *string `json:"stageName,omitempty" tf:"stage_name,omitempty"`
}

// GatewayBasePathMappingSpec defines the desired state of GatewayBasePathMapping
type GatewayBasePathMappingSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     GatewayBasePathMappingParameters `json:"forProvider"`
}

// GatewayBasePathMappingStatus defines the observed state of GatewayBasePathMapping.
type GatewayBasePathMappingStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        GatewayBasePathMappingObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// GatewayBasePathMapping is the Schema for the GatewayBasePathMappings API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tfaws}
type GatewayBasePathMapping struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              GatewayBasePathMappingSpec   `json:"spec"`
	Status            GatewayBasePathMappingStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// GatewayBasePathMappingList contains a list of GatewayBasePathMappings
type GatewayBasePathMappingList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []GatewayBasePathMapping `json:"items"`
}

// Repository type metadata.
var (
	GatewayBasePathMappingKind             = "GatewayBasePathMapping"
	GatewayBasePathMappingGroupKind        = schema.GroupKind{Group: Group, Kind: GatewayBasePathMappingKind}.String()
	GatewayBasePathMappingKindAPIVersion   = GatewayBasePathMappingKind + "." + GroupVersion.String()
	GatewayBasePathMappingGroupVersionKind = GroupVersion.WithKind(GatewayBasePathMappingKind)
)

func init() {
	SchemeBuilder.Register(&GatewayBasePathMapping{}, &GatewayBasePathMappingList{})
}
