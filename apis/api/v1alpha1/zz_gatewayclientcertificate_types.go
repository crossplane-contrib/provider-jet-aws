/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type GatewayClientCertificateObservation struct {
	Arn *string `json:"arn,omitempty" tf:"arn,omitempty"`

	CreatedDate *string `json:"createdDate,omitempty" tf:"created_date,omitempty"`

	ExpirationDate *string `json:"expirationDate,omitempty" tf:"expiration_date,omitempty"`

	PemEncodedCertificate *string `json:"pemEncodedCertificate,omitempty" tf:"pem_encoded_certificate,omitempty"`

	TagsAll map[string]*string `json:"tagsAll,omitempty" tf:"tags_all,omitempty"`
}

type GatewayClientCertificateParameters struct {

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +terrajet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`

	// +kubebuilder:validation:Optional
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

// GatewayClientCertificateSpec defines the desired state of GatewayClientCertificate
type GatewayClientCertificateSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     GatewayClientCertificateParameters `json:"forProvider"`
}

// GatewayClientCertificateStatus defines the observed state of GatewayClientCertificate.
type GatewayClientCertificateStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        GatewayClientCertificateObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// GatewayClientCertificate is the Schema for the GatewayClientCertificates API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tfaws}
type GatewayClientCertificate struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              GatewayClientCertificateSpec   `json:"spec"`
	Status            GatewayClientCertificateStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// GatewayClientCertificateList contains a list of GatewayClientCertificates
type GatewayClientCertificateList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []GatewayClientCertificate `json:"items"`
}

// Repository type metadata.
var (
	GatewayClientCertificateKind             = "GatewayClientCertificate"
	GatewayClientCertificateGroupKind        = schema.GroupKind{Group: Group, Kind: GatewayClientCertificateKind}.String()
	GatewayClientCertificateKindAPIVersion   = GatewayClientCertificateKind + "." + GroupVersion.String()
	GatewayClientCertificateGroupVersionKind = GroupVersion.WithKind(GatewayClientCertificateKind)
)

func init() {
	SchemeBuilder.Register(&GatewayClientCertificate{}, &GatewayClientCertificateList{})
}
