/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type ApiGatewayApiKeyObservation struct {
	ARN string `json:"arn" tf:"arn"`

	CreatedDate string `json:"createdDate" tf:"created_date"`

	LastUpdatedDate string `json:"lastUpdatedDate" tf:"last_updated_date"`
}

type ApiGatewayApiKeyParameters struct {
	Description *string `json:"description,omitempty" tf:"description"`

	Enabled *bool `json:"enabled,omitempty" tf:"enabled"`

	Name string `json:"name" tf:"name"`

	Tags map[string]string `json:"tags,omitempty" tf:"tags"`

	TagsAll map[string]string `json:"tagsAll,omitempty" tf:"tags_all"`

	Value *string `json:"value,omitempty" tf:"value"`
}

// ApiGatewayApiKeySpec defines the desired state of ApiGatewayApiKey
type ApiGatewayApiKeySpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       ApiGatewayApiKeyParameters `json:"forProvider"`
}

// ApiGatewayApiKeyStatus defines the observed state of ApiGatewayApiKey.
type ApiGatewayApiKeyStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          ApiGatewayApiKeyObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ApiGatewayApiKey is the Schema for the ApiGatewayApiKeys API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tfaws}
type ApiGatewayApiKey struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ApiGatewayApiKeySpec   `json:"spec"`
	Status            ApiGatewayApiKeyStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ApiGatewayApiKeyList contains a list of ApiGatewayApiKeys
type ApiGatewayApiKeyList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ApiGatewayApiKey `json:"items"`
}

// Repository type metadata.
var (
	ApiGatewayApiKeyKind             = "ApiGatewayApiKey"
	ApiGatewayApiKeyGroupKind        = schema.GroupKind{Group: Group, Kind: ApiGatewayApiKeyKind}.String()
	ApiGatewayApiKeyKindAPIVersion   = ApiGatewayApiKeyKind + "." + GroupVersion.String()
	ApiGatewayApiKeyGroupVersionKind = GroupVersion.WithKind(ApiGatewayApiKeyKind)
)

func init() {
	SchemeBuilder.Register(&ApiGatewayApiKey{}, &ApiGatewayApiKeyList{})
}
