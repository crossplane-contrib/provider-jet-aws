/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type GatewayMethodSettingsObservation struct {
}

type GatewayMethodSettingsParameters struct {

	// +kubebuilder:validation:Required
	MethodPath *string `json:"methodPath" tf:"method_path,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +terrajet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`

	// +kubebuilder:validation:Required
	RestAPIID *string `json:"restApiId" tf:"rest_api_id,omitempty"`

	// +kubebuilder:validation:Required
	Settings []SettingsParameters `json:"settings" tf:"settings,omitempty"`

	// +kubebuilder:validation:Required
	StageName *string `json:"stageName" tf:"stage_name,omitempty"`
}

type SettingsObservation struct {
}

type SettingsParameters struct {

	// +kubebuilder:validation:Optional
	CacheDataEncrypted *bool `json:"cacheDataEncrypted,omitempty" tf:"cache_data_encrypted,omitempty"`

	// +kubebuilder:validation:Optional
	CacheTTLInSeconds *int64 `json:"cacheTtlInSeconds,omitempty" tf:"cache_ttl_in_seconds,omitempty"`

	// +kubebuilder:validation:Optional
	CachingEnabled *bool `json:"cachingEnabled,omitempty" tf:"caching_enabled,omitempty"`

	// +kubebuilder:validation:Optional
	DataTraceEnabled *bool `json:"dataTraceEnabled,omitempty" tf:"data_trace_enabled,omitempty"`

	// +kubebuilder:validation:Optional
	LoggingLevel *string `json:"loggingLevel,omitempty" tf:"logging_level,omitempty"`

	// +kubebuilder:validation:Optional
	MetricsEnabled *bool `json:"metricsEnabled,omitempty" tf:"metrics_enabled,omitempty"`

	// +kubebuilder:validation:Optional
	RequireAuthorizationForCacheControl *bool `json:"requireAuthorizationForCacheControl,omitempty" tf:"require_authorization_for_cache_control,omitempty"`

	// +kubebuilder:validation:Optional
	ThrottlingBurstLimit *int64 `json:"throttlingBurstLimit,omitempty" tf:"throttling_burst_limit,omitempty"`

	// +kubebuilder:validation:Optional
	ThrottlingRateLimit *float64 `json:"throttlingRateLimit,omitempty" tf:"throttling_rate_limit,omitempty"`

	// +kubebuilder:validation:Optional
	UnauthorizedCacheControlHeaderStrategy *string `json:"unauthorizedCacheControlHeaderStrategy,omitempty" tf:"unauthorized_cache_control_header_strategy,omitempty"`
}

// GatewayMethodSettingsSpec defines the desired state of GatewayMethodSettings
type GatewayMethodSettingsSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     GatewayMethodSettingsParameters `json:"forProvider"`
}

// GatewayMethodSettingsStatus defines the observed state of GatewayMethodSettings.
type GatewayMethodSettingsStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        GatewayMethodSettingsObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// GatewayMethodSettings is the Schema for the GatewayMethodSettingss API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tfaws}
type GatewayMethodSettings struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              GatewayMethodSettingsSpec   `json:"spec"`
	Status            GatewayMethodSettingsStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// GatewayMethodSettingsList contains a list of GatewayMethodSettingss
type GatewayMethodSettingsList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []GatewayMethodSettings `json:"items"`
}

// Repository type metadata.
var (
	GatewayMethodSettingsKind             = "GatewayMethodSettings"
	GatewayMethodSettingsGroupKind        = schema.GroupKind{Group: Group, Kind: GatewayMethodSettingsKind}.String()
	GatewayMethodSettingsKindAPIVersion   = GatewayMethodSettingsKind + "." + GroupVersion.String()
	GatewayMethodSettingsGroupVersionKind = GroupVersion.WithKind(GatewayMethodSettingsKind)
)

func init() {
	SchemeBuilder.Register(&GatewayMethodSettings{}, &GatewayMethodSettingsList{})
}
