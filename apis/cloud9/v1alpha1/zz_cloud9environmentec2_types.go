/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type Cloud9EnvironmentEc2Observation struct {
	ARN string `json:"arn" tf:"arn"`

	Type string `json:"type" tf:"type"`
}

type Cloud9EnvironmentEc2Parameters struct {
	AutomaticStopTimeMinutes *int64 `json:"automaticStopTimeMinutes,omitempty" tf:"automatic_stop_time_minutes"`

	Description *string `json:"description,omitempty" tf:"description"`

	InstanceType string `json:"instanceType" tf:"instance_type"`

	Name string `json:"name" tf:"name"`

	OwnerARN *string `json:"ownerARN,omitempty" tf:"owner_arn"`

	SubnetID *string `json:"subnetID,omitempty" tf:"subnet_id"`

	Tags map[string]string `json:"tags,omitempty" tf:"tags"`

	TagsAll map[string]string `json:"tagsAll,omitempty" tf:"tags_all"`
}

// Cloud9EnvironmentEc2Spec defines the desired state of Cloud9EnvironmentEc2
type Cloud9EnvironmentEc2Spec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       Cloud9EnvironmentEc2Parameters `json:"forProvider"`
}

// Cloud9EnvironmentEc2Status defines the observed state of Cloud9EnvironmentEc2.
type Cloud9EnvironmentEc2Status struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          Cloud9EnvironmentEc2Observation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Cloud9EnvironmentEc2 is the Schema for the Cloud9EnvironmentEc2s API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tfaws}
type Cloud9EnvironmentEc2 struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              Cloud9EnvironmentEc2Spec   `json:"spec"`
	Status            Cloud9EnvironmentEc2Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// Cloud9EnvironmentEc2List contains a list of Cloud9EnvironmentEc2s
type Cloud9EnvironmentEc2List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Cloud9EnvironmentEc2 `json:"items"`
}

// Repository type metadata.
var (
	Cloud9EnvironmentEc2Kind             = "Cloud9EnvironmentEc2"
	Cloud9EnvironmentEc2GroupKind        = schema.GroupKind{Group: Group, Kind: Cloud9EnvironmentEc2Kind}.String()
	Cloud9EnvironmentEc2KindAPIVersion   = Cloud9EnvironmentEc2Kind + "." + GroupVersion.String()
	Cloud9EnvironmentEc2GroupVersionKind = GroupVersion.WithKind(Cloud9EnvironmentEc2Kind)
)

func init() {
	SchemeBuilder.Register(&Cloud9EnvironmentEc2{}, &Cloud9EnvironmentEc2List{})
}
