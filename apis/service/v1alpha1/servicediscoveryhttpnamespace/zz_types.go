/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

// +kubebuilder:object:generate=true
// +groupName=service.aws.tf.crossplane.io
// +versionName=v1alpha1

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1alpha1 "github.com/crossplane-contrib/provider-tf-aws/apis/service/v1alpha1"
)

type ServiceDiscoveryHttpNamespaceObservation struct {
	Arn string `json:"arn" tf:"arn"`
}

type ServiceDiscoveryHttpNamespaceParameters struct {
	Description *string `json:"description,omitempty" tf:"description"`

	Name string `json:"name" tf:"name"`

	Tags map[string]string `json:"tags,omitempty" tf:"tags"`

	TagsAll map[string]string `json:"tagsAll,omitempty" tf:"tags_all"`
}

// ServiceDiscoveryHttpNamespaceSpec defines the desired state of ServiceDiscoveryHttpNamespace
type ServiceDiscoveryHttpNamespaceSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       ServiceDiscoveryHttpNamespaceParameters `json:"forProvider"`
}

// ServiceDiscoveryHttpNamespaceStatus defines the observed state of ServiceDiscoveryHttpNamespace.
type ServiceDiscoveryHttpNamespaceStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          ServiceDiscoveryHttpNamespaceObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ServiceDiscoveryHttpNamespace is the Schema for the ServiceDiscoveryHttpNamespaces API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type ServiceDiscoveryHttpNamespace struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ServiceDiscoveryHttpNamespaceSpec   `json:"spec"`
	Status            ServiceDiscoveryHttpNamespaceStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ServiceDiscoveryHttpNamespaceList contains a list of ServiceDiscoveryHttpNamespaces
type ServiceDiscoveryHttpNamespaceList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ServiceDiscoveryHttpNamespace `json:"items"`
}

// Repository type metadata.
var (
	ServiceDiscoveryHttpNamespaceKind             = "ServiceDiscoveryHttpNamespace"
	ServiceDiscoveryHttpNamespaceGroupKind        = schema.GroupKind{Group: v1alpha1.Group, Kind: ServiceDiscoveryHttpNamespaceKind}.String()
	ServiceDiscoveryHttpNamespaceKindAPIVersion   = ServiceDiscoveryHttpNamespaceKind + "." + v1alpha1.GroupVersion.String()
	ServiceDiscoveryHttpNamespaceGroupVersionKind = v1alpha1.GroupVersion.WithKind(ServiceDiscoveryHttpNamespaceKind)
)

func init() {
	v1alpha1.SchemeBuilder.Register(&ServiceDiscoveryHttpNamespace{}, &ServiceDiscoveryHttpNamespaceList{})
}
