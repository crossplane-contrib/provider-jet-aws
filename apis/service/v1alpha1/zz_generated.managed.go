/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by angryjet. DO NOT EDIT.

package v1alpha1

import xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"

// GetCondition of this DiscoveryHttpNamespace.
func (mg *DiscoveryHttpNamespace) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this DiscoveryHttpNamespace.
func (mg *DiscoveryHttpNamespace) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this DiscoveryHttpNamespace.
func (mg *DiscoveryHttpNamespace) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this DiscoveryHttpNamespace.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *DiscoveryHttpNamespace) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this DiscoveryHttpNamespace.
func (mg *DiscoveryHttpNamespace) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this DiscoveryHttpNamespace.
func (mg *DiscoveryHttpNamespace) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this DiscoveryHttpNamespace.
func (mg *DiscoveryHttpNamespace) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this DiscoveryHttpNamespace.
func (mg *DiscoveryHttpNamespace) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this DiscoveryHttpNamespace.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *DiscoveryHttpNamespace) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this DiscoveryHttpNamespace.
func (mg *DiscoveryHttpNamespace) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this DiscoveryPrivateDnsNamespace.
func (mg *DiscoveryPrivateDnsNamespace) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this DiscoveryPrivateDnsNamespace.
func (mg *DiscoveryPrivateDnsNamespace) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this DiscoveryPrivateDnsNamespace.
func (mg *DiscoveryPrivateDnsNamespace) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this DiscoveryPrivateDnsNamespace.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *DiscoveryPrivateDnsNamespace) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this DiscoveryPrivateDnsNamespace.
func (mg *DiscoveryPrivateDnsNamespace) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this DiscoveryPrivateDnsNamespace.
func (mg *DiscoveryPrivateDnsNamespace) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this DiscoveryPrivateDnsNamespace.
func (mg *DiscoveryPrivateDnsNamespace) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this DiscoveryPrivateDnsNamespace.
func (mg *DiscoveryPrivateDnsNamespace) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this DiscoveryPrivateDnsNamespace.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *DiscoveryPrivateDnsNamespace) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this DiscoveryPrivateDnsNamespace.
func (mg *DiscoveryPrivateDnsNamespace) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this DiscoveryPublicDnsNamespace.
func (mg *DiscoveryPublicDnsNamespace) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this DiscoveryPublicDnsNamespace.
func (mg *DiscoveryPublicDnsNamespace) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this DiscoveryPublicDnsNamespace.
func (mg *DiscoveryPublicDnsNamespace) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this DiscoveryPublicDnsNamespace.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *DiscoveryPublicDnsNamespace) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this DiscoveryPublicDnsNamespace.
func (mg *DiscoveryPublicDnsNamespace) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this DiscoveryPublicDnsNamespace.
func (mg *DiscoveryPublicDnsNamespace) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this DiscoveryPublicDnsNamespace.
func (mg *DiscoveryPublicDnsNamespace) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this DiscoveryPublicDnsNamespace.
func (mg *DiscoveryPublicDnsNamespace) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this DiscoveryPublicDnsNamespace.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *DiscoveryPublicDnsNamespace) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this DiscoveryPublicDnsNamespace.
func (mg *DiscoveryPublicDnsNamespace) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this DiscoveryService.
func (mg *DiscoveryService) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this DiscoveryService.
func (mg *DiscoveryService) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this DiscoveryService.
func (mg *DiscoveryService) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this DiscoveryService.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *DiscoveryService) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this DiscoveryService.
func (mg *DiscoveryService) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this DiscoveryService.
func (mg *DiscoveryService) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this DiscoveryService.
func (mg *DiscoveryService) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this DiscoveryService.
func (mg *DiscoveryService) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this DiscoveryService.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *DiscoveryService) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this DiscoveryService.
func (mg *DiscoveryService) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}
